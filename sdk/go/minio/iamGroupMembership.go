// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package minio

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IamGroupMembership struct {
	pulumi.CustomResourceState

	// Group name to add users
	Group pulumi.StringOutput `pulumi:"group"`
	// Name of group membership
	Name pulumi.StringOutput `pulumi:"name"`
	// Add user or list of users such as a group membership
	Users pulumi.StringArrayOutput `pulumi:"users"`
}

// NewIamGroupMembership registers a new resource with the given unique name, arguments, and options.
func NewIamGroupMembership(ctx *pulumi.Context,
	name string, args *IamGroupMembershipArgs, opts ...pulumi.ResourceOption) (*IamGroupMembership, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Group == nil {
		return nil, errors.New("invalid value for required argument 'Group'")
	}
	if args.Users == nil {
		return nil, errors.New("invalid value for required argument 'Users'")
	}
	var resource IamGroupMembership
	err := ctx.RegisterResource("minio:index/iamGroupMembership:IamGroupMembership", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamGroupMembership gets an existing IamGroupMembership resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamGroupMembership(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamGroupMembershipState, opts ...pulumi.ResourceOption) (*IamGroupMembership, error) {
	var resource IamGroupMembership
	err := ctx.ReadResource("minio:index/iamGroupMembership:IamGroupMembership", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamGroupMembership resources.
type iamGroupMembershipState struct {
	// Group name to add users
	Group *string `pulumi:"group"`
	// Name of group membership
	Name *string `pulumi:"name"`
	// Add user or list of users such as a group membership
	Users []string `pulumi:"users"`
}

type IamGroupMembershipState struct {
	// Group name to add users
	Group pulumi.StringPtrInput
	// Name of group membership
	Name pulumi.StringPtrInput
	// Add user or list of users such as a group membership
	Users pulumi.StringArrayInput
}

func (IamGroupMembershipState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamGroupMembershipState)(nil)).Elem()
}

type iamGroupMembershipArgs struct {
	// Group name to add users
	Group string `pulumi:"group"`
	// Name of group membership
	Name *string `pulumi:"name"`
	// Add user or list of users such as a group membership
	Users []string `pulumi:"users"`
}

// The set of arguments for constructing a IamGroupMembership resource.
type IamGroupMembershipArgs struct {
	// Group name to add users
	Group pulumi.StringInput
	// Name of group membership
	Name pulumi.StringPtrInput
	// Add user or list of users such as a group membership
	Users pulumi.StringArrayInput
}

func (IamGroupMembershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamGroupMembershipArgs)(nil)).Elem()
}

type IamGroupMembershipInput interface {
	pulumi.Input

	ToIamGroupMembershipOutput() IamGroupMembershipOutput
	ToIamGroupMembershipOutputWithContext(ctx context.Context) IamGroupMembershipOutput
}

func (*IamGroupMembership) ElementType() reflect.Type {
	return reflect.TypeOf((**IamGroupMembership)(nil)).Elem()
}

func (i *IamGroupMembership) ToIamGroupMembershipOutput() IamGroupMembershipOutput {
	return i.ToIamGroupMembershipOutputWithContext(context.Background())
}

func (i *IamGroupMembership) ToIamGroupMembershipOutputWithContext(ctx context.Context) IamGroupMembershipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamGroupMembershipOutput)
}

// IamGroupMembershipArrayInput is an input type that accepts IamGroupMembershipArray and IamGroupMembershipArrayOutput values.
// You can construct a concrete instance of `IamGroupMembershipArrayInput` via:
//
//          IamGroupMembershipArray{ IamGroupMembershipArgs{...} }
type IamGroupMembershipArrayInput interface {
	pulumi.Input

	ToIamGroupMembershipArrayOutput() IamGroupMembershipArrayOutput
	ToIamGroupMembershipArrayOutputWithContext(context.Context) IamGroupMembershipArrayOutput
}

type IamGroupMembershipArray []IamGroupMembershipInput

func (IamGroupMembershipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamGroupMembership)(nil)).Elem()
}

func (i IamGroupMembershipArray) ToIamGroupMembershipArrayOutput() IamGroupMembershipArrayOutput {
	return i.ToIamGroupMembershipArrayOutputWithContext(context.Background())
}

func (i IamGroupMembershipArray) ToIamGroupMembershipArrayOutputWithContext(ctx context.Context) IamGroupMembershipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamGroupMembershipArrayOutput)
}

// IamGroupMembershipMapInput is an input type that accepts IamGroupMembershipMap and IamGroupMembershipMapOutput values.
// You can construct a concrete instance of `IamGroupMembershipMapInput` via:
//
//          IamGroupMembershipMap{ "key": IamGroupMembershipArgs{...} }
type IamGroupMembershipMapInput interface {
	pulumi.Input

	ToIamGroupMembershipMapOutput() IamGroupMembershipMapOutput
	ToIamGroupMembershipMapOutputWithContext(context.Context) IamGroupMembershipMapOutput
}

type IamGroupMembershipMap map[string]IamGroupMembershipInput

func (IamGroupMembershipMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamGroupMembership)(nil)).Elem()
}

func (i IamGroupMembershipMap) ToIamGroupMembershipMapOutput() IamGroupMembershipMapOutput {
	return i.ToIamGroupMembershipMapOutputWithContext(context.Background())
}

func (i IamGroupMembershipMap) ToIamGroupMembershipMapOutputWithContext(ctx context.Context) IamGroupMembershipMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamGroupMembershipMapOutput)
}

type IamGroupMembershipOutput struct{ *pulumi.OutputState }

func (IamGroupMembershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamGroupMembership)(nil)).Elem()
}

func (o IamGroupMembershipOutput) ToIamGroupMembershipOutput() IamGroupMembershipOutput {
	return o
}

func (o IamGroupMembershipOutput) ToIamGroupMembershipOutputWithContext(ctx context.Context) IamGroupMembershipOutput {
	return o
}

type IamGroupMembershipArrayOutput struct{ *pulumi.OutputState }

func (IamGroupMembershipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamGroupMembership)(nil)).Elem()
}

func (o IamGroupMembershipArrayOutput) ToIamGroupMembershipArrayOutput() IamGroupMembershipArrayOutput {
	return o
}

func (o IamGroupMembershipArrayOutput) ToIamGroupMembershipArrayOutputWithContext(ctx context.Context) IamGroupMembershipArrayOutput {
	return o
}

func (o IamGroupMembershipArrayOutput) Index(i pulumi.IntInput) IamGroupMembershipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IamGroupMembership {
		return vs[0].([]*IamGroupMembership)[vs[1].(int)]
	}).(IamGroupMembershipOutput)
}

type IamGroupMembershipMapOutput struct{ *pulumi.OutputState }

func (IamGroupMembershipMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamGroupMembership)(nil)).Elem()
}

func (o IamGroupMembershipMapOutput) ToIamGroupMembershipMapOutput() IamGroupMembershipMapOutput {
	return o
}

func (o IamGroupMembershipMapOutput) ToIamGroupMembershipMapOutputWithContext(ctx context.Context) IamGroupMembershipMapOutput {
	return o
}

func (o IamGroupMembershipMapOutput) MapIndex(k pulumi.StringInput) IamGroupMembershipOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IamGroupMembership {
		return vs[0].(map[string]*IamGroupMembership)[vs[1].(string)]
	}).(IamGroupMembershipOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamGroupMembershipInput)(nil)).Elem(), &IamGroupMembership{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamGroupMembershipArrayInput)(nil)).Elem(), IamGroupMembershipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamGroupMembershipMapInput)(nil)).Elem(), IamGroupMembershipMap{})
	pulumi.RegisterOutputType(IamGroupMembershipOutput{})
	pulumi.RegisterOutputType(IamGroupMembershipArrayOutput{})
	pulumi.RegisterOutputType(IamGroupMembershipMapOutput{})
}
