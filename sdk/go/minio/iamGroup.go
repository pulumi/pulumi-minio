// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package minio

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-minio/sdk/go/minio/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-minio/sdk/go/minio"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			developer, err := minio.NewIamGroup(ctx, "developer", &minio.IamGroupArgs{
//				Name: pulumi.String("developer"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("minioUserGroup", developer.GroupName)
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
type IamGroup struct {
	pulumi.CustomResourceState

	// Disable group
	DisableGroup pulumi.BoolPtrOutput `pulumi:"disableGroup"`
	// Delete group even if it has non-Terraform-managed members
	ForceDestroy pulumi.BoolPtrOutput `pulumi:"forceDestroy"`
	GroupName    pulumi.StringOutput  `pulumi:"groupName"`
	Name         pulumi.StringOutput  `pulumi:"name"`
}

// NewIamGroup registers a new resource with the given unique name, arguments, and options.
func NewIamGroup(ctx *pulumi.Context,
	name string, args *IamGroupArgs, opts ...pulumi.ResourceOption) (*IamGroup, error) {
	if args == nil {
		args = &IamGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IamGroup
	err := ctx.RegisterResource("minio:index/iamGroup:IamGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamGroup gets an existing IamGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamGroupState, opts ...pulumi.ResourceOption) (*IamGroup, error) {
	var resource IamGroup
	err := ctx.ReadResource("minio:index/iamGroup:IamGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamGroup resources.
type iamGroupState struct {
	// Disable group
	DisableGroup *bool `pulumi:"disableGroup"`
	// Delete group even if it has non-Terraform-managed members
	ForceDestroy *bool   `pulumi:"forceDestroy"`
	GroupName    *string `pulumi:"groupName"`
	Name         *string `pulumi:"name"`
}

type IamGroupState struct {
	// Disable group
	DisableGroup pulumi.BoolPtrInput
	// Delete group even if it has non-Terraform-managed members
	ForceDestroy pulumi.BoolPtrInput
	GroupName    pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
}

func (IamGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamGroupState)(nil)).Elem()
}

type iamGroupArgs struct {
	// Disable group
	DisableGroup *bool `pulumi:"disableGroup"`
	// Delete group even if it has non-Terraform-managed members
	ForceDestroy *bool   `pulumi:"forceDestroy"`
	Name         *string `pulumi:"name"`
}

// The set of arguments for constructing a IamGroup resource.
type IamGroupArgs struct {
	// Disable group
	DisableGroup pulumi.BoolPtrInput
	// Delete group even if it has non-Terraform-managed members
	ForceDestroy pulumi.BoolPtrInput
	Name         pulumi.StringPtrInput
}

func (IamGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamGroupArgs)(nil)).Elem()
}

type IamGroupInput interface {
	pulumi.Input

	ToIamGroupOutput() IamGroupOutput
	ToIamGroupOutputWithContext(ctx context.Context) IamGroupOutput
}

func (*IamGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**IamGroup)(nil)).Elem()
}

func (i *IamGroup) ToIamGroupOutput() IamGroupOutput {
	return i.ToIamGroupOutputWithContext(context.Background())
}

func (i *IamGroup) ToIamGroupOutputWithContext(ctx context.Context) IamGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamGroupOutput)
}

// IamGroupArrayInput is an input type that accepts IamGroupArray and IamGroupArrayOutput values.
// You can construct a concrete instance of `IamGroupArrayInput` via:
//
//	IamGroupArray{ IamGroupArgs{...} }
type IamGroupArrayInput interface {
	pulumi.Input

	ToIamGroupArrayOutput() IamGroupArrayOutput
	ToIamGroupArrayOutputWithContext(context.Context) IamGroupArrayOutput
}

type IamGroupArray []IamGroupInput

func (IamGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamGroup)(nil)).Elem()
}

func (i IamGroupArray) ToIamGroupArrayOutput() IamGroupArrayOutput {
	return i.ToIamGroupArrayOutputWithContext(context.Background())
}

func (i IamGroupArray) ToIamGroupArrayOutputWithContext(ctx context.Context) IamGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamGroupArrayOutput)
}

// IamGroupMapInput is an input type that accepts IamGroupMap and IamGroupMapOutput values.
// You can construct a concrete instance of `IamGroupMapInput` via:
//
//	IamGroupMap{ "key": IamGroupArgs{...} }
type IamGroupMapInput interface {
	pulumi.Input

	ToIamGroupMapOutput() IamGroupMapOutput
	ToIamGroupMapOutputWithContext(context.Context) IamGroupMapOutput
}

type IamGroupMap map[string]IamGroupInput

func (IamGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamGroup)(nil)).Elem()
}

func (i IamGroupMap) ToIamGroupMapOutput() IamGroupMapOutput {
	return i.ToIamGroupMapOutputWithContext(context.Background())
}

func (i IamGroupMap) ToIamGroupMapOutputWithContext(ctx context.Context) IamGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamGroupMapOutput)
}

type IamGroupOutput struct{ *pulumi.OutputState }

func (IamGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamGroup)(nil)).Elem()
}

func (o IamGroupOutput) ToIamGroupOutput() IamGroupOutput {
	return o
}

func (o IamGroupOutput) ToIamGroupOutputWithContext(ctx context.Context) IamGroupOutput {
	return o
}

// Disable group
func (o IamGroupOutput) DisableGroup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IamGroup) pulumi.BoolPtrOutput { return v.DisableGroup }).(pulumi.BoolPtrOutput)
}

// Delete group even if it has non-Terraform-managed members
func (o IamGroupOutput) ForceDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IamGroup) pulumi.BoolPtrOutput { return v.ForceDestroy }).(pulumi.BoolPtrOutput)
}

func (o IamGroupOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *IamGroup) pulumi.StringOutput { return v.GroupName }).(pulumi.StringOutput)
}

func (o IamGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IamGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type IamGroupArrayOutput struct{ *pulumi.OutputState }

func (IamGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamGroup)(nil)).Elem()
}

func (o IamGroupArrayOutput) ToIamGroupArrayOutput() IamGroupArrayOutput {
	return o
}

func (o IamGroupArrayOutput) ToIamGroupArrayOutputWithContext(ctx context.Context) IamGroupArrayOutput {
	return o
}

func (o IamGroupArrayOutput) Index(i pulumi.IntInput) IamGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IamGroup {
		return vs[0].([]*IamGroup)[vs[1].(int)]
	}).(IamGroupOutput)
}

type IamGroupMapOutput struct{ *pulumi.OutputState }

func (IamGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamGroup)(nil)).Elem()
}

func (o IamGroupMapOutput) ToIamGroupMapOutput() IamGroupMapOutput {
	return o
}

func (o IamGroupMapOutput) ToIamGroupMapOutputWithContext(ctx context.Context) IamGroupMapOutput {
	return o
}

func (o IamGroupMapOutput) MapIndex(k pulumi.StringInput) IamGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IamGroup {
		return vs[0].(map[string]*IamGroup)[vs[1].(string)]
	}).(IamGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamGroupInput)(nil)).Elem(), &IamGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamGroupArrayInput)(nil)).Elem(), IamGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamGroupMapInput)(nil)).Elem(), IamGroupMap{})
	pulumi.RegisterOutputType(IamGroupOutput{})
	pulumi.RegisterOutputType(IamGroupArrayOutput{})
	pulumi.RegisterOutputType(IamGroupMapOutput{})
}
