// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package minio

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-minio/sdk/v2/go/minio/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-minio/sdk/v2/go/minio"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myBucketInAS3Bucket, err := minio.NewS3Bucket(ctx, "myBucketInAS3Bucket", &minio.S3BucketArgs{
//				Bucket: pulumi.String("my-bucket"),
//			})
//			if err != nil {
//				return err
//			}
//			myBucketInBS3Bucket, err := minio.NewS3Bucket(ctx, "myBucketInBS3Bucket", &minio.S3BucketArgs{
//				Bucket: pulumi.String("my-bucket"),
//			}, pulumi.Provider(minio.Deployment_b))
//			if err != nil {
//				return err
//			}
//			myBucketInAS3BucketVersioning, err := minio.NewS3BucketVersioning(ctx, "myBucketInAS3BucketVersioning", &minio.S3BucketVersioningArgs{
//				Bucket: myBucketInAS3Bucket.Bucket,
//				VersioningConfiguration: &minio.S3BucketVersioningVersioningConfigurationArgs{
//					Status: pulumi.String("Enabled"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			myBucketInBS3BucketVersioning, err := minio.NewS3BucketVersioning(ctx, "myBucketInBS3BucketVersioning", &minio.S3BucketVersioningArgs{
//				Bucket: myBucketInBS3Bucket.Bucket,
//				VersioningConfiguration: &minio.S3BucketVersioningVersioningConfigurationArgs{
//					Status: pulumi.String("Enabled"),
//				},
//			}, pulumi.Provider(minio.Deployment_b))
//			if err != nil {
//				return err
//			}
//			replicationPolicy, err := minio.GetIamPolicyDocument(ctx, &minio.GetIamPolicyDocumentArgs{
//				Statements: []minio.GetIamPolicyDocumentStatement{
//					{
//						Sid:    pulumi.StringRef("ReadBuckets"),
//						Effect: pulumi.StringRef("Allow"),
//						Resources: []string{
//							"arn:aws:s3:::*",
//						},
//						Actions: []string{
//							"s3:ListBucket",
//						},
//					},
//					{
//						Sid:    pulumi.StringRef("EnableReplicationOnBucket"),
//						Effect: pulumi.StringRef("Allow"),
//						Resources: []string{
//							"arn:aws:s3:::my-bucket",
//						},
//						Actions: []string{
//							"s3:GetReplicationConfiguration",
//							"s3:ListBucket",
//							"s3:ListBucketMultipartUploads",
//							"s3:GetBucketLocation",
//							"s3:GetBucketVersioning",
//							"s3:GetBucketObjectLockConfiguration",
//							"s3:GetEncryptionConfiguration",
//						},
//					},
//					{
//						Sid:    pulumi.StringRef("EnableReplicatingDataIntoBucket"),
//						Effect: pulumi.StringRef("Allow"),
//						Resources: []string{
//							"arn:aws:s3:::my-bucket/*",
//						},
//						Actions: []string{
//							"s3:GetReplicationConfiguration",
//							"s3:ReplicateTags",
//							"s3:AbortMultipartUpload",
//							"s3:GetObject",
//							"s3:GetObjectVersion",
//							"s3:GetObjectVersionTagging",
//							"s3:PutObject",
//							"s3:PutObjectRetention",
//							"s3:PutBucketObjectLockConfiguration",
//							"s3:PutObjectLegalHold",
//							"s3:DeleteObject",
//							"s3:ReplicateObject",
//							"s3:ReplicateDelete",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			replicationInBIamPolicy, err := minio.NewIamPolicy(ctx, "replicationInBIamPolicy", &minio.IamPolicyArgs{
//				Policy: *pulumi.String(replicationPolicy.Json),
//			}, pulumi.Provider(minio.Deployment_b))
//			if err != nil {
//				return err
//			}
//			replicationInBIamUser, err := minio.NewIamUser(ctx, "replicationInBIamUser", &minio.IamUserArgs{
//				ForceDestroy: pulumi.Bool(true),
//			}, pulumi.Provider(minio.Deployment_b))
//			if err != nil {
//				return err
//			}
//			replicationInBIamUserPolicyAttachment, err := minio.NewIamUserPolicyAttachment(ctx, "replicationInBIamUserPolicyAttachment", &minio.IamUserPolicyAttachmentArgs{
//				UserName:   replicationInBIamUser.Name,
//				PolicyName: replicationInBIamPolicy.ID(),
//			}, pulumi.Provider(minio.Deployment_b))
//			if err != nil {
//				return err
//			}
//			replicationInBIamServiceAccount, err := minio.NewIamServiceAccount(ctx, "replicationInBIamServiceAccount", &minio.IamServiceAccountArgs{
//				TargetUser: replicationInBIamUser.Name,
//			}, pulumi.Provider(minio.Deployment_b), pulumi.DependsOn([]pulumi.Resource{
//				replicationInBIamUserPolicyAttachment,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = minio.NewS3BucketReplication(ctx, "replicationInBS3BucketReplication", &minio.S3BucketReplicationArgs{
//				Bucket: myBucketInAS3Bucket.Bucket,
//				Rules: minio.S3BucketReplicationRuleArray{
//					&minio.S3BucketReplicationRuleArgs{
//						DeleteReplication:         pulumi.Bool(true),
//						DeleteMarkerReplication:   pulumi.Bool(true),
//						ExistingObjectReplication: pulumi.Bool(true),
//						MetadataSync:              pulumi.Bool(true),
//						Target: &minio.S3BucketReplicationRuleTargetArgs{
//							Bucket:        myBucketInBS3Bucket.Bucket,
//							Secure:        pulumi.Bool(false),
//							Host:          pulumi.Any(_var.Minio_server_b),
//							BandwidthLimt: pulumi.String("100M"),
//							AccessKey:     replicationInBIamServiceAccount.AccessKey,
//							SecretKey:     replicationInBIamServiceAccount.SecretKey,
//						},
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				myBucketInAS3BucketVersioning,
//				myBucketInBS3BucketVersioning,
//			}))
//			if err != nil {
//				return err
//			}
//			replicationInAIamPolicy, err := minio.NewIamPolicy(ctx, "replicationInAIamPolicy", &minio.IamPolicyArgs{
//				Policy: *pulumi.String(replicationPolicy.Json),
//			})
//			if err != nil {
//				return err
//			}
//			replicationInAIamUser, err := minio.NewIamUser(ctx, "replicationInAIamUser", &minio.IamUserArgs{
//				ForceDestroy: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = minio.NewIamUserPolicyAttachment(ctx, "replicationInAIamUserPolicyAttachment", &minio.IamUserPolicyAttachmentArgs{
//				UserName:   replicationInAIamUser.Name,
//				PolicyName: replicationInAIamPolicy.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			replicationInAIamServiceAccount, err := minio.NewIamServiceAccount(ctx, "replicationInAIamServiceAccount", &minio.IamServiceAccountArgs{
//				TargetUser: replicationInAIamUser.Name,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				replicationInBIamUserPolicyAttachment,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = minio.NewS3BucketReplication(ctx, "replicationInAS3BucketReplication", &minio.S3BucketReplicationArgs{
//				Bucket: myBucketInBS3Bucket.Bucket,
//				Rules: minio.S3BucketReplicationRuleArray{
//					&minio.S3BucketReplicationRuleArgs{
//						DeleteReplication:         pulumi.Bool(true),
//						DeleteMarkerReplication:   pulumi.Bool(true),
//						ExistingObjectReplication: pulumi.Bool(true),
//						MetadataSync:              pulumi.Bool(true),
//						Target: &minio.S3BucketReplicationRuleTargetArgs{
//							Bucket:        myBucketInAS3Bucket.Bucket,
//							Host:          pulumi.Any(_var.Minio_server_a),
//							Secure:        pulumi.Bool(false),
//							BandwidthLimt: pulumi.String("100M"),
//							AccessKey:     replicationInAIamServiceAccount.AccessKey,
//							SecretKey:     replicationInAIamServiceAccount.SecretKey,
//						},
//					},
//				},
//			}, pulumi.Provider(minio.Deployment_b), pulumi.DependsOn([]pulumi.Resource{
//				myBucketInAS3BucketVersioning,
//				myBucketInBS3BucketVersioning,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type S3BucketReplication struct {
	pulumi.CustomResourceState

	// The name of the existing target bucket to replicate into
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Rule definitions
	Rules S3BucketReplicationRuleArrayOutput `pulumi:"rules"`
}

// NewS3BucketReplication registers a new resource with the given unique name, arguments, and options.
func NewS3BucketReplication(ctx *pulumi.Context,
	name string, args *S3BucketReplicationArgs, opts ...pulumi.ResourceOption) (*S3BucketReplication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource S3BucketReplication
	err := ctx.RegisterResource("minio:index/s3BucketReplication:S3BucketReplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetS3BucketReplication gets an existing S3BucketReplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetS3BucketReplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *S3BucketReplicationState, opts ...pulumi.ResourceOption) (*S3BucketReplication, error) {
	var resource S3BucketReplication
	err := ctx.ReadResource("minio:index/s3BucketReplication:S3BucketReplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering S3BucketReplication resources.
type s3bucketReplicationState struct {
	// The name of the existing target bucket to replicate into
	Bucket *string `pulumi:"bucket"`
	// Rule definitions
	Rules []S3BucketReplicationRule `pulumi:"rules"`
}

type S3BucketReplicationState struct {
	// The name of the existing target bucket to replicate into
	Bucket pulumi.StringPtrInput
	// Rule definitions
	Rules S3BucketReplicationRuleArrayInput
}

func (S3BucketReplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*s3bucketReplicationState)(nil)).Elem()
}

type s3bucketReplicationArgs struct {
	// The name of the existing target bucket to replicate into
	Bucket string `pulumi:"bucket"`
	// Rule definitions
	Rules []S3BucketReplicationRule `pulumi:"rules"`
}

// The set of arguments for constructing a S3BucketReplication resource.
type S3BucketReplicationArgs struct {
	// The name of the existing target bucket to replicate into
	Bucket pulumi.StringInput
	// Rule definitions
	Rules S3BucketReplicationRuleArrayInput
}

func (S3BucketReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*s3bucketReplicationArgs)(nil)).Elem()
}

type S3BucketReplicationInput interface {
	pulumi.Input

	ToS3BucketReplicationOutput() S3BucketReplicationOutput
	ToS3BucketReplicationOutputWithContext(ctx context.Context) S3BucketReplicationOutput
}

func (*S3BucketReplication) ElementType() reflect.Type {
	return reflect.TypeOf((**S3BucketReplication)(nil)).Elem()
}

func (i *S3BucketReplication) ToS3BucketReplicationOutput() S3BucketReplicationOutput {
	return i.ToS3BucketReplicationOutputWithContext(context.Background())
}

func (i *S3BucketReplication) ToS3BucketReplicationOutputWithContext(ctx context.Context) S3BucketReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3BucketReplicationOutput)
}

// S3BucketReplicationArrayInput is an input type that accepts S3BucketReplicationArray and S3BucketReplicationArrayOutput values.
// You can construct a concrete instance of `S3BucketReplicationArrayInput` via:
//
//	S3BucketReplicationArray{ S3BucketReplicationArgs{...} }
type S3BucketReplicationArrayInput interface {
	pulumi.Input

	ToS3BucketReplicationArrayOutput() S3BucketReplicationArrayOutput
	ToS3BucketReplicationArrayOutputWithContext(context.Context) S3BucketReplicationArrayOutput
}

type S3BucketReplicationArray []S3BucketReplicationInput

func (S3BucketReplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3BucketReplication)(nil)).Elem()
}

func (i S3BucketReplicationArray) ToS3BucketReplicationArrayOutput() S3BucketReplicationArrayOutput {
	return i.ToS3BucketReplicationArrayOutputWithContext(context.Background())
}

func (i S3BucketReplicationArray) ToS3BucketReplicationArrayOutputWithContext(ctx context.Context) S3BucketReplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3BucketReplicationArrayOutput)
}

// S3BucketReplicationMapInput is an input type that accepts S3BucketReplicationMap and S3BucketReplicationMapOutput values.
// You can construct a concrete instance of `S3BucketReplicationMapInput` via:
//
//	S3BucketReplicationMap{ "key": S3BucketReplicationArgs{...} }
type S3BucketReplicationMapInput interface {
	pulumi.Input

	ToS3BucketReplicationMapOutput() S3BucketReplicationMapOutput
	ToS3BucketReplicationMapOutputWithContext(context.Context) S3BucketReplicationMapOutput
}

type S3BucketReplicationMap map[string]S3BucketReplicationInput

func (S3BucketReplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3BucketReplication)(nil)).Elem()
}

func (i S3BucketReplicationMap) ToS3BucketReplicationMapOutput() S3BucketReplicationMapOutput {
	return i.ToS3BucketReplicationMapOutputWithContext(context.Background())
}

func (i S3BucketReplicationMap) ToS3BucketReplicationMapOutputWithContext(ctx context.Context) S3BucketReplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3BucketReplicationMapOutput)
}

type S3BucketReplicationOutput struct{ *pulumi.OutputState }

func (S3BucketReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**S3BucketReplication)(nil)).Elem()
}

func (o S3BucketReplicationOutput) ToS3BucketReplicationOutput() S3BucketReplicationOutput {
	return o
}

func (o S3BucketReplicationOutput) ToS3BucketReplicationOutputWithContext(ctx context.Context) S3BucketReplicationOutput {
	return o
}

// The name of the existing target bucket to replicate into
func (o S3BucketReplicationOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *S3BucketReplication) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// Rule definitions
func (o S3BucketReplicationOutput) Rules() S3BucketReplicationRuleArrayOutput {
	return o.ApplyT(func(v *S3BucketReplication) S3BucketReplicationRuleArrayOutput { return v.Rules }).(S3BucketReplicationRuleArrayOutput)
}

type S3BucketReplicationArrayOutput struct{ *pulumi.OutputState }

func (S3BucketReplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3BucketReplication)(nil)).Elem()
}

func (o S3BucketReplicationArrayOutput) ToS3BucketReplicationArrayOutput() S3BucketReplicationArrayOutput {
	return o
}

func (o S3BucketReplicationArrayOutput) ToS3BucketReplicationArrayOutputWithContext(ctx context.Context) S3BucketReplicationArrayOutput {
	return o
}

func (o S3BucketReplicationArrayOutput) Index(i pulumi.IntInput) S3BucketReplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *S3BucketReplication {
		return vs[0].([]*S3BucketReplication)[vs[1].(int)]
	}).(S3BucketReplicationOutput)
}

type S3BucketReplicationMapOutput struct{ *pulumi.OutputState }

func (S3BucketReplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3BucketReplication)(nil)).Elem()
}

func (o S3BucketReplicationMapOutput) ToS3BucketReplicationMapOutput() S3BucketReplicationMapOutput {
	return o
}

func (o S3BucketReplicationMapOutput) ToS3BucketReplicationMapOutputWithContext(ctx context.Context) S3BucketReplicationMapOutput {
	return o
}

func (o S3BucketReplicationMapOutput) MapIndex(k pulumi.StringInput) S3BucketReplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *S3BucketReplication {
		return vs[0].(map[string]*S3BucketReplication)[vs[1].(string)]
	}).(S3BucketReplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*S3BucketReplicationInput)(nil)).Elem(), &S3BucketReplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3BucketReplicationArrayInput)(nil)).Elem(), S3BucketReplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3BucketReplicationMapInput)(nil)).Elem(), S3BucketReplicationMap{})
	pulumi.RegisterOutputType(S3BucketReplicationOutput{})
	pulumi.RegisterOutputType(S3BucketReplicationArrayOutput{})
	pulumi.RegisterOutputType(S3BucketReplicationMapOutput{})
}
