// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package minio

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-minio/sdk/go/minio"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		stateTerraformS3, err := minio.NewS3Bucket(ctx, "stateTerraformS3", &minio.S3BucketArgs{
// 			Acl:    pulumi.String("public"),
// 			Bucket: pulumi.String("state-terraform-s3"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("minioId", stateTerraformS3.ID())
// 		ctx.Export("minioUrl", stateTerraformS3.BucketDomainName)
// 		return nil
// 	})
// }
// ```
type S3Bucket struct {
	pulumi.CustomResourceState

	Acl              pulumi.StringPtrOutput `pulumi:"acl"`
	Bucket           pulumi.StringOutput    `pulumi:"bucket"`
	BucketDomainName pulumi.StringOutput    `pulumi:"bucketDomainName"`
	BucketPrefix     pulumi.StringPtrOutput `pulumi:"bucketPrefix"`
	ForceDestroy     pulumi.BoolPtrOutput   `pulumi:"forceDestroy"`
}

// NewS3Bucket registers a new resource with the given unique name, arguments, and options.
func NewS3Bucket(ctx *pulumi.Context,
	name string, args *S3BucketArgs, opts ...pulumi.ResourceOption) (*S3Bucket, error) {
	if args == nil {
		args = &S3BucketArgs{}
	}

	var resource S3Bucket
	err := ctx.RegisterResource("minio:index/s3Bucket:S3Bucket", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetS3Bucket gets an existing S3Bucket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetS3Bucket(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *S3BucketState, opts ...pulumi.ResourceOption) (*S3Bucket, error) {
	var resource S3Bucket
	err := ctx.ReadResource("minio:index/s3Bucket:S3Bucket", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering S3Bucket resources.
type s3bucketState struct {
	Acl              *string `pulumi:"acl"`
	Bucket           *string `pulumi:"bucket"`
	BucketDomainName *string `pulumi:"bucketDomainName"`
	BucketPrefix     *string `pulumi:"bucketPrefix"`
	ForceDestroy     *bool   `pulumi:"forceDestroy"`
}

type S3BucketState struct {
	Acl              pulumi.StringPtrInput
	Bucket           pulumi.StringPtrInput
	BucketDomainName pulumi.StringPtrInput
	BucketPrefix     pulumi.StringPtrInput
	ForceDestroy     pulumi.BoolPtrInput
}

func (S3BucketState) ElementType() reflect.Type {
	return reflect.TypeOf((*s3bucketState)(nil)).Elem()
}

type s3bucketArgs struct {
	Acl          *string `pulumi:"acl"`
	Bucket       *string `pulumi:"bucket"`
	BucketPrefix *string `pulumi:"bucketPrefix"`
	ForceDestroy *bool   `pulumi:"forceDestroy"`
}

// The set of arguments for constructing a S3Bucket resource.
type S3BucketArgs struct {
	Acl          pulumi.StringPtrInput
	Bucket       pulumi.StringPtrInput
	BucketPrefix pulumi.StringPtrInput
	ForceDestroy pulumi.BoolPtrInput
}

func (S3BucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*s3bucketArgs)(nil)).Elem()
}

type S3BucketInput interface {
	pulumi.Input

	ToS3BucketOutput() S3BucketOutput
	ToS3BucketOutputWithContext(ctx context.Context) S3BucketOutput
}

func (*S3Bucket) ElementType() reflect.Type {
	return reflect.TypeOf((**S3Bucket)(nil)).Elem()
}

func (i *S3Bucket) ToS3BucketOutput() S3BucketOutput {
	return i.ToS3BucketOutputWithContext(context.Background())
}

func (i *S3Bucket) ToS3BucketOutputWithContext(ctx context.Context) S3BucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3BucketOutput)
}

// S3BucketArrayInput is an input type that accepts S3BucketArray and S3BucketArrayOutput values.
// You can construct a concrete instance of `S3BucketArrayInput` via:
//
//          S3BucketArray{ S3BucketArgs{...} }
type S3BucketArrayInput interface {
	pulumi.Input

	ToS3BucketArrayOutput() S3BucketArrayOutput
	ToS3BucketArrayOutputWithContext(context.Context) S3BucketArrayOutput
}

type S3BucketArray []S3BucketInput

func (S3BucketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3Bucket)(nil)).Elem()
}

func (i S3BucketArray) ToS3BucketArrayOutput() S3BucketArrayOutput {
	return i.ToS3BucketArrayOutputWithContext(context.Background())
}

func (i S3BucketArray) ToS3BucketArrayOutputWithContext(ctx context.Context) S3BucketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3BucketArrayOutput)
}

// S3BucketMapInput is an input type that accepts S3BucketMap and S3BucketMapOutput values.
// You can construct a concrete instance of `S3BucketMapInput` via:
//
//          S3BucketMap{ "key": S3BucketArgs{...} }
type S3BucketMapInput interface {
	pulumi.Input

	ToS3BucketMapOutput() S3BucketMapOutput
	ToS3BucketMapOutputWithContext(context.Context) S3BucketMapOutput
}

type S3BucketMap map[string]S3BucketInput

func (S3BucketMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3Bucket)(nil)).Elem()
}

func (i S3BucketMap) ToS3BucketMapOutput() S3BucketMapOutput {
	return i.ToS3BucketMapOutputWithContext(context.Background())
}

func (i S3BucketMap) ToS3BucketMapOutputWithContext(ctx context.Context) S3BucketMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3BucketMapOutput)
}

type S3BucketOutput struct{ *pulumi.OutputState }

func (S3BucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**S3Bucket)(nil)).Elem()
}

func (o S3BucketOutput) ToS3BucketOutput() S3BucketOutput {
	return o
}

func (o S3BucketOutput) ToS3BucketOutputWithContext(ctx context.Context) S3BucketOutput {
	return o
}

type S3BucketArrayOutput struct{ *pulumi.OutputState }

func (S3BucketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3Bucket)(nil)).Elem()
}

func (o S3BucketArrayOutput) ToS3BucketArrayOutput() S3BucketArrayOutput {
	return o
}

func (o S3BucketArrayOutput) ToS3BucketArrayOutputWithContext(ctx context.Context) S3BucketArrayOutput {
	return o
}

func (o S3BucketArrayOutput) Index(i pulumi.IntInput) S3BucketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *S3Bucket {
		return vs[0].([]*S3Bucket)[vs[1].(int)]
	}).(S3BucketOutput)
}

type S3BucketMapOutput struct{ *pulumi.OutputState }

func (S3BucketMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3Bucket)(nil)).Elem()
}

func (o S3BucketMapOutput) ToS3BucketMapOutput() S3BucketMapOutput {
	return o
}

func (o S3BucketMapOutput) ToS3BucketMapOutputWithContext(ctx context.Context) S3BucketMapOutput {
	return o
}

func (o S3BucketMapOutput) MapIndex(k pulumi.StringInput) S3BucketOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *S3Bucket {
		return vs[0].(map[string]*S3Bucket)[vs[1].(string)]
	}).(S3BucketOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*S3BucketInput)(nil)).Elem(), &S3Bucket{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3BucketArrayInput)(nil)).Elem(), S3BucketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3BucketMapInput)(nil)).Elem(), S3BucketMap{})
	pulumi.RegisterOutputType(S3BucketOutput{})
	pulumi.RegisterOutputType(S3BucketArrayOutput{})
	pulumi.RegisterOutputType(S3BucketMapOutput{})
}
