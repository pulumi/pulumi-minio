// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package minio

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-minio/sdk/go/minio"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := minio.NewS3Bucket(ctx, "bucketS3Bucket", &minio.S3BucketArgs{
//				Bucket: pulumi.String("example-bucket"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = minio.NewS3BucketNotification(ctx, "bucketS3BucketNotification", &minio.S3BucketNotificationArgs{
//				Bucket: pulumi.Any(minio_s3_bucket.State_terraform_s3.Bucket),
//				Queues: minio.S3BucketNotificationQueueArray{
//					&minio.S3BucketNotificationQueueArgs{
//						Id:       pulumi.String("notification-queue"),
//						QueueArn: pulumi.String("arn:minio:sqs::primary:webhook"),
//						Events: pulumi.StringArray{
//							pulumi.String("s3:ObjectCreated:*"),
//							pulumi.String("s3:ObjectRemoved:Delete"),
//						},
//						FilterPrefix: pulumi.String("example/"),
//						FilterSuffix: pulumi.String(".png"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type S3BucketNotification struct {
	pulumi.CustomResourceState

	Bucket pulumi.StringOutput                  `pulumi:"bucket"`
	Queues S3BucketNotificationQueueArrayOutput `pulumi:"queues"`
}

// NewS3BucketNotification registers a new resource with the given unique name, arguments, and options.
func NewS3BucketNotification(ctx *pulumi.Context,
	name string, args *S3BucketNotificationArgs, opts ...pulumi.ResourceOption) (*S3BucketNotification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	var resource S3BucketNotification
	err := ctx.RegisterResource("minio:index/s3BucketNotification:S3BucketNotification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetS3BucketNotification gets an existing S3BucketNotification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetS3BucketNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *S3BucketNotificationState, opts ...pulumi.ResourceOption) (*S3BucketNotification, error) {
	var resource S3BucketNotification
	err := ctx.ReadResource("minio:index/s3BucketNotification:S3BucketNotification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering S3BucketNotification resources.
type s3bucketNotificationState struct {
	Bucket *string                     `pulumi:"bucket"`
	Queues []S3BucketNotificationQueue `pulumi:"queues"`
}

type S3BucketNotificationState struct {
	Bucket pulumi.StringPtrInput
	Queues S3BucketNotificationQueueArrayInput
}

func (S3BucketNotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*s3bucketNotificationState)(nil)).Elem()
}

type s3bucketNotificationArgs struct {
	Bucket string                      `pulumi:"bucket"`
	Queues []S3BucketNotificationQueue `pulumi:"queues"`
}

// The set of arguments for constructing a S3BucketNotification resource.
type S3BucketNotificationArgs struct {
	Bucket pulumi.StringInput
	Queues S3BucketNotificationQueueArrayInput
}

func (S3BucketNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*s3bucketNotificationArgs)(nil)).Elem()
}

type S3BucketNotificationInput interface {
	pulumi.Input

	ToS3BucketNotificationOutput() S3BucketNotificationOutput
	ToS3BucketNotificationOutputWithContext(ctx context.Context) S3BucketNotificationOutput
}

func (*S3BucketNotification) ElementType() reflect.Type {
	return reflect.TypeOf((**S3BucketNotification)(nil)).Elem()
}

func (i *S3BucketNotification) ToS3BucketNotificationOutput() S3BucketNotificationOutput {
	return i.ToS3BucketNotificationOutputWithContext(context.Background())
}

func (i *S3BucketNotification) ToS3BucketNotificationOutputWithContext(ctx context.Context) S3BucketNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3BucketNotificationOutput)
}

// S3BucketNotificationArrayInput is an input type that accepts S3BucketNotificationArray and S3BucketNotificationArrayOutput values.
// You can construct a concrete instance of `S3BucketNotificationArrayInput` via:
//
//	S3BucketNotificationArray{ S3BucketNotificationArgs{...} }
type S3BucketNotificationArrayInput interface {
	pulumi.Input

	ToS3BucketNotificationArrayOutput() S3BucketNotificationArrayOutput
	ToS3BucketNotificationArrayOutputWithContext(context.Context) S3BucketNotificationArrayOutput
}

type S3BucketNotificationArray []S3BucketNotificationInput

func (S3BucketNotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3BucketNotification)(nil)).Elem()
}

func (i S3BucketNotificationArray) ToS3BucketNotificationArrayOutput() S3BucketNotificationArrayOutput {
	return i.ToS3BucketNotificationArrayOutputWithContext(context.Background())
}

func (i S3BucketNotificationArray) ToS3BucketNotificationArrayOutputWithContext(ctx context.Context) S3BucketNotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3BucketNotificationArrayOutput)
}

// S3BucketNotificationMapInput is an input type that accepts S3BucketNotificationMap and S3BucketNotificationMapOutput values.
// You can construct a concrete instance of `S3BucketNotificationMapInput` via:
//
//	S3BucketNotificationMap{ "key": S3BucketNotificationArgs{...} }
type S3BucketNotificationMapInput interface {
	pulumi.Input

	ToS3BucketNotificationMapOutput() S3BucketNotificationMapOutput
	ToS3BucketNotificationMapOutputWithContext(context.Context) S3BucketNotificationMapOutput
}

type S3BucketNotificationMap map[string]S3BucketNotificationInput

func (S3BucketNotificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3BucketNotification)(nil)).Elem()
}

func (i S3BucketNotificationMap) ToS3BucketNotificationMapOutput() S3BucketNotificationMapOutput {
	return i.ToS3BucketNotificationMapOutputWithContext(context.Background())
}

func (i S3BucketNotificationMap) ToS3BucketNotificationMapOutputWithContext(ctx context.Context) S3BucketNotificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3BucketNotificationMapOutput)
}

type S3BucketNotificationOutput struct{ *pulumi.OutputState }

func (S3BucketNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**S3BucketNotification)(nil)).Elem()
}

func (o S3BucketNotificationOutput) ToS3BucketNotificationOutput() S3BucketNotificationOutput {
	return o
}

func (o S3BucketNotificationOutput) ToS3BucketNotificationOutputWithContext(ctx context.Context) S3BucketNotificationOutput {
	return o
}

func (o S3BucketNotificationOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *S3BucketNotification) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

func (o S3BucketNotificationOutput) Queues() S3BucketNotificationQueueArrayOutput {
	return o.ApplyT(func(v *S3BucketNotification) S3BucketNotificationQueueArrayOutput { return v.Queues }).(S3BucketNotificationQueueArrayOutput)
}

type S3BucketNotificationArrayOutput struct{ *pulumi.OutputState }

func (S3BucketNotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3BucketNotification)(nil)).Elem()
}

func (o S3BucketNotificationArrayOutput) ToS3BucketNotificationArrayOutput() S3BucketNotificationArrayOutput {
	return o
}

func (o S3BucketNotificationArrayOutput) ToS3BucketNotificationArrayOutputWithContext(ctx context.Context) S3BucketNotificationArrayOutput {
	return o
}

func (o S3BucketNotificationArrayOutput) Index(i pulumi.IntInput) S3BucketNotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *S3BucketNotification {
		return vs[0].([]*S3BucketNotification)[vs[1].(int)]
	}).(S3BucketNotificationOutput)
}

type S3BucketNotificationMapOutput struct{ *pulumi.OutputState }

func (S3BucketNotificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3BucketNotification)(nil)).Elem()
}

func (o S3BucketNotificationMapOutput) ToS3BucketNotificationMapOutput() S3BucketNotificationMapOutput {
	return o
}

func (o S3BucketNotificationMapOutput) ToS3BucketNotificationMapOutputWithContext(ctx context.Context) S3BucketNotificationMapOutput {
	return o
}

func (o S3BucketNotificationMapOutput) MapIndex(k pulumi.StringInput) S3BucketNotificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *S3BucketNotification {
		return vs[0].(map[string]*S3BucketNotification)[vs[1].(string)]
	}).(S3BucketNotificationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*S3BucketNotificationInput)(nil)).Elem(), &S3BucketNotification{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3BucketNotificationArrayInput)(nil)).Elem(), S3BucketNotificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3BucketNotificationMapInput)(nil)).Elem(), S3BucketNotificationMap{})
	pulumi.RegisterOutputType(S3BucketNotificationOutput{})
	pulumi.RegisterOutputType(S3BucketNotificationArrayOutput{})
	pulumi.RegisterOutputType(S3BucketNotificationMapOutput{})
}
