// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package minio

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-minio/sdk/go/minio/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IamGroupUserAttachment struct {
	pulumi.CustomResourceState

	GroupName pulumi.StringOutput `pulumi:"groupName"`
	UserName  pulumi.StringOutput `pulumi:"userName"`
}

// NewIamGroupUserAttachment registers a new resource with the given unique name, arguments, and options.
func NewIamGroupUserAttachment(ctx *pulumi.Context,
	name string, args *IamGroupUserAttachmentArgs, opts ...pulumi.ResourceOption) (*IamGroupUserAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IamGroupUserAttachment
	err := ctx.RegisterResource("minio:index/iamGroupUserAttachment:IamGroupUserAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamGroupUserAttachment gets an existing IamGroupUserAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamGroupUserAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamGroupUserAttachmentState, opts ...pulumi.ResourceOption) (*IamGroupUserAttachment, error) {
	var resource IamGroupUserAttachment
	err := ctx.ReadResource("minio:index/iamGroupUserAttachment:IamGroupUserAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamGroupUserAttachment resources.
type iamGroupUserAttachmentState struct {
	GroupName *string `pulumi:"groupName"`
	UserName  *string `pulumi:"userName"`
}

type IamGroupUserAttachmentState struct {
	GroupName pulumi.StringPtrInput
	UserName  pulumi.StringPtrInput
}

func (IamGroupUserAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamGroupUserAttachmentState)(nil)).Elem()
}

type iamGroupUserAttachmentArgs struct {
	GroupName string `pulumi:"groupName"`
	UserName  string `pulumi:"userName"`
}

// The set of arguments for constructing a IamGroupUserAttachment resource.
type IamGroupUserAttachmentArgs struct {
	GroupName pulumi.StringInput
	UserName  pulumi.StringInput
}

func (IamGroupUserAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamGroupUserAttachmentArgs)(nil)).Elem()
}

type IamGroupUserAttachmentInput interface {
	pulumi.Input

	ToIamGroupUserAttachmentOutput() IamGroupUserAttachmentOutput
	ToIamGroupUserAttachmentOutputWithContext(ctx context.Context) IamGroupUserAttachmentOutput
}

func (*IamGroupUserAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**IamGroupUserAttachment)(nil)).Elem()
}

func (i *IamGroupUserAttachment) ToIamGroupUserAttachmentOutput() IamGroupUserAttachmentOutput {
	return i.ToIamGroupUserAttachmentOutputWithContext(context.Background())
}

func (i *IamGroupUserAttachment) ToIamGroupUserAttachmentOutputWithContext(ctx context.Context) IamGroupUserAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamGroupUserAttachmentOutput)
}

// IamGroupUserAttachmentArrayInput is an input type that accepts IamGroupUserAttachmentArray and IamGroupUserAttachmentArrayOutput values.
// You can construct a concrete instance of `IamGroupUserAttachmentArrayInput` via:
//
//	IamGroupUserAttachmentArray{ IamGroupUserAttachmentArgs{...} }
type IamGroupUserAttachmentArrayInput interface {
	pulumi.Input

	ToIamGroupUserAttachmentArrayOutput() IamGroupUserAttachmentArrayOutput
	ToIamGroupUserAttachmentArrayOutputWithContext(context.Context) IamGroupUserAttachmentArrayOutput
}

type IamGroupUserAttachmentArray []IamGroupUserAttachmentInput

func (IamGroupUserAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamGroupUserAttachment)(nil)).Elem()
}

func (i IamGroupUserAttachmentArray) ToIamGroupUserAttachmentArrayOutput() IamGroupUserAttachmentArrayOutput {
	return i.ToIamGroupUserAttachmentArrayOutputWithContext(context.Background())
}

func (i IamGroupUserAttachmentArray) ToIamGroupUserAttachmentArrayOutputWithContext(ctx context.Context) IamGroupUserAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamGroupUserAttachmentArrayOutput)
}

// IamGroupUserAttachmentMapInput is an input type that accepts IamGroupUserAttachmentMap and IamGroupUserAttachmentMapOutput values.
// You can construct a concrete instance of `IamGroupUserAttachmentMapInput` via:
//
//	IamGroupUserAttachmentMap{ "key": IamGroupUserAttachmentArgs{...} }
type IamGroupUserAttachmentMapInput interface {
	pulumi.Input

	ToIamGroupUserAttachmentMapOutput() IamGroupUserAttachmentMapOutput
	ToIamGroupUserAttachmentMapOutputWithContext(context.Context) IamGroupUserAttachmentMapOutput
}

type IamGroupUserAttachmentMap map[string]IamGroupUserAttachmentInput

func (IamGroupUserAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamGroupUserAttachment)(nil)).Elem()
}

func (i IamGroupUserAttachmentMap) ToIamGroupUserAttachmentMapOutput() IamGroupUserAttachmentMapOutput {
	return i.ToIamGroupUserAttachmentMapOutputWithContext(context.Background())
}

func (i IamGroupUserAttachmentMap) ToIamGroupUserAttachmentMapOutputWithContext(ctx context.Context) IamGroupUserAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamGroupUserAttachmentMapOutput)
}

type IamGroupUserAttachmentOutput struct{ *pulumi.OutputState }

func (IamGroupUserAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamGroupUserAttachment)(nil)).Elem()
}

func (o IamGroupUserAttachmentOutput) ToIamGroupUserAttachmentOutput() IamGroupUserAttachmentOutput {
	return o
}

func (o IamGroupUserAttachmentOutput) ToIamGroupUserAttachmentOutputWithContext(ctx context.Context) IamGroupUserAttachmentOutput {
	return o
}

func (o IamGroupUserAttachmentOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *IamGroupUserAttachment) pulumi.StringOutput { return v.GroupName }).(pulumi.StringOutput)
}

func (o IamGroupUserAttachmentOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *IamGroupUserAttachment) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

type IamGroupUserAttachmentArrayOutput struct{ *pulumi.OutputState }

func (IamGroupUserAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamGroupUserAttachment)(nil)).Elem()
}

func (o IamGroupUserAttachmentArrayOutput) ToIamGroupUserAttachmentArrayOutput() IamGroupUserAttachmentArrayOutput {
	return o
}

func (o IamGroupUserAttachmentArrayOutput) ToIamGroupUserAttachmentArrayOutputWithContext(ctx context.Context) IamGroupUserAttachmentArrayOutput {
	return o
}

func (o IamGroupUserAttachmentArrayOutput) Index(i pulumi.IntInput) IamGroupUserAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IamGroupUserAttachment {
		return vs[0].([]*IamGroupUserAttachment)[vs[1].(int)]
	}).(IamGroupUserAttachmentOutput)
}

type IamGroupUserAttachmentMapOutput struct{ *pulumi.OutputState }

func (IamGroupUserAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamGroupUserAttachment)(nil)).Elem()
}

func (o IamGroupUserAttachmentMapOutput) ToIamGroupUserAttachmentMapOutput() IamGroupUserAttachmentMapOutput {
	return o
}

func (o IamGroupUserAttachmentMapOutput) ToIamGroupUserAttachmentMapOutputWithContext(ctx context.Context) IamGroupUserAttachmentMapOutput {
	return o
}

func (o IamGroupUserAttachmentMapOutput) MapIndex(k pulumi.StringInput) IamGroupUserAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IamGroupUserAttachment {
		return vs[0].(map[string]*IamGroupUserAttachment)[vs[1].(string)]
	}).(IamGroupUserAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamGroupUserAttachmentInput)(nil)).Elem(), &IamGroupUserAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamGroupUserAttachmentArrayInput)(nil)).Elem(), IamGroupUserAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamGroupUserAttachmentMapInput)(nil)).Elem(), IamGroupUserAttachmentMap{})
	pulumi.RegisterOutputType(IamGroupUserAttachmentOutput{})
	pulumi.RegisterOutputType(IamGroupUserAttachmentArrayOutput{})
	pulumi.RegisterOutputType(IamGroupUserAttachmentMapOutput{})
}
