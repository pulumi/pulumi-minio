// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package minio

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-minio/sdk/go/minio"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		developer, err := minio.NewIamGroup(ctx, "developer", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = minio.NewIamGroupPolicy(ctx, "testPolicy", &minio.IamGroupPolicyArgs{
// 			Group:  developer.ID(),
// 			Policy: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"Version\":\"2012-10-17\",\n", "  \"Statement\": [\n", "    {\n", "      \"Sid\":\"ListAllBucket\",\n", "      \"Effect\": \"Allow\",\n", "      \"Action\": [\"s3:PutObject\"],\n", "      \"Principal\":\"*\",\n", "      \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n", "    }\n", "  ]\n", "}\n", "\n")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("minioName", minio_iam_group_membership.Developer.Id)
// 		ctx.Export("minioPolicy", minio_iam_group_membership.Developer.Policy)
// 		ctx.Export("minioGroup", minio_iam_group_membership.Developer.Group)
// 		return nil
// 	})
// }
// ```
type IamGroupPolicy struct {
	pulumi.CustomResourceState

	Group      pulumi.StringOutput    `pulumi:"group"`
	Name       pulumi.StringOutput    `pulumi:"name"`
	NamePrefix pulumi.StringPtrOutput `pulumi:"namePrefix"`
	Policy     pulumi.StringOutput    `pulumi:"policy"`
}

// NewIamGroupPolicy registers a new resource with the given unique name, arguments, and options.
func NewIamGroupPolicy(ctx *pulumi.Context,
	name string, args *IamGroupPolicyArgs, opts ...pulumi.ResourceOption) (*IamGroupPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Group == nil {
		return nil, errors.New("invalid value for required argument 'Group'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	var resource IamGroupPolicy
	err := ctx.RegisterResource("minio:index/iamGroupPolicy:IamGroupPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamGroupPolicy gets an existing IamGroupPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamGroupPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamGroupPolicyState, opts ...pulumi.ResourceOption) (*IamGroupPolicy, error) {
	var resource IamGroupPolicy
	err := ctx.ReadResource("minio:index/iamGroupPolicy:IamGroupPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamGroupPolicy resources.
type iamGroupPolicyState struct {
	Group      *string `pulumi:"group"`
	Name       *string `pulumi:"name"`
	NamePrefix *string `pulumi:"namePrefix"`
	Policy     *string `pulumi:"policy"`
}

type IamGroupPolicyState struct {
	Group      pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	NamePrefix pulumi.StringPtrInput
	Policy     pulumi.StringPtrInput
}

func (IamGroupPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamGroupPolicyState)(nil)).Elem()
}

type iamGroupPolicyArgs struct {
	Group      string  `pulumi:"group"`
	Name       *string `pulumi:"name"`
	NamePrefix *string `pulumi:"namePrefix"`
	Policy     string  `pulumi:"policy"`
}

// The set of arguments for constructing a IamGroupPolicy resource.
type IamGroupPolicyArgs struct {
	Group      pulumi.StringInput
	Name       pulumi.StringPtrInput
	NamePrefix pulumi.StringPtrInput
	Policy     pulumi.StringInput
}

func (IamGroupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamGroupPolicyArgs)(nil)).Elem()
}

type IamGroupPolicyInput interface {
	pulumi.Input

	ToIamGroupPolicyOutput() IamGroupPolicyOutput
	ToIamGroupPolicyOutputWithContext(ctx context.Context) IamGroupPolicyOutput
}

func (*IamGroupPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*IamGroupPolicy)(nil))
}

func (i *IamGroupPolicy) ToIamGroupPolicyOutput() IamGroupPolicyOutput {
	return i.ToIamGroupPolicyOutputWithContext(context.Background())
}

func (i *IamGroupPolicy) ToIamGroupPolicyOutputWithContext(ctx context.Context) IamGroupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamGroupPolicyOutput)
}

func (i *IamGroupPolicy) ToIamGroupPolicyPtrOutput() IamGroupPolicyPtrOutput {
	return i.ToIamGroupPolicyPtrOutputWithContext(context.Background())
}

func (i *IamGroupPolicy) ToIamGroupPolicyPtrOutputWithContext(ctx context.Context) IamGroupPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamGroupPolicyPtrOutput)
}

type IamGroupPolicyPtrInput interface {
	pulumi.Input

	ToIamGroupPolicyPtrOutput() IamGroupPolicyPtrOutput
	ToIamGroupPolicyPtrOutputWithContext(ctx context.Context) IamGroupPolicyPtrOutput
}

type iamGroupPolicyPtrType IamGroupPolicyArgs

func (*iamGroupPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IamGroupPolicy)(nil))
}

func (i *iamGroupPolicyPtrType) ToIamGroupPolicyPtrOutput() IamGroupPolicyPtrOutput {
	return i.ToIamGroupPolicyPtrOutputWithContext(context.Background())
}

func (i *iamGroupPolicyPtrType) ToIamGroupPolicyPtrOutputWithContext(ctx context.Context) IamGroupPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamGroupPolicyPtrOutput)
}

// IamGroupPolicyArrayInput is an input type that accepts IamGroupPolicyArray and IamGroupPolicyArrayOutput values.
// You can construct a concrete instance of `IamGroupPolicyArrayInput` via:
//
//          IamGroupPolicyArray{ IamGroupPolicyArgs{...} }
type IamGroupPolicyArrayInput interface {
	pulumi.Input

	ToIamGroupPolicyArrayOutput() IamGroupPolicyArrayOutput
	ToIamGroupPolicyArrayOutputWithContext(context.Context) IamGroupPolicyArrayOutput
}

type IamGroupPolicyArray []IamGroupPolicyInput

func (IamGroupPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*IamGroupPolicy)(nil))
}

func (i IamGroupPolicyArray) ToIamGroupPolicyArrayOutput() IamGroupPolicyArrayOutput {
	return i.ToIamGroupPolicyArrayOutputWithContext(context.Background())
}

func (i IamGroupPolicyArray) ToIamGroupPolicyArrayOutputWithContext(ctx context.Context) IamGroupPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamGroupPolicyArrayOutput)
}

// IamGroupPolicyMapInput is an input type that accepts IamGroupPolicyMap and IamGroupPolicyMapOutput values.
// You can construct a concrete instance of `IamGroupPolicyMapInput` via:
//
//          IamGroupPolicyMap{ "key": IamGroupPolicyArgs{...} }
type IamGroupPolicyMapInput interface {
	pulumi.Input

	ToIamGroupPolicyMapOutput() IamGroupPolicyMapOutput
	ToIamGroupPolicyMapOutputWithContext(context.Context) IamGroupPolicyMapOutput
}

type IamGroupPolicyMap map[string]IamGroupPolicyInput

func (IamGroupPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*IamGroupPolicy)(nil))
}

func (i IamGroupPolicyMap) ToIamGroupPolicyMapOutput() IamGroupPolicyMapOutput {
	return i.ToIamGroupPolicyMapOutputWithContext(context.Background())
}

func (i IamGroupPolicyMap) ToIamGroupPolicyMapOutputWithContext(ctx context.Context) IamGroupPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamGroupPolicyMapOutput)
}

type IamGroupPolicyOutput struct {
	*pulumi.OutputState
}

func (IamGroupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IamGroupPolicy)(nil))
}

func (o IamGroupPolicyOutput) ToIamGroupPolicyOutput() IamGroupPolicyOutput {
	return o
}

func (o IamGroupPolicyOutput) ToIamGroupPolicyOutputWithContext(ctx context.Context) IamGroupPolicyOutput {
	return o
}

func (o IamGroupPolicyOutput) ToIamGroupPolicyPtrOutput() IamGroupPolicyPtrOutput {
	return o.ToIamGroupPolicyPtrOutputWithContext(context.Background())
}

func (o IamGroupPolicyOutput) ToIamGroupPolicyPtrOutputWithContext(ctx context.Context) IamGroupPolicyPtrOutput {
	return o.ApplyT(func(v IamGroupPolicy) *IamGroupPolicy {
		return &v
	}).(IamGroupPolicyPtrOutput)
}

type IamGroupPolicyPtrOutput struct {
	*pulumi.OutputState
}

func (IamGroupPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamGroupPolicy)(nil))
}

func (o IamGroupPolicyPtrOutput) ToIamGroupPolicyPtrOutput() IamGroupPolicyPtrOutput {
	return o
}

func (o IamGroupPolicyPtrOutput) ToIamGroupPolicyPtrOutputWithContext(ctx context.Context) IamGroupPolicyPtrOutput {
	return o
}

type IamGroupPolicyArrayOutput struct{ *pulumi.OutputState }

func (IamGroupPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IamGroupPolicy)(nil))
}

func (o IamGroupPolicyArrayOutput) ToIamGroupPolicyArrayOutput() IamGroupPolicyArrayOutput {
	return o
}

func (o IamGroupPolicyArrayOutput) ToIamGroupPolicyArrayOutputWithContext(ctx context.Context) IamGroupPolicyArrayOutput {
	return o
}

func (o IamGroupPolicyArrayOutput) Index(i pulumi.IntInput) IamGroupPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IamGroupPolicy {
		return vs[0].([]IamGroupPolicy)[vs[1].(int)]
	}).(IamGroupPolicyOutput)
}

type IamGroupPolicyMapOutput struct{ *pulumi.OutputState }

func (IamGroupPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IamGroupPolicy)(nil))
}

func (o IamGroupPolicyMapOutput) ToIamGroupPolicyMapOutput() IamGroupPolicyMapOutput {
	return o
}

func (o IamGroupPolicyMapOutput) ToIamGroupPolicyMapOutputWithContext(ctx context.Context) IamGroupPolicyMapOutput {
	return o
}

func (o IamGroupPolicyMapOutput) MapIndex(k pulumi.StringInput) IamGroupPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IamGroupPolicy {
		return vs[0].(map[string]IamGroupPolicy)[vs[1].(string)]
	}).(IamGroupPolicyOutput)
}

func init() {
	pulumi.RegisterOutputType(IamGroupPolicyOutput{})
	pulumi.RegisterOutputType(IamGroupPolicyPtrOutput{})
	pulumi.RegisterOutputType(IamGroupPolicyArrayOutput{})
	pulumi.RegisterOutputType(IamGroupPolicyMapOutput{})
}
