// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Minio
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Minio = Pulumi.Minio;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var stateTerraformS3 = new Minio.S3Bucket("state_terraform_s3", new()
    ///     {
    ///         Bucket = "state-terraform-s3",
    ///         Acl = "public",
    ///     });
    /// 
    ///     var txtFile = new Minio.S3Object("txt_file", new()
    ///     {
    ///         BucketName = stateTerraformS3.Bucket,
    ///         ObjectName = "text.txt",
    ///         Content = "Lorem ipsum dolor sit amet.",
    ///         ContentType = "text/plain",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             stateTerraformS3,
    ///         },
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["minioId"] = txtFile.Id,
    ///     };
    /// });
    /// ```
    /// </summary>
    [MinioResourceType("minio:index/s3Object:S3Object")]
    public partial class S3Object : global::Pulumi.CustomResource
    {
        [Output("bucketName")]
        public Output<string> BucketName { get; private set; } = null!;

        [Output("content")]
        public Output<string?> Content { get; private set; } = null!;

        [Output("contentBase64")]
        public Output<string?> ContentBase64 { get; private set; } = null!;

        [Output("contentType")]
        public Output<string> ContentType { get; private set; } = null!;

        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        [Output("objectName")]
        public Output<string> ObjectName { get; private set; } = null!;

        [Output("source")]
        public Output<string?> Source { get; private set; } = null!;

        [Output("versionId")]
        public Output<string> VersionId { get; private set; } = null!;


        /// <summary>
        /// Create a S3Object resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public S3Object(string name, S3ObjectArgs args, CustomResourceOptions? options = null)
            : base("minio:index/s3Object:S3Object", name, args ?? new S3ObjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private S3Object(string name, Input<string> id, S3ObjectState? state = null, CustomResourceOptions? options = null)
            : base("minio:index/s3Object:S3Object", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing S3Object resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static S3Object Get(string name, Input<string> id, S3ObjectState? state = null, CustomResourceOptions? options = null)
        {
            return new S3Object(name, id, state, options);
        }
    }

    public sealed class S3ObjectArgs : global::Pulumi.ResourceArgs
    {
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        [Input("content")]
        public Input<string>? Content { get; set; }

        [Input("contentBase64")]
        public Input<string>? ContentBase64 { get; set; }

        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("etag")]
        public Input<string>? Etag { get; set; }

        [Input("objectName", required: true)]
        public Input<string> ObjectName { get; set; } = null!;

        [Input("source")]
        public Input<string>? Source { get; set; }

        [Input("versionId")]
        public Input<string>? VersionId { get; set; }

        public S3ObjectArgs()
        {
        }
        public static new S3ObjectArgs Empty => new S3ObjectArgs();
    }

    public sealed class S3ObjectState : global::Pulumi.ResourceArgs
    {
        [Input("bucketName")]
        public Input<string>? BucketName { get; set; }

        [Input("content")]
        public Input<string>? Content { get; set; }

        [Input("contentBase64")]
        public Input<string>? ContentBase64 { get; set; }

        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("etag")]
        public Input<string>? Etag { get; set; }

        [Input("objectName")]
        public Input<string>? ObjectName { get; set; }

        [Input("source")]
        public Input<string>? Source { get; set; }

        [Input("versionId")]
        public Input<string>? VersionId { get; set; }

        public S3ObjectState()
        {
        }
        public static new S3ObjectState Empty => new S3ObjectState();
    }
}
