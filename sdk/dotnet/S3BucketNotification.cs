// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Minio
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Minio = Pulumi.Minio;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var bucketS3Bucket = new Minio.S3Bucket("bucketS3Bucket", new()
    ///     {
    ///         Bucket = "example-bucket",
    ///     });
    /// 
    ///     var bucketS3BucketNotification = new Minio.S3BucketNotification("bucketS3BucketNotification", new()
    ///     {
    ///         Bucket = minio_s3_bucket.State_terraform_s3.Bucket,
    ///         Queues = new[]
    ///         {
    ///             new Minio.Inputs.S3BucketNotificationQueueArgs
    ///             {
    ///                 Id = "notification-queue",
    ///                 QueueArn = "arn:minio:sqs::primary:webhook",
    ///                 Events = new[]
    ///                 {
    ///                     "s3:ObjectCreated:*",
    ///                     "s3:ObjectRemoved:Delete",
    ///                 },
    ///                 FilterPrefix = "example/",
    ///                 FilterSuffix = ".png",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [MinioResourceType("minio:index/s3BucketNotification:S3BucketNotification")]
    public partial class S3BucketNotification : global::Pulumi.CustomResource
    {
        [Output("bucket")]
        public Output<string> Bucket { get; private set; } = null!;

        [Output("queues")]
        public Output<ImmutableArray<Outputs.S3BucketNotificationQueue>> Queues { get; private set; } = null!;


        /// <summary>
        /// Create a S3BucketNotification resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public S3BucketNotification(string name, S3BucketNotificationArgs args, CustomResourceOptions? options = null)
            : base("minio:index/s3BucketNotification:S3BucketNotification", name, args ?? new S3BucketNotificationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private S3BucketNotification(string name, Input<string> id, S3BucketNotificationState? state = null, CustomResourceOptions? options = null)
            : base("minio:index/s3BucketNotification:S3BucketNotification", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing S3BucketNotification resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static S3BucketNotification Get(string name, Input<string> id, S3BucketNotificationState? state = null, CustomResourceOptions? options = null)
        {
            return new S3BucketNotification(name, id, state, options);
        }
    }

    public sealed class S3BucketNotificationArgs : global::Pulumi.ResourceArgs
    {
        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        [Input("queues")]
        private InputList<Inputs.S3BucketNotificationQueueArgs>? _queues;
        public InputList<Inputs.S3BucketNotificationQueueArgs> Queues
        {
            get => _queues ?? (_queues = new InputList<Inputs.S3BucketNotificationQueueArgs>());
            set => _queues = value;
        }

        public S3BucketNotificationArgs()
        {
        }
        public static new S3BucketNotificationArgs Empty => new S3BucketNotificationArgs();
    }

    public sealed class S3BucketNotificationState : global::Pulumi.ResourceArgs
    {
        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        [Input("queues")]
        private InputList<Inputs.S3BucketNotificationQueueGetArgs>? _queues;
        public InputList<Inputs.S3BucketNotificationQueueGetArgs> Queues
        {
            get => _queues ?? (_queues = new InputList<Inputs.S3BucketNotificationQueueGetArgs>());
            set => _queues = value;
        }

        public S3BucketNotificationState()
        {
        }
        public static new S3BucketNotificationState Empty => new S3BucketNotificationState();
    }
}
