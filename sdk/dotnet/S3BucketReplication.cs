// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Minio
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Minio = Pulumi.Minio;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myBucketInAS3Bucket = new Minio.S3Bucket("myBucketInAS3Bucket", new()
    ///     {
    ///         Bucket = "my-bucket",
    ///     });
    /// 
    ///     var myBucketInBS3Bucket = new Minio.S3Bucket("myBucketInBS3Bucket", new()
    ///     {
    ///         Bucket = "my-bucket",
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = minio.Deployment_b,
    ///     });
    /// 
    ///     var myBucketInAS3BucketVersioning = new Minio.S3BucketVersioning("myBucketInAS3BucketVersioning", new()
    ///     {
    ///         Bucket = myBucketInAS3Bucket.Bucket,
    ///         VersioningConfiguration = new Minio.Inputs.S3BucketVersioningVersioningConfigurationArgs
    ///         {
    ///             Status = "Enabled",
    ///         },
    ///     });
    /// 
    ///     var myBucketInBS3BucketVersioning = new Minio.S3BucketVersioning("myBucketInBS3BucketVersioning", new()
    ///     {
    ///         Bucket = myBucketInBS3Bucket.Bucket,
    ///         VersioningConfiguration = new Minio.Inputs.S3BucketVersioningVersioningConfigurationArgs
    ///         {
    ///             Status = "Enabled",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = minio.Deployment_b,
    ///     });
    /// 
    ///     var replicationPolicy = Minio.GetIamPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Minio.Inputs.GetIamPolicyDocumentStatementInputArgs
    ///             {
    ///                 Sid = "ReadBuckets",
    ///                 Effect = "Allow",
    ///                 Resources = new[]
    ///                 {
    ///                     "arn:aws:s3:::*",
    ///                 },
    ///                 Actions = new[]
    ///                 {
    ///                     "s3:ListBucket",
    ///                 },
    ///             },
    ///             new Minio.Inputs.GetIamPolicyDocumentStatementInputArgs
    ///             {
    ///                 Sid = "EnableReplicationOnBucket",
    ///                 Effect = "Allow",
    ///                 Resources = new[]
    ///                 {
    ///                     "arn:aws:s3:::my-bucket",
    ///                 },
    ///                 Actions = new[]
    ///                 {
    ///                     "s3:GetReplicationConfiguration",
    ///                     "s3:ListBucket",
    ///                     "s3:ListBucketMultipartUploads",
    ///                     "s3:GetBucketLocation",
    ///                     "s3:GetBucketVersioning",
    ///                     "s3:GetBucketObjectLockConfiguration",
    ///                     "s3:GetEncryptionConfiguration",
    ///                 },
    ///             },
    ///             new Minio.Inputs.GetIamPolicyDocumentStatementInputArgs
    ///             {
    ///                 Sid = "EnableReplicatingDataIntoBucket",
    ///                 Effect = "Allow",
    ///                 Resources = new[]
    ///                 {
    ///                     "arn:aws:s3:::my-bucket/*",
    ///                 },
    ///                 Actions = new[]
    ///                 {
    ///                     "s3:GetReplicationConfiguration",
    ///                     "s3:ReplicateTags",
    ///                     "s3:AbortMultipartUpload",
    ///                     "s3:GetObject",
    ///                     "s3:GetObjectVersion",
    ///                     "s3:GetObjectVersionTagging",
    ///                     "s3:PutObject",
    ///                     "s3:PutObjectRetention",
    ///                     "s3:PutBucketObjectLockConfiguration",
    ///                     "s3:PutObjectLegalHold",
    ///                     "s3:DeleteObject",
    ///                     "s3:ReplicateObject",
    ///                     "s3:ReplicateDelete",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     // One-Way replication (A -&gt; B)
    ///     var replicationInBIamPolicy = new Minio.IamPolicy("replicationInBIamPolicy", new()
    ///     {
    ///         Policy = replicationPolicy.Apply(getIamPolicyDocumentResult =&gt; getIamPolicyDocumentResult.Json),
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = minio.Deployment_b,
    ///     });
    /// 
    ///     var replicationInBIamUser = new Minio.IamUser("replicationInBIamUser", new()
    ///     {
    ///         ForceDestroy = true,
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = minio.Deployment_b,
    ///     });
    /// 
    ///     var replicationInBIamUserPolicyAttachment = new Minio.IamUserPolicyAttachment("replicationInBIamUserPolicyAttachment", new()
    ///     {
    ///         UserName = replicationInBIamUser.Name,
    ///         PolicyName = replicationInBIamPolicy.Id,
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = minio.Deployment_b,
    ///     });
    /// 
    ///     var replicationInBIamServiceAccount = new Minio.IamServiceAccount("replicationInBIamServiceAccount", new()
    ///     {
    ///         TargetUser = replicationInBIamUser.Name,
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = minio.Deployment_b,
    ///         DependsOn = new[]
    ///         {
    ///             replicationInBIamUserPolicyAttachment,
    ///         },
    ///     });
    /// 
    ///     var replicationInBS3BucketReplication = new Minio.S3BucketReplication("replicationInBS3BucketReplication", new()
    ///     {
    ///         Bucket = myBucketInAS3Bucket.Bucket,
    ///         Rules = new[]
    ///         {
    ///             new Minio.Inputs.S3BucketReplicationRuleArgs
    ///             {
    ///                 DeleteReplication = true,
    ///                 DeleteMarkerReplication = true,
    ///                 ExistingObjectReplication = true,
    ///                 MetadataSync = true,
    ///                 Target = new Minio.Inputs.S3BucketReplicationRuleTargetArgs
    ///                 {
    ///                     Bucket = myBucketInBS3Bucket.Bucket,
    ///                     Secure = false,
    ///                     Host = @var.Minio_server_b,
    ///                     BandwidthLimt = "100M",
    ///                     AccessKey = replicationInBIamServiceAccount.AccessKey,
    ///                     SecretKey = replicationInBIamServiceAccount.SecretKey,
    ///                 },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             myBucketInAS3BucketVersioning,
    ///             myBucketInBS3BucketVersioning,
    ///         },
    ///     });
    /// 
    ///     // Two-Way replication (A &lt;-&gt; B)
    ///     var replicationInAIamPolicy = new Minio.IamPolicy("replicationInAIamPolicy", new()
    ///     {
    ///         Policy = replicationPolicy.Apply(getIamPolicyDocumentResult =&gt; getIamPolicyDocumentResult.Json),
    ///     });
    /// 
    ///     var replicationInAIamUser = new Minio.IamUser("replicationInAIamUser", new()
    ///     {
    ///         ForceDestroy = true,
    ///     });
    /// 
    ///     var replicationInAIamUserPolicyAttachment = new Minio.IamUserPolicyAttachment("replicationInAIamUserPolicyAttachment", new()
    ///     {
    ///         UserName = replicationInAIamUser.Name,
    ///         PolicyName = replicationInAIamPolicy.Id,
    ///     });
    /// 
    ///     var replicationInAIamServiceAccount = new Minio.IamServiceAccount("replicationInAIamServiceAccount", new()
    ///     {
    ///         TargetUser = replicationInAIamUser.Name,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             replicationInBIamUserPolicyAttachment,
    ///         },
    ///     });
    /// 
    ///     var replicationInAS3BucketReplication = new Minio.S3BucketReplication("replicationInAS3BucketReplication", new()
    ///     {
    ///         Bucket = myBucketInBS3Bucket.Bucket,
    ///         Rules = new[]
    ///         {
    ///             new Minio.Inputs.S3BucketReplicationRuleArgs
    ///             {
    ///                 DeleteReplication = true,
    ///                 DeleteMarkerReplication = true,
    ///                 ExistingObjectReplication = true,
    ///                 MetadataSync = true,
    ///                 Target = new Minio.Inputs.S3BucketReplicationRuleTargetArgs
    ///                 {
    ///                     Bucket = myBucketInAS3Bucket.Bucket,
    ///                     Host = @var.Minio_server_a,
    ///                     Secure = false,
    ///                     BandwidthLimt = "100M",
    ///                     AccessKey = replicationInAIamServiceAccount.AccessKey,
    ///                     SecretKey = replicationInAIamServiceAccount.SecretKey,
    ///                 },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = minio.Deployment_b,
    ///         DependsOn = new[]
    ///         {
    ///             myBucketInAS3BucketVersioning,
    ///             myBucketInBS3BucketVersioning,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [MinioResourceType("minio:index/s3BucketReplication:S3BucketReplication")]
    public partial class S3BucketReplication : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the existing target bucket to replicate into
        /// </summary>
        [Output("bucket")]
        public Output<string> Bucket { get; private set; } = null!;

        /// <summary>
        /// Rule definitions
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.S3BucketReplicationRule>> Rules { get; private set; } = null!;


        /// <summary>
        /// Create a S3BucketReplication resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public S3BucketReplication(string name, S3BucketReplicationArgs args, CustomResourceOptions? options = null)
            : base("minio:index/s3BucketReplication:S3BucketReplication", name, args ?? new S3BucketReplicationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private S3BucketReplication(string name, Input<string> id, S3BucketReplicationState? state = null, CustomResourceOptions? options = null)
            : base("minio:index/s3BucketReplication:S3BucketReplication", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing S3BucketReplication resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static S3BucketReplication Get(string name, Input<string> id, S3BucketReplicationState? state = null, CustomResourceOptions? options = null)
        {
            return new S3BucketReplication(name, id, state, options);
        }
    }

    public sealed class S3BucketReplicationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the existing target bucket to replicate into
        /// </summary>
        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        [Input("rules")]
        private InputList<Inputs.S3BucketReplicationRuleArgs>? _rules;

        /// <summary>
        /// Rule definitions
        /// </summary>
        public InputList<Inputs.S3BucketReplicationRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.S3BucketReplicationRuleArgs>());
            set => _rules = value;
        }

        public S3BucketReplicationArgs()
        {
        }
        public static new S3BucketReplicationArgs Empty => new S3BucketReplicationArgs();
    }

    public sealed class S3BucketReplicationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the existing target bucket to replicate into
        /// </summary>
        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        [Input("rules")]
        private InputList<Inputs.S3BucketReplicationRuleGetArgs>? _rules;

        /// <summary>
        /// Rule definitions
        /// </summary>
        public InputList<Inputs.S3BucketReplicationRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.S3BucketReplicationRuleGetArgs>());
            set => _rules = value;
        }

        public S3BucketReplicationState()
        {
        }
        public static new S3BucketReplicationState Empty => new S3BucketReplicationState();
    }
}
