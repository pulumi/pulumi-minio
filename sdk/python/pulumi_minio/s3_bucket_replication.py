# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['S3BucketReplicationArgs', 'S3BucketReplication']

@pulumi.input_type
class S3BucketReplicationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['S3BucketReplicationRuleArgs']]]] = None):
        """
        The set of arguments for constructing a S3BucketReplication resource.
        :param pulumi.Input[str] bucket: The name of the existing target bucket to replicate into
        :param pulumi.Input[Sequence[pulumi.Input['S3BucketReplicationRuleArgs']]] rules: Rule definitions
        """
        pulumi.set(__self__, "bucket", bucket)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        The name of the existing target bucket to replicate into
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['S3BucketReplicationRuleArgs']]]]:
        """
        Rule definitions
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['S3BucketReplicationRuleArgs']]]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class _S3BucketReplicationState:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['S3BucketReplicationRuleArgs']]]] = None):
        """
        Input properties used for looking up and filtering S3BucketReplication resources.
        :param pulumi.Input[str] bucket: The name of the existing target bucket to replicate into
        :param pulumi.Input[Sequence[pulumi.Input['S3BucketReplicationRuleArgs']]] rules: Rule definitions
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the existing target bucket to replicate into
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['S3BucketReplicationRuleArgs']]]]:
        """
        Rule definitions
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['S3BucketReplicationRuleArgs']]]]):
        pulumi.set(self, "rules", value)


class S3BucketReplication(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['S3BucketReplicationRuleArgs']]]]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_minio as minio

        my_bucket_in_as3_bucket = minio.S3Bucket("myBucketInAS3Bucket", bucket="my-bucket")
        my_bucket_in_bs3_bucket = minio.S3Bucket("myBucketInBS3Bucket", bucket="my-bucket",
        opts=pulumi.ResourceOptions(provider=minio["deployment_b"]))
        my_bucket_in_as3_bucket_versioning = minio.S3BucketVersioning("myBucketInAS3BucketVersioning",
            bucket=my_bucket_in_as3_bucket.bucket,
            versioning_configuration=minio.S3BucketVersioningVersioningConfigurationArgs(
                status="Enabled",
            ))
        my_bucket_in_bs3_bucket_versioning = minio.S3BucketVersioning("myBucketInBS3BucketVersioning",
            bucket=my_bucket_in_bs3_bucket.bucket,
            versioning_configuration=minio.S3BucketVersioningVersioningConfigurationArgs(
                status="Enabled",
            ),
            opts=pulumi.ResourceOptions(provider=minio["deployment_b"]))
        replication_policy = minio.get_iam_policy_document(statements=[
            minio.GetIamPolicyDocumentStatementArgs(
                sid="ReadBuckets",
                effect="Allow",
                resources=["arn:aws:s3:::*"],
                actions=["s3:ListBucket"],
            ),
            minio.GetIamPolicyDocumentStatementArgs(
                sid="EnableReplicationOnBucket",
                effect="Allow",
                resources=["arn:aws:s3:::my-bucket"],
                actions=[
                    "s3:GetReplicationConfiguration",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:GetBucketLocation",
                    "s3:GetBucketVersioning",
                    "s3:GetBucketObjectLockConfiguration",
                    "s3:GetEncryptionConfiguration",
                ],
            ),
            minio.GetIamPolicyDocumentStatementArgs(
                sid="EnableReplicatingDataIntoBucket",
                effect="Allow",
                resources=["arn:aws:s3:::my-bucket/*"],
                actions=[
                    "s3:GetReplicationConfiguration",
                    "s3:ReplicateTags",
                    "s3:AbortMultipartUpload",
                    "s3:GetObject",
                    "s3:GetObjectVersion",
                    "s3:GetObjectVersionTagging",
                    "s3:PutObject",
                    "s3:PutObjectRetention",
                    "s3:PutBucketObjectLockConfiguration",
                    "s3:PutObjectLegalHold",
                    "s3:DeleteObject",
                    "s3:ReplicateObject",
                    "s3:ReplicateDelete",
                ],
            ),
        ])
        # One-Way replication (A -> B)
        replication_in_b_iam_policy = minio.IamPolicy("replicationInBIamPolicy", policy=replication_policy.json,
        opts=pulumi.ResourceOptions(provider=minio["deployment_b"]))
        replication_in_b_iam_user = minio.IamUser("replicationInBIamUser", force_destroy=True,
        opts=pulumi.ResourceOptions(provider=minio["deployment_b"]))
        replication_in_b_iam_user_policy_attachment = minio.IamUserPolicyAttachment("replicationInBIamUserPolicyAttachment",
            user_name=replication_in_b_iam_user.name,
            policy_name=replication_in_b_iam_policy.id,
            opts=pulumi.ResourceOptions(provider=minio["deployment_b"]))
        replication_in_b_iam_service_account = minio.IamServiceAccount("replicationInBIamServiceAccount", target_user=replication_in_b_iam_user.name,
        opts=pulumi.ResourceOptions(provider=minio["deployment_b"],
            depends_on=[replication_in_b_iam_user_policy_attachment]))
        replication_in_bs3_bucket_replication = minio.S3BucketReplication("replicationInBS3BucketReplication",
            bucket=my_bucket_in_as3_bucket.bucket,
            rules=[minio.S3BucketReplicationRuleArgs(
                delete_replication=True,
                delete_marker_replication=True,
                existing_object_replication=True,
                metadata_sync=True,
                target=minio.S3BucketReplicationRuleTargetArgs(
                    bucket=my_bucket_in_bs3_bucket.bucket,
                    secure=False,
                    host=var["minio_server_b"],
                    bandwidth_limt="100M",
                    access_key=replication_in_b_iam_service_account.access_key,
                    secret_key=replication_in_b_iam_service_account.secret_key,
                ),
            )],
            opts=pulumi.ResourceOptions(depends_on=[
                    my_bucket_in_as3_bucket_versioning,
                    my_bucket_in_bs3_bucket_versioning,
                ]))
        # Two-Way replication (A <-> B)
        replication_in_a_iam_policy = minio.IamPolicy("replicationInAIamPolicy", policy=replication_policy.json)
        replication_in_a_iam_user = minio.IamUser("replicationInAIamUser", force_destroy=True)
        replication_in_a_iam_user_policy_attachment = minio.IamUserPolicyAttachment("replicationInAIamUserPolicyAttachment",
            user_name=replication_in_a_iam_user.name,
            policy_name=replication_in_a_iam_policy.id)
        replication_in_a_iam_service_account = minio.IamServiceAccount("replicationInAIamServiceAccount", target_user=replication_in_a_iam_user.name,
        opts=pulumi.ResourceOptions(depends_on=[replication_in_b_iam_user_policy_attachment]))
        replication_in_as3_bucket_replication = minio.S3BucketReplication("replicationInAS3BucketReplication",
            bucket=my_bucket_in_bs3_bucket.bucket,
            rules=[minio.S3BucketReplicationRuleArgs(
                delete_replication=True,
                delete_marker_replication=True,
                existing_object_replication=True,
                metadata_sync=True,
                target=minio.S3BucketReplicationRuleTargetArgs(
                    bucket=my_bucket_in_as3_bucket.bucket,
                    host=var["minio_server_a"],
                    secure=False,
                    bandwidth_limt="100M",
                    access_key=replication_in_a_iam_service_account.access_key,
                    secret_key=replication_in_a_iam_service_account.secret_key,
                ),
            )],
            opts=pulumi.ResourceOptions(provider=minio["deployment_b"],
                depends_on=[
                    my_bucket_in_as3_bucket_versioning,
                    my_bucket_in_bs3_bucket_versioning,
                ]))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: The name of the existing target bucket to replicate into
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['S3BucketReplicationRuleArgs']]]] rules: Rule definitions
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: S3BucketReplicationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_minio as minio

        my_bucket_in_as3_bucket = minio.S3Bucket("myBucketInAS3Bucket", bucket="my-bucket")
        my_bucket_in_bs3_bucket = minio.S3Bucket("myBucketInBS3Bucket", bucket="my-bucket",
        opts=pulumi.ResourceOptions(provider=minio["deployment_b"]))
        my_bucket_in_as3_bucket_versioning = minio.S3BucketVersioning("myBucketInAS3BucketVersioning",
            bucket=my_bucket_in_as3_bucket.bucket,
            versioning_configuration=minio.S3BucketVersioningVersioningConfigurationArgs(
                status="Enabled",
            ))
        my_bucket_in_bs3_bucket_versioning = minio.S3BucketVersioning("myBucketInBS3BucketVersioning",
            bucket=my_bucket_in_bs3_bucket.bucket,
            versioning_configuration=minio.S3BucketVersioningVersioningConfigurationArgs(
                status="Enabled",
            ),
            opts=pulumi.ResourceOptions(provider=minio["deployment_b"]))
        replication_policy = minio.get_iam_policy_document(statements=[
            minio.GetIamPolicyDocumentStatementArgs(
                sid="ReadBuckets",
                effect="Allow",
                resources=["arn:aws:s3:::*"],
                actions=["s3:ListBucket"],
            ),
            minio.GetIamPolicyDocumentStatementArgs(
                sid="EnableReplicationOnBucket",
                effect="Allow",
                resources=["arn:aws:s3:::my-bucket"],
                actions=[
                    "s3:GetReplicationConfiguration",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:GetBucketLocation",
                    "s3:GetBucketVersioning",
                    "s3:GetBucketObjectLockConfiguration",
                    "s3:GetEncryptionConfiguration",
                ],
            ),
            minio.GetIamPolicyDocumentStatementArgs(
                sid="EnableReplicatingDataIntoBucket",
                effect="Allow",
                resources=["arn:aws:s3:::my-bucket/*"],
                actions=[
                    "s3:GetReplicationConfiguration",
                    "s3:ReplicateTags",
                    "s3:AbortMultipartUpload",
                    "s3:GetObject",
                    "s3:GetObjectVersion",
                    "s3:GetObjectVersionTagging",
                    "s3:PutObject",
                    "s3:PutObjectRetention",
                    "s3:PutBucketObjectLockConfiguration",
                    "s3:PutObjectLegalHold",
                    "s3:DeleteObject",
                    "s3:ReplicateObject",
                    "s3:ReplicateDelete",
                ],
            ),
        ])
        # One-Way replication (A -> B)
        replication_in_b_iam_policy = minio.IamPolicy("replicationInBIamPolicy", policy=replication_policy.json,
        opts=pulumi.ResourceOptions(provider=minio["deployment_b"]))
        replication_in_b_iam_user = minio.IamUser("replicationInBIamUser", force_destroy=True,
        opts=pulumi.ResourceOptions(provider=minio["deployment_b"]))
        replication_in_b_iam_user_policy_attachment = minio.IamUserPolicyAttachment("replicationInBIamUserPolicyAttachment",
            user_name=replication_in_b_iam_user.name,
            policy_name=replication_in_b_iam_policy.id,
            opts=pulumi.ResourceOptions(provider=minio["deployment_b"]))
        replication_in_b_iam_service_account = minio.IamServiceAccount("replicationInBIamServiceAccount", target_user=replication_in_b_iam_user.name,
        opts=pulumi.ResourceOptions(provider=minio["deployment_b"],
            depends_on=[replication_in_b_iam_user_policy_attachment]))
        replication_in_bs3_bucket_replication = minio.S3BucketReplication("replicationInBS3BucketReplication",
            bucket=my_bucket_in_as3_bucket.bucket,
            rules=[minio.S3BucketReplicationRuleArgs(
                delete_replication=True,
                delete_marker_replication=True,
                existing_object_replication=True,
                metadata_sync=True,
                target=minio.S3BucketReplicationRuleTargetArgs(
                    bucket=my_bucket_in_bs3_bucket.bucket,
                    secure=False,
                    host=var["minio_server_b"],
                    bandwidth_limt="100M",
                    access_key=replication_in_b_iam_service_account.access_key,
                    secret_key=replication_in_b_iam_service_account.secret_key,
                ),
            )],
            opts=pulumi.ResourceOptions(depends_on=[
                    my_bucket_in_as3_bucket_versioning,
                    my_bucket_in_bs3_bucket_versioning,
                ]))
        # Two-Way replication (A <-> B)
        replication_in_a_iam_policy = minio.IamPolicy("replicationInAIamPolicy", policy=replication_policy.json)
        replication_in_a_iam_user = minio.IamUser("replicationInAIamUser", force_destroy=True)
        replication_in_a_iam_user_policy_attachment = minio.IamUserPolicyAttachment("replicationInAIamUserPolicyAttachment",
            user_name=replication_in_a_iam_user.name,
            policy_name=replication_in_a_iam_policy.id)
        replication_in_a_iam_service_account = minio.IamServiceAccount("replicationInAIamServiceAccount", target_user=replication_in_a_iam_user.name,
        opts=pulumi.ResourceOptions(depends_on=[replication_in_b_iam_user_policy_attachment]))
        replication_in_as3_bucket_replication = minio.S3BucketReplication("replicationInAS3BucketReplication",
            bucket=my_bucket_in_bs3_bucket.bucket,
            rules=[minio.S3BucketReplicationRuleArgs(
                delete_replication=True,
                delete_marker_replication=True,
                existing_object_replication=True,
                metadata_sync=True,
                target=minio.S3BucketReplicationRuleTargetArgs(
                    bucket=my_bucket_in_as3_bucket.bucket,
                    host=var["minio_server_a"],
                    secure=False,
                    bandwidth_limt="100M",
                    access_key=replication_in_a_iam_service_account.access_key,
                    secret_key=replication_in_a_iam_service_account.secret_key,
                ),
            )],
            opts=pulumi.ResourceOptions(provider=minio["deployment_b"],
                depends_on=[
                    my_bucket_in_as3_bucket_versioning,
                    my_bucket_in_bs3_bucket_versioning,
                ]))
        ```

        :param str resource_name: The name of the resource.
        :param S3BucketReplicationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(S3BucketReplicationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['S3BucketReplicationRuleArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = S3BucketReplicationArgs.__new__(S3BucketReplicationArgs)

            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            __props__.__dict__["rules"] = rules
        super(S3BucketReplication, __self__).__init__(
            'minio:index/s3BucketReplication:S3BucketReplication',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['S3BucketReplicationRuleArgs']]]]] = None) -> 'S3BucketReplication':
        """
        Get an existing S3BucketReplication resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: The name of the existing target bucket to replicate into
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['S3BucketReplicationRuleArgs']]]] rules: Rule definitions
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _S3BucketReplicationState.__new__(_S3BucketReplicationState)

        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["rules"] = rules
        return S3BucketReplication(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        The name of the existing target bucket to replicate into
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Optional[Sequence['outputs.S3BucketReplicationRule']]]:
        """
        Rule definitions
        """
        return pulumi.get(self, "rules")

