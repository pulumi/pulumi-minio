# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'IlmPolicyRuleArgs',
    'S3BucketNotificationQueueArgs',
    'S3BucketReplicationRuleArgs',
    'S3BucketReplicationRuleTargetArgs',
    'S3BucketVersioningVersioningConfigurationArgs',
    'GetIamPolicyDocumentStatementArgs',
    'GetIamPolicyDocumentStatementConditionArgs',
]

@pulumi.input_type
class IlmPolicyRuleArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 expiration: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[str]] = None,
                 noncurrent_version_expiration_days: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if noncurrent_version_expiration_days is not None:
            pulumi.set(__self__, "noncurrent_version_expiration_days", noncurrent_version_expiration_days)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def expiration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="noncurrentVersionExpirationDays")
    def noncurrent_version_expiration_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "noncurrent_version_expiration_days")

    @noncurrent_version_expiration_days.setter
    def noncurrent_version_expiration_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "noncurrent_version_expiration_days", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class S3BucketNotificationQueueArgs:
    def __init__(__self__, *,
                 events: pulumi.Input[Sequence[pulumi.Input[str]]],
                 queue_arn: pulumi.Input[str],
                 filter_prefix: Optional[pulumi.Input[str]] = None,
                 filter_suffix: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: The ID of this resource.
        """
        pulumi.set(__self__, "events", events)
        pulumi.set(__self__, "queue_arn", queue_arn)
        if filter_prefix is not None:
            pulumi.set(__self__, "filter_prefix", filter_prefix)
        if filter_suffix is not None:
            pulumi.set(__self__, "filter_suffix", filter_suffix)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def events(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter(name="queueArn")
    def queue_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "queue_arn")

    @queue_arn.setter
    def queue_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "queue_arn", value)

    @property
    @pulumi.getter(name="filterPrefix")
    def filter_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_prefix")

    @filter_prefix.setter
    def filter_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_prefix", value)

    @property
    @pulumi.getter(name="filterSuffix")
    def filter_suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_suffix")

    @filter_suffix.setter
    def filter_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_suffix", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class S3BucketReplicationRuleArgs:
    def __init__(__self__, *,
                 target: pulumi.Input['S3BucketReplicationRuleTargetArgs'],
                 arn: Optional[pulumi.Input[str]] = None,
                 delete_marker_replication: Optional[pulumi.Input[bool]] = None,
                 delete_replication: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 existing_object_replication: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 metadata_sync: Optional[pulumi.Input[bool]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input['S3BucketReplicationRuleTargetArgs'] target: Bucket prefix
        :param pulumi.Input[str] arn: Rule ARN genrated by MinIO
        :param pulumi.Input[bool] delete_marker_replication: Whether or not to synchronise marker deletion
        :param pulumi.Input[bool] delete_replication: Whether or not to propagate deletion
        :param pulumi.Input[bool] enabled: Whether or not this rule is enabled
        :param pulumi.Input[bool] existing_object_replication: Whether or not to synchronise object created prior the replication configuration
        :param pulumi.Input[str] id: Rule ID generated by MinIO
        :param pulumi.Input[bool] metadata_sync: Whether or not to synchonise buckets and objects metadata (such as locks). This must be enabled to achieve a two-way replication
        :param pulumi.Input[str] prefix: Bucket prefix object must be in to be syncronised
        :param pulumi.Input[int] priority: Rule priority. If omitted, the inverted index will be used as priority. This means that the first rule definition will have the higher priority
        :param pulumi.Input[Mapping[str, Any]] tags: Tags which objects must have to be syncronised
        """
        pulumi.set(__self__, "target", target)
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if delete_marker_replication is not None:
            pulumi.set(__self__, "delete_marker_replication", delete_marker_replication)
        if delete_replication is not None:
            pulumi.set(__self__, "delete_replication", delete_replication)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if existing_object_replication is not None:
            pulumi.set(__self__, "existing_object_replication", existing_object_replication)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if metadata_sync is not None:
            pulumi.set(__self__, "metadata_sync", metadata_sync)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input['S3BucketReplicationRuleTargetArgs']:
        """
        Bucket prefix
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input['S3BucketReplicationRuleTargetArgs']):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        """
        Rule ARN genrated by MinIO
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="deleteMarkerReplication")
    def delete_marker_replication(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to synchronise marker deletion
        """
        return pulumi.get(self, "delete_marker_replication")

    @delete_marker_replication.setter
    def delete_marker_replication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_marker_replication", value)

    @property
    @pulumi.getter(name="deleteReplication")
    def delete_replication(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to propagate deletion
        """
        return pulumi.get(self, "delete_replication")

    @delete_replication.setter
    def delete_replication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_replication", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not this rule is enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="existingObjectReplication")
    def existing_object_replication(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to synchronise object created prior the replication configuration
        """
        return pulumi.get(self, "existing_object_replication")

    @existing_object_replication.setter
    def existing_object_replication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "existing_object_replication", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Rule ID generated by MinIO
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="metadataSync")
    def metadata_sync(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to synchonise buckets and objects metadata (such as locks). This must be enabled to achieve a two-way replication
        """
        return pulumi.get(self, "metadata_sync")

    @metadata_sync.setter
    def metadata_sync(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "metadata_sync", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Bucket prefix object must be in to be syncronised
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Rule priority. If omitted, the inverted index will be used as priority. This means that the first rule definition will have the higher priority
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tags which objects must have to be syncronised
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class S3BucketReplicationRuleTargetArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[str],
                 bucket: pulumi.Input[str],
                 host: pulumi.Input[str],
                 bandwidth_limt: Optional[pulumi.Input[str]] = None,
                 disable_proxy: Optional[pulumi.Input[bool]] = None,
                 health_check_period: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 path_style: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None,
                 storage_class: Optional[pulumi.Input[str]] = None,
                 syncronous: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] access_key: Access key for the replication service account in the target MinIO
        :param pulumi.Input[str] bucket: The name of the existing target bucket to replicate into
        :param pulumi.Input[str] host: The target host (pair IP/port or domain port). If port is omitted, HTTPS port (or HTTP if unsecure) will be used. This host must be reachable by the MinIO instance itself
        :param pulumi.Input[str] bandwidth_limt: Maximum bandwidth in byte per second that MinIO can used when syncronysing this target. Minimum is 100MB
        :param pulumi.Input[bool] disable_proxy: Disable proxy for this target
        :param pulumi.Input[str] health_check_period: Period where the health of this target will be checked. This must be a valid duration, such as `5s` or `2m`
        :param pulumi.Input[str] path: Path of the Minio endpoint. This is usefull if MinIO API isn't served on at the root, e.g for `example.com/minio/`, the path would be `/minio/`
        :param pulumi.Input[str] path_style: Whether to use path-style or virtual-hosted-syle request to this target (https://docs.aws.amazon.com/AmazonS3/latest/userguide/VirtualHosting.html#path-style-access). `auto` allows MinIO to chose automatically the appropriate option (Recommened)`
        :param pulumi.Input[str] region: Region of the target MinIO. This will be used to generate the target ARN
        :param pulumi.Input[str] secret_key: Secret key for the replication service account in the target MinIO. This is optional so it can be imported but prevent secret update
        :param pulumi.Input[str] storage_class: The storage class to use for the object on this target
        :param pulumi.Input[bool] syncronous: Use synchronous replication.
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "host", host)
        if bandwidth_limt is not None:
            pulumi.set(__self__, "bandwidth_limt", bandwidth_limt)
        if disable_proxy is not None:
            pulumi.set(__self__, "disable_proxy", disable_proxy)
        if health_check_period is not None:
            pulumi.set(__self__, "health_check_period", health_check_period)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if path_style is not None:
            pulumi.set(__self__, "path_style", path_style)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)
        if syncronous is not None:
            pulumi.set(__self__, "syncronous", syncronous)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[str]:
        """
        Access key for the replication service account in the target MinIO
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        The name of the existing target bucket to replicate into
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        The target host (pair IP/port or domain port). If port is omitted, HTTPS port (or HTTP if unsecure) will be used. This host must be reachable by the MinIO instance itself
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="bandwidthLimt")
    def bandwidth_limt(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum bandwidth in byte per second that MinIO can used when syncronysing this target. Minimum is 100MB
        """
        return pulumi.get(self, "bandwidth_limt")

    @bandwidth_limt.setter
    def bandwidth_limt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_limt", value)

    @property
    @pulumi.getter(name="disableProxy")
    def disable_proxy(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable proxy for this target
        """
        return pulumi.get(self, "disable_proxy")

    @disable_proxy.setter
    def disable_proxy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_proxy", value)

    @property
    @pulumi.getter(name="healthCheckPeriod")
    def health_check_period(self) -> Optional[pulumi.Input[str]]:
        """
        Period where the health of this target will be checked. This must be a valid duration, such as `5s` or `2m`
        """
        return pulumi.get(self, "health_check_period")

    @health_check_period.setter
    def health_check_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_period", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of the Minio endpoint. This is usefull if MinIO API isn't served on at the root, e.g for `example.com/minio/`, the path would be `/minio/`
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="pathStyle")
    def path_style(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to use path-style or virtual-hosted-syle request to this target (https://docs.aws.amazon.com/AmazonS3/latest/userguide/VirtualHosting.html#path-style-access). `auto` allows MinIO to chose automatically the appropriate option (Recommened)`
        """
        return pulumi.get(self, "path_style")

    @path_style.setter
    def path_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_style", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region of the target MinIO. This will be used to generate the target ARN
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        Secret key for the replication service account in the target MinIO. This is optional so it can be imported but prevent secret update
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[pulumi.Input[str]]:
        """
        The storage class to use for the object on this target
        """
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class", value)

    @property
    @pulumi.getter
    def syncronous(self) -> Optional[pulumi.Input[bool]]:
        """
        Use synchronous replication.
        """
        return pulumi.get(self, "syncronous")

    @syncronous.setter
    def syncronous(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "syncronous", value)


@pulumi.input_type
class S3BucketVersioningVersioningConfigurationArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 exclude_folders: Optional[pulumi.Input[bool]] = None,
                 excluded_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "status", status)
        if exclude_folders is not None:
            pulumi.set(__self__, "exclude_folders", exclude_folders)
        if excluded_prefixes is not None:
            pulumi.set(__self__, "excluded_prefixes", excluded_prefixes)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="excludeFolders")
    def exclude_folders(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "exclude_folders")

    @exclude_folders.setter
    def exclude_folders(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclude_folders", value)

    @property
    @pulumi.getter(name="excludedPrefixes")
    def excluded_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_prefixes")

    @excluded_prefixes.setter
    def excluded_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_prefixes", value)


@pulumi.input_type
class GetIamPolicyDocumentStatementArgs:
    def __init__(__self__, *,
                 actions: Optional[Sequence[str]] = None,
                 conditions: Optional[Sequence['GetIamPolicyDocumentStatementConditionArgs']] = None,
                 effect: Optional[str] = None,
                 principal: Optional[str] = None,
                 resources: Optional[Sequence[str]] = None,
                 sid: Optional[str] = None):
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if principal is not None:
            pulumi.set(__self__, "principal", principal)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if sid is not None:
            pulumi.set(__self__, "sid", sid)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['GetIamPolicyDocumentStatementConditionArgs']]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[Sequence['GetIamPolicyDocumentStatementConditionArgs']]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[str]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def principal(self) -> Optional[str]:
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: Optional[str]):
        pulumi.set(self, "principal", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def sid(self) -> Optional[str]:
        return pulumi.get(self, "sid")

    @sid.setter
    def sid(self, value: Optional[str]):
        pulumi.set(self, "sid", value)


@pulumi.input_type
class GetIamPolicyDocumentStatementConditionArgs:
    def __init__(__self__, *,
                 test: str,
                 values: Sequence[str],
                 variable: str):
        pulumi.set(__self__, "test", test)
        pulumi.set(__self__, "values", values)
        pulumi.set(__self__, "variable", variable)

    @property
    @pulumi.getter
    def test(self) -> str:
        return pulumi.get(self, "test")

    @test.setter
    def test(self, value: str):
        pulumi.set(self, "test", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def variable(self) -> str:
        return pulumi.get(self, "variable")

    @variable.setter
    def variable(self, value: str):
        pulumi.set(self, "variable", value)


