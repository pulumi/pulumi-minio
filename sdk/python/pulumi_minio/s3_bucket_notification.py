# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['S3BucketNotificationArgs', 'S3BucketNotification']

@pulumi.input_type
class S3BucketNotificationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 queues: Optional[pulumi.Input[Sequence[pulumi.Input['S3BucketNotificationQueueArgs']]]] = None):
        """
        The set of arguments for constructing a S3BucketNotification resource.
        """
        S3BucketNotificationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            queues=queues,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: pulumi.Input[str],
             queues: Optional[pulumi.Input[Sequence[pulumi.Input['S3BucketNotificationQueueArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("bucket", bucket)
        if queues is not None:
            _setter("queues", queues)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['S3BucketNotificationQueueArgs']]]]:
        return pulumi.get(self, "queues")

    @queues.setter
    def queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['S3BucketNotificationQueueArgs']]]]):
        pulumi.set(self, "queues", value)


@pulumi.input_type
class _S3BucketNotificationState:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 queues: Optional[pulumi.Input[Sequence[pulumi.Input['S3BucketNotificationQueueArgs']]]] = None):
        """
        Input properties used for looking up and filtering S3BucketNotification resources.
        """
        _S3BucketNotificationState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            queues=queues,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[pulumi.Input[str]] = None,
             queues: Optional[pulumi.Input[Sequence[pulumi.Input['S3BucketNotificationQueueArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bucket is not None:
            _setter("bucket", bucket)
        if queues is not None:
            _setter("queues", queues)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['S3BucketNotificationQueueArgs']]]]:
        return pulumi.get(self, "queues")

    @queues.setter
    def queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['S3BucketNotificationQueueArgs']]]]):
        pulumi.set(self, "queues", value)


class S3BucketNotification(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 queues: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['S3BucketNotificationQueueArgs']]]]] = None,
                 __props__=None):
        """
        Create a S3BucketNotification resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: S3BucketNotificationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a S3BucketNotification resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param S3BucketNotificationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(S3BucketNotificationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            S3BucketNotificationArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 queues: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['S3BucketNotificationQueueArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = S3BucketNotificationArgs.__new__(S3BucketNotificationArgs)

            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            __props__.__dict__["queues"] = queues
        super(S3BucketNotification, __self__).__init__(
            'minio:index/s3BucketNotification:S3BucketNotification',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            queues: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['S3BucketNotificationQueueArgs']]]]] = None) -> 'S3BucketNotification':
        """
        Get an existing S3BucketNotification resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _S3BucketNotificationState.__new__(_S3BucketNotificationState)

        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["queues"] = queues
        return S3BucketNotification(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def queues(self) -> pulumi.Output[Optional[Sequence['outputs.S3BucketNotificationQueue']]]:
        return pulumi.get(self, "queues")

