// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.minio.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class S3BucketReplicationRuleTarget {
    /**
     * @return Access key for the replication service account in the target MinIO
     * 
     */
    private String accessKey;
    /**
     * @return Maximum bandwidth in byte per second that MinIO can used when syncronysing this target. Minimum is 100MB
     * 
     */
    private @Nullable String bandwidthLimt;
    /**
     * @return The name of the existing target bucket to replicate into
     * 
     */
    private String bucket;
    /**
     * @return Disable proxy for this target
     * 
     */
    private @Nullable Boolean disableProxy;
    /**
     * @return Period where the health of this target will be checked. This must be a valid duration, such as `5s` or `2m`
     * 
     */
    private @Nullable String healthCheckPeriod;
    /**
     * @return The target host (pair IP/port or domain port). If port is omitted, HTTPS port (or HTTP if unsecure) will be used. This host must be reachable by the MinIO instance itself
     * 
     */
    private String host;
    /**
     * @return Path of the Minio endpoint. This is usefull if MinIO API isn&#39;t served on at the root, e.g for `example.com/minio/`, the path would be `/minio/`
     * 
     */
    private @Nullable String path;
    /**
     * @return Whether to use path-style or virtual-hosted-syle request to this target (https://docs.aws.amazon.com/AmazonS3/latest/userguide/VirtualHosting.html#path-style-access). `auto` allows MinIO to chose automatically the appropriate option (Recommened)`
     * 
     */
    private @Nullable String pathStyle;
    /**
     * @return Region of the target MinIO. This will be used to generate the target ARN
     * 
     */
    private @Nullable String region;
    /**
     * @return Secret key for the replication service account in the target MinIO. This is optional so it can be imported but prevent secret update
     * 
     */
    private @Nullable String secretKey;
    private @Nullable Boolean secure;
    /**
     * @return The storage class to use for the object on this target
     * 
     */
    private @Nullable String storageClass;
    /**
     * @return Use synchronous replication.
     * 
     */
    private @Nullable Boolean syncronous;

    private S3BucketReplicationRuleTarget() {}
    /**
     * @return Access key for the replication service account in the target MinIO
     * 
     */
    public String accessKey() {
        return this.accessKey;
    }
    /**
     * @return Maximum bandwidth in byte per second that MinIO can used when syncronysing this target. Minimum is 100MB
     * 
     */
    public Optional<String> bandwidthLimt() {
        return Optional.ofNullable(this.bandwidthLimt);
    }
    /**
     * @return The name of the existing target bucket to replicate into
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    /**
     * @return Disable proxy for this target
     * 
     */
    public Optional<Boolean> disableProxy() {
        return Optional.ofNullable(this.disableProxy);
    }
    /**
     * @return Period where the health of this target will be checked. This must be a valid duration, such as `5s` or `2m`
     * 
     */
    public Optional<String> healthCheckPeriod() {
        return Optional.ofNullable(this.healthCheckPeriod);
    }
    /**
     * @return The target host (pair IP/port or domain port). If port is omitted, HTTPS port (or HTTP if unsecure) will be used. This host must be reachable by the MinIO instance itself
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return Path of the Minio endpoint. This is usefull if MinIO API isn&#39;t served on at the root, e.g for `example.com/minio/`, the path would be `/minio/`
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return Whether to use path-style or virtual-hosted-syle request to this target (https://docs.aws.amazon.com/AmazonS3/latest/userguide/VirtualHosting.html#path-style-access). `auto` allows MinIO to chose automatically the appropriate option (Recommened)`
     * 
     */
    public Optional<String> pathStyle() {
        return Optional.ofNullable(this.pathStyle);
    }
    /**
     * @return Region of the target MinIO. This will be used to generate the target ARN
     * 
     */
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    /**
     * @return Secret key for the replication service account in the target MinIO. This is optional so it can be imported but prevent secret update
     * 
     */
    public Optional<String> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }
    public Optional<Boolean> secure() {
        return Optional.ofNullable(this.secure);
    }
    /**
     * @return The storage class to use for the object on this target
     * 
     */
    public Optional<String> storageClass() {
        return Optional.ofNullable(this.storageClass);
    }
    /**
     * @return Use synchronous replication.
     * 
     */
    public Optional<Boolean> syncronous() {
        return Optional.ofNullable(this.syncronous);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(S3BucketReplicationRuleTarget defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessKey;
        private @Nullable String bandwidthLimt;
        private String bucket;
        private @Nullable Boolean disableProxy;
        private @Nullable String healthCheckPeriod;
        private String host;
        private @Nullable String path;
        private @Nullable String pathStyle;
        private @Nullable String region;
        private @Nullable String secretKey;
        private @Nullable Boolean secure;
        private @Nullable String storageClass;
        private @Nullable Boolean syncronous;
        public Builder() {}
        public Builder(S3BucketReplicationRuleTarget defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessKey = defaults.accessKey;
    	      this.bandwidthLimt = defaults.bandwidthLimt;
    	      this.bucket = defaults.bucket;
    	      this.disableProxy = defaults.disableProxy;
    	      this.healthCheckPeriod = defaults.healthCheckPeriod;
    	      this.host = defaults.host;
    	      this.path = defaults.path;
    	      this.pathStyle = defaults.pathStyle;
    	      this.region = defaults.region;
    	      this.secretKey = defaults.secretKey;
    	      this.secure = defaults.secure;
    	      this.storageClass = defaults.storageClass;
    	      this.syncronous = defaults.syncronous;
        }

        @CustomType.Setter
        public Builder accessKey(String accessKey) {
            if (accessKey == null) {
              throw new MissingRequiredPropertyException("S3BucketReplicationRuleTarget", "accessKey");
            }
            this.accessKey = accessKey;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthLimt(@Nullable String bandwidthLimt) {

            this.bandwidthLimt = bandwidthLimt;
            return this;
        }
        @CustomType.Setter
        public Builder bucket(String bucket) {
            if (bucket == null) {
              throw new MissingRequiredPropertyException("S3BucketReplicationRuleTarget", "bucket");
            }
            this.bucket = bucket;
            return this;
        }
        @CustomType.Setter
        public Builder disableProxy(@Nullable Boolean disableProxy) {

            this.disableProxy = disableProxy;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheckPeriod(@Nullable String healthCheckPeriod) {

            this.healthCheckPeriod = healthCheckPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("S3BucketReplicationRuleTarget", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {

            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder pathStyle(@Nullable String pathStyle) {

            this.pathStyle = pathStyle;
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {

            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder secretKey(@Nullable String secretKey) {

            this.secretKey = secretKey;
            return this;
        }
        @CustomType.Setter
        public Builder secure(@Nullable Boolean secure) {

            this.secure = secure;
            return this;
        }
        @CustomType.Setter
        public Builder storageClass(@Nullable String storageClass) {

            this.storageClass = storageClass;
            return this;
        }
        @CustomType.Setter
        public Builder syncronous(@Nullable Boolean syncronous) {

            this.syncronous = syncronous;
            return this;
        }
        public S3BucketReplicationRuleTarget build() {
            final var _resultValue = new S3BucketReplicationRuleTarget();
            _resultValue.accessKey = accessKey;
            _resultValue.bandwidthLimt = bandwidthLimt;
            _resultValue.bucket = bucket;
            _resultValue.disableProxy = disableProxy;
            _resultValue.healthCheckPeriod = healthCheckPeriod;
            _resultValue.host = host;
            _resultValue.path = path;
            _resultValue.pathStyle = pathStyle;
            _resultValue.region = region;
            _resultValue.secretKey = secretKey;
            _resultValue.secure = secure;
            _resultValue.storageClass = storageClass;
            _resultValue.syncronous = syncronous;
            return _resultValue;
        }
    }
}
