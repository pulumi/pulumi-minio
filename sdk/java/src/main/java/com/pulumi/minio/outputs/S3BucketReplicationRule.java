// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.minio.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.minio.outputs.S3BucketReplicationRuleTarget;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class S3BucketReplicationRule {
    /**
     * @return Rule ARN genrated by MinIO
     * 
     */
    private @Nullable String arn;
    /**
     * @return Whether or not to synchronise marker deletion
     * 
     */
    private @Nullable Boolean deleteMarkerReplication;
    /**
     * @return Whether or not to propagate deletion
     * 
     */
    private @Nullable Boolean deleteReplication;
    /**
     * @return Whether or not this rule is enabled
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return Whether or not to synchronise object created prior the replication configuration
     * 
     */
    private @Nullable Boolean existingObjectReplication;
    /**
     * @return Rule ID generated by MinIO
     * 
     */
    private @Nullable String id;
    /**
     * @return Whether or not to synchonise buckets and objects metadata (such as locks). This must be enabled to achieve a two-way replication
     * 
     */
    private @Nullable Boolean metadataSync;
    /**
     * @return Bucket prefix object must be in to be syncronised
     * 
     */
    private @Nullable String prefix;
    /**
     * @return Rule priority. If omitted, the inverted index will be used as priority. This means that the first rule definition will have the higher priority
     * 
     */
    private @Nullable Integer priority;
    /**
     * @return Tags which objects must have to be syncronised
     * 
     */
    private @Nullable Map<String,Object> tags;
    /**
     * @return Bucket prefix
     * 
     */
    private S3BucketReplicationRuleTarget target;

    private S3BucketReplicationRule() {}
    /**
     * @return Rule ARN genrated by MinIO
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }
    /**
     * @return Whether or not to synchronise marker deletion
     * 
     */
    public Optional<Boolean> deleteMarkerReplication() {
        return Optional.ofNullable(this.deleteMarkerReplication);
    }
    /**
     * @return Whether or not to propagate deletion
     * 
     */
    public Optional<Boolean> deleteReplication() {
        return Optional.ofNullable(this.deleteReplication);
    }
    /**
     * @return Whether or not this rule is enabled
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return Whether or not to synchronise object created prior the replication configuration
     * 
     */
    public Optional<Boolean> existingObjectReplication() {
        return Optional.ofNullable(this.existingObjectReplication);
    }
    /**
     * @return Rule ID generated by MinIO
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Whether or not to synchonise buckets and objects metadata (such as locks). This must be enabled to achieve a two-way replication
     * 
     */
    public Optional<Boolean> metadataSync() {
        return Optional.ofNullable(this.metadataSync);
    }
    /**
     * @return Bucket prefix object must be in to be syncronised
     * 
     */
    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }
    /**
     * @return Rule priority. If omitted, the inverted index will be used as priority. This means that the first rule definition will have the higher priority
     * 
     */
    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }
    /**
     * @return Tags which objects must have to be syncronised
     * 
     */
    public Map<String,Object> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Bucket prefix
     * 
     */
    public S3BucketReplicationRuleTarget target() {
        return this.target;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(S3BucketReplicationRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String arn;
        private @Nullable Boolean deleteMarkerReplication;
        private @Nullable Boolean deleteReplication;
        private @Nullable Boolean enabled;
        private @Nullable Boolean existingObjectReplication;
        private @Nullable String id;
        private @Nullable Boolean metadataSync;
        private @Nullable String prefix;
        private @Nullable Integer priority;
        private @Nullable Map<String,Object> tags;
        private S3BucketReplicationRuleTarget target;
        public Builder() {}
        public Builder(S3BucketReplicationRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.deleteMarkerReplication = defaults.deleteMarkerReplication;
    	      this.deleteReplication = defaults.deleteReplication;
    	      this.enabled = defaults.enabled;
    	      this.existingObjectReplication = defaults.existingObjectReplication;
    	      this.id = defaults.id;
    	      this.metadataSync = defaults.metadataSync;
    	      this.prefix = defaults.prefix;
    	      this.priority = defaults.priority;
    	      this.tags = defaults.tags;
    	      this.target = defaults.target;
        }

        @CustomType.Setter
        public Builder arn(@Nullable String arn) {

            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder deleteMarkerReplication(@Nullable Boolean deleteMarkerReplication) {

            this.deleteMarkerReplication = deleteMarkerReplication;
            return this;
        }
        @CustomType.Setter
        public Builder deleteReplication(@Nullable Boolean deleteReplication) {

            this.deleteReplication = deleteReplication;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder existingObjectReplication(@Nullable Boolean existingObjectReplication) {

            this.existingObjectReplication = existingObjectReplication;
            return this;
        }
        @CustomType.Setter
        public Builder id(@Nullable String id) {

            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder metadataSync(@Nullable Boolean metadataSync) {

            this.metadataSync = metadataSync;
            return this;
        }
        @CustomType.Setter
        public Builder prefix(@Nullable String prefix) {

            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder priority(@Nullable Integer priority) {

            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable Map<String,Object> tags) {

            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder target(S3BucketReplicationRuleTarget target) {
            if (target == null) {
              throw new MissingRequiredPropertyException("S3BucketReplicationRule", "target");
            }
            this.target = target;
            return this;
        }
        public S3BucketReplicationRule build() {
            final var _resultValue = new S3BucketReplicationRule();
            _resultValue.arn = arn;
            _resultValue.deleteMarkerReplication = deleteMarkerReplication;
            _resultValue.deleteReplication = deleteReplication;
            _resultValue.enabled = enabled;
            _resultValue.existingObjectReplication = existingObjectReplication;
            _resultValue.id = id;
            _resultValue.metadataSync = metadataSync;
            _resultValue.prefix = prefix;
            _resultValue.priority = priority;
            _resultValue.tags = tags;
            _resultValue.target = target;
            return _resultValue;
        }
    }
}
