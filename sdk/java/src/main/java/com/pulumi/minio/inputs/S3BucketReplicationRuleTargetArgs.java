// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.minio.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class S3BucketReplicationRuleTargetArgs extends com.pulumi.resources.ResourceArgs {

    public static final S3BucketReplicationRuleTargetArgs Empty = new S3BucketReplicationRuleTargetArgs();

    /**
     * Access key for the replication service account in the target MinIO
     * 
     */
    @Import(name="accessKey", required=true)
    private Output<String> accessKey;

    /**
     * @return Access key for the replication service account in the target MinIO
     * 
     */
    public Output<String> accessKey() {
        return this.accessKey;
    }

    /**
     * Maximum bandwidth in byte per second that MinIO can used when syncronysing this target. Minimum is 100MB
     * 
     */
    @Import(name="bandwidthLimt")
    private @Nullable Output<String> bandwidthLimt;

    /**
     * @return Maximum bandwidth in byte per second that MinIO can used when syncronysing this target. Minimum is 100MB
     * 
     */
    public Optional<Output<String>> bandwidthLimt() {
        return Optional.ofNullable(this.bandwidthLimt);
    }

    /**
     * The name of the existing target bucket to replicate into
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return The name of the existing target bucket to replicate into
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * Disable proxy for this target
     * 
     */
    @Import(name="disableProxy")
    private @Nullable Output<Boolean> disableProxy;

    /**
     * @return Disable proxy for this target
     * 
     */
    public Optional<Output<Boolean>> disableProxy() {
        return Optional.ofNullable(this.disableProxy);
    }

    /**
     * Period where the health of this target will be checked. This must be a valid duration, such as `5s` or `2m`
     * 
     */
    @Import(name="healthCheckPeriod")
    private @Nullable Output<String> healthCheckPeriod;

    /**
     * @return Period where the health of this target will be checked. This must be a valid duration, such as `5s` or `2m`
     * 
     */
    public Optional<Output<String>> healthCheckPeriod() {
        return Optional.ofNullable(this.healthCheckPeriod);
    }

    /**
     * The target host (pair IP/port or domain port). If port is omitted, HTTPS port (or HTTP if unsecure) will be used. This host must be reachable by the MinIO instance itself
     * 
     */
    @Import(name="host", required=true)
    private Output<String> host;

    /**
     * @return The target host (pair IP/port or domain port). If port is omitted, HTTPS port (or HTTP if unsecure) will be used. This host must be reachable by the MinIO instance itself
     * 
     */
    public Output<String> host() {
        return this.host;
    }

    /**
     * Path of the Minio endpoint. This is usefull if MinIO API isn&#39;t served on at the root, e.g for `example.com/minio/`, the path would be `/minio/`
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return Path of the Minio endpoint. This is usefull if MinIO API isn&#39;t served on at the root, e.g for `example.com/minio/`, the path would be `/minio/`
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Whether to use path-style or virtual-hosted-syle request to this target (https://docs.aws.amazon.com/AmazonS3/latest/userguide/VirtualHosting.html#path-style-access). `auto` allows MinIO to chose automatically the appropriate option (Recommened)`
     * 
     */
    @Import(name="pathStyle")
    private @Nullable Output<String> pathStyle;

    /**
     * @return Whether to use path-style or virtual-hosted-syle request to this target (https://docs.aws.amazon.com/AmazonS3/latest/userguide/VirtualHosting.html#path-style-access). `auto` allows MinIO to chose automatically the appropriate option (Recommened)`
     * 
     */
    public Optional<Output<String>> pathStyle() {
        return Optional.ofNullable(this.pathStyle);
    }

    /**
     * Region of the target MinIO. This will be used to generate the target ARN
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region of the target MinIO. This will be used to generate the target ARN
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Secret key for the replication service account in the target MinIO. This is optional so it can be imported but prevent secret update
     * 
     */
    @Import(name="secretKey")
    private @Nullable Output<String> secretKey;

    /**
     * @return Secret key for the replication service account in the target MinIO. This is optional so it can be imported but prevent secret update
     * 
     */
    public Optional<Output<String>> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }

    @Import(name="secure")
    private @Nullable Output<Boolean> secure;

    public Optional<Output<Boolean>> secure() {
        return Optional.ofNullable(this.secure);
    }

    /**
     * The storage class to use for the object on this target
     * 
     */
    @Import(name="storageClass")
    private @Nullable Output<String> storageClass;

    /**
     * @return The storage class to use for the object on this target
     * 
     */
    public Optional<Output<String>> storageClass() {
        return Optional.ofNullable(this.storageClass);
    }

    /**
     * Use synchronous replication.
     * 
     */
    @Import(name="syncronous")
    private @Nullable Output<Boolean> syncronous;

    /**
     * @return Use synchronous replication.
     * 
     */
    public Optional<Output<Boolean>> syncronous() {
        return Optional.ofNullable(this.syncronous);
    }

    private S3BucketReplicationRuleTargetArgs() {}

    private S3BucketReplicationRuleTargetArgs(S3BucketReplicationRuleTargetArgs $) {
        this.accessKey = $.accessKey;
        this.bandwidthLimt = $.bandwidthLimt;
        this.bucket = $.bucket;
        this.disableProxy = $.disableProxy;
        this.healthCheckPeriod = $.healthCheckPeriod;
        this.host = $.host;
        this.path = $.path;
        this.pathStyle = $.pathStyle;
        this.region = $.region;
        this.secretKey = $.secretKey;
        this.secure = $.secure;
        this.storageClass = $.storageClass;
        this.syncronous = $.syncronous;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(S3BucketReplicationRuleTargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private S3BucketReplicationRuleTargetArgs $;

        public Builder() {
            $ = new S3BucketReplicationRuleTargetArgs();
        }

        public Builder(S3BucketReplicationRuleTargetArgs defaults) {
            $ = new S3BucketReplicationRuleTargetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKey Access key for the replication service account in the target MinIO
         * 
         * @return builder
         * 
         */
        public Builder accessKey(Output<String> accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        /**
         * @param accessKey Access key for the replication service account in the target MinIO
         * 
         * @return builder
         * 
         */
        public Builder accessKey(String accessKey) {
            return accessKey(Output.of(accessKey));
        }

        /**
         * @param bandwidthLimt Maximum bandwidth in byte per second that MinIO can used when syncronysing this target. Minimum is 100MB
         * 
         * @return builder
         * 
         */
        public Builder bandwidthLimt(@Nullable Output<String> bandwidthLimt) {
            $.bandwidthLimt = bandwidthLimt;
            return this;
        }

        /**
         * @param bandwidthLimt Maximum bandwidth in byte per second that MinIO can used when syncronysing this target. Minimum is 100MB
         * 
         * @return builder
         * 
         */
        public Builder bandwidthLimt(String bandwidthLimt) {
            return bandwidthLimt(Output.of(bandwidthLimt));
        }

        /**
         * @param bucket The name of the existing target bucket to replicate into
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket The name of the existing target bucket to replicate into
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param disableProxy Disable proxy for this target
         * 
         * @return builder
         * 
         */
        public Builder disableProxy(@Nullable Output<Boolean> disableProxy) {
            $.disableProxy = disableProxy;
            return this;
        }

        /**
         * @param disableProxy Disable proxy for this target
         * 
         * @return builder
         * 
         */
        public Builder disableProxy(Boolean disableProxy) {
            return disableProxy(Output.of(disableProxy));
        }

        /**
         * @param healthCheckPeriod Period where the health of this target will be checked. This must be a valid duration, such as `5s` or `2m`
         * 
         * @return builder
         * 
         */
        public Builder healthCheckPeriod(@Nullable Output<String> healthCheckPeriod) {
            $.healthCheckPeriod = healthCheckPeriod;
            return this;
        }

        /**
         * @param healthCheckPeriod Period where the health of this target will be checked. This must be a valid duration, such as `5s` or `2m`
         * 
         * @return builder
         * 
         */
        public Builder healthCheckPeriod(String healthCheckPeriod) {
            return healthCheckPeriod(Output.of(healthCheckPeriod));
        }

        /**
         * @param host The target host (pair IP/port or domain port). If port is omitted, HTTPS port (or HTTP if unsecure) will be used. This host must be reachable by the MinIO instance itself
         * 
         * @return builder
         * 
         */
        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The target host (pair IP/port or domain port). If port is omitted, HTTPS port (or HTTP if unsecure) will be used. This host must be reachable by the MinIO instance itself
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param path Path of the Minio endpoint. This is usefull if MinIO API isn&#39;t served on at the root, e.g for `example.com/minio/`, the path would be `/minio/`
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Path of the Minio endpoint. This is usefull if MinIO API isn&#39;t served on at the root, e.g for `example.com/minio/`, the path would be `/minio/`
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param pathStyle Whether to use path-style or virtual-hosted-syle request to this target (https://docs.aws.amazon.com/AmazonS3/latest/userguide/VirtualHosting.html#path-style-access). `auto` allows MinIO to chose automatically the appropriate option (Recommened)`
         * 
         * @return builder
         * 
         */
        public Builder pathStyle(@Nullable Output<String> pathStyle) {
            $.pathStyle = pathStyle;
            return this;
        }

        /**
         * @param pathStyle Whether to use path-style or virtual-hosted-syle request to this target (https://docs.aws.amazon.com/AmazonS3/latest/userguide/VirtualHosting.html#path-style-access). `auto` allows MinIO to chose automatically the appropriate option (Recommened)`
         * 
         * @return builder
         * 
         */
        public Builder pathStyle(String pathStyle) {
            return pathStyle(Output.of(pathStyle));
        }

        /**
         * @param region Region of the target MinIO. This will be used to generate the target ARN
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region of the target MinIO. This will be used to generate the target ARN
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param secretKey Secret key for the replication service account in the target MinIO. This is optional so it can be imported but prevent secret update
         * 
         * @return builder
         * 
         */
        public Builder secretKey(@Nullable Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey Secret key for the replication service account in the target MinIO. This is optional so it can be imported but prevent secret update
         * 
         * @return builder
         * 
         */
        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        public Builder secure(@Nullable Output<Boolean> secure) {
            $.secure = secure;
            return this;
        }

        public Builder secure(Boolean secure) {
            return secure(Output.of(secure));
        }

        /**
         * @param storageClass The storage class to use for the object on this target
         * 
         * @return builder
         * 
         */
        public Builder storageClass(@Nullable Output<String> storageClass) {
            $.storageClass = storageClass;
            return this;
        }

        /**
         * @param storageClass The storage class to use for the object on this target
         * 
         * @return builder
         * 
         */
        public Builder storageClass(String storageClass) {
            return storageClass(Output.of(storageClass));
        }

        /**
         * @param syncronous Use synchronous replication.
         * 
         * @return builder
         * 
         */
        public Builder syncronous(@Nullable Output<Boolean> syncronous) {
            $.syncronous = syncronous;
            return this;
        }

        /**
         * @param syncronous Use synchronous replication.
         * 
         * @return builder
         * 
         */
        public Builder syncronous(Boolean syncronous) {
            return syncronous(Output.of(syncronous));
        }

        public S3BucketReplicationRuleTargetArgs build() {
            if ($.accessKey == null) {
                throw new MissingRequiredPropertyException("S3BucketReplicationRuleTargetArgs", "accessKey");
            }
            if ($.bucket == null) {
                throw new MissingRequiredPropertyException("S3BucketReplicationRuleTargetArgs", "bucket");
            }
            if ($.host == null) {
                throw new MissingRequiredPropertyException("S3BucketReplicationRuleTargetArgs", "host");
            }
            return $;
        }
    }

}
