// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.minio;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.minio.S3BucketReplicationArgs;
import com.pulumi.minio.Utilities;
import com.pulumi.minio.inputs.S3BucketReplicationState;
import com.pulumi.minio.outputs.S3BucketReplicationRule;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.minio.S3Bucket;
 * import com.pulumi.minio.S3BucketArgs;
 * import com.pulumi.minio.S3BucketVersioning;
 * import com.pulumi.minio.S3BucketVersioningArgs;
 * import com.pulumi.minio.inputs.S3BucketVersioningVersioningConfigurationArgs;
 * import com.pulumi.minio.MinioFunctions;
 * import com.pulumi.minio.inputs.GetIamPolicyDocumentArgs;
 * import com.pulumi.minio.IamPolicy;
 * import com.pulumi.minio.IamPolicyArgs;
 * import com.pulumi.minio.IamUser;
 * import com.pulumi.minio.IamUserArgs;
 * import com.pulumi.minio.IamUserPolicyAttachment;
 * import com.pulumi.minio.IamUserPolicyAttachmentArgs;
 * import com.pulumi.minio.IamServiceAccount;
 * import com.pulumi.minio.IamServiceAccountArgs;
 * import com.pulumi.minio.S3BucketReplication;
 * import com.pulumi.minio.S3BucketReplicationArgs;
 * import com.pulumi.minio.inputs.S3BucketReplicationRuleArgs;
 * import com.pulumi.minio.inputs.S3BucketReplicationRuleTargetArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var myBucketInAS3Bucket = new S3Bucket(&#34;myBucketInAS3Bucket&#34;, S3BucketArgs.builder()        
 *             .bucket(&#34;my-bucket&#34;)
 *             .build());
 * 
 *         var myBucketInBS3Bucket = new S3Bucket(&#34;myBucketInBS3Bucket&#34;, S3BucketArgs.builder()        
 *             .bucket(&#34;my-bucket&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(minio.deployment_b())
 *                 .build());
 * 
 *         var myBucketInAS3BucketVersioning = new S3BucketVersioning(&#34;myBucketInAS3BucketVersioning&#34;, S3BucketVersioningArgs.builder()        
 *             .bucket(myBucketInAS3Bucket.bucket())
 *             .versioningConfiguration(S3BucketVersioningVersioningConfigurationArgs.builder()
 *                 .status(&#34;Enabled&#34;)
 *                 .build())
 *             .build());
 * 
 *         var myBucketInBS3BucketVersioning = new S3BucketVersioning(&#34;myBucketInBS3BucketVersioning&#34;, S3BucketVersioningArgs.builder()        
 *             .bucket(myBucketInBS3Bucket.bucket())
 *             .versioningConfiguration(S3BucketVersioningVersioningConfigurationArgs.builder()
 *                 .status(&#34;Enabled&#34;)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(minio.deployment_b())
 *                 .build());
 * 
 *         final var replicationPolicy = MinioFunctions.getIamPolicyDocument(GetIamPolicyDocumentArgs.builder()
 *             .statements(            
 *                 GetIamPolicyDocumentStatementArgs.builder()
 *                     .sid(&#34;ReadBuckets&#34;)
 *                     .effect(&#34;Allow&#34;)
 *                     .resources(&#34;arn:aws:s3:::*&#34;)
 *                     .actions(&#34;s3:ListBucket&#34;)
 *                     .build(),
 *                 GetIamPolicyDocumentStatementArgs.builder()
 *                     .sid(&#34;EnableReplicationOnBucket&#34;)
 *                     .effect(&#34;Allow&#34;)
 *                     .resources(&#34;arn:aws:s3:::my-bucket&#34;)
 *                     .actions(                    
 *                         &#34;s3:GetReplicationConfiguration&#34;,
 *                         &#34;s3:ListBucket&#34;,
 *                         &#34;s3:ListBucketMultipartUploads&#34;,
 *                         &#34;s3:GetBucketLocation&#34;,
 *                         &#34;s3:GetBucketVersioning&#34;,
 *                         &#34;s3:GetBucketObjectLockConfiguration&#34;,
 *                         &#34;s3:GetEncryptionConfiguration&#34;)
 *                     .build(),
 *                 GetIamPolicyDocumentStatementArgs.builder()
 *                     .sid(&#34;EnableReplicatingDataIntoBucket&#34;)
 *                     .effect(&#34;Allow&#34;)
 *                     .resources(&#34;arn:aws:s3:::my-bucket/*&#34;)
 *                     .actions(                    
 *                         &#34;s3:GetReplicationConfiguration&#34;,
 *                         &#34;s3:ReplicateTags&#34;,
 *                         &#34;s3:AbortMultipartUpload&#34;,
 *                         &#34;s3:GetObject&#34;,
 *                         &#34;s3:GetObjectVersion&#34;,
 *                         &#34;s3:GetObjectVersionTagging&#34;,
 *                         &#34;s3:PutObject&#34;,
 *                         &#34;s3:PutObjectRetention&#34;,
 *                         &#34;s3:PutBucketObjectLockConfiguration&#34;,
 *                         &#34;s3:PutObjectLegalHold&#34;,
 *                         &#34;s3:DeleteObject&#34;,
 *                         &#34;s3:ReplicateObject&#34;,
 *                         &#34;s3:ReplicateDelete&#34;)
 *                     .build())
 *             .build());
 * 
 *         var replicationInBIamPolicy = new IamPolicy(&#34;replicationInBIamPolicy&#34;, IamPolicyArgs.builder()        
 *             .policy(replicationPolicy.applyValue(getIamPolicyDocumentResult -&gt; getIamPolicyDocumentResult.json()))
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(minio.deployment_b())
 *                 .build());
 * 
 *         var replicationInBIamUser = new IamUser(&#34;replicationInBIamUser&#34;, IamUserArgs.builder()        
 *             .forceDestroy(true)
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(minio.deployment_b())
 *                 .build());
 * 
 *         var replicationInBIamUserPolicyAttachment = new IamUserPolicyAttachment(&#34;replicationInBIamUserPolicyAttachment&#34;, IamUserPolicyAttachmentArgs.builder()        
 *             .userName(replicationInBIamUser.name())
 *             .policyName(replicationInBIamPolicy.id())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(minio.deployment_b())
 *                 .build());
 * 
 *         var replicationInBIamServiceAccount = new IamServiceAccount(&#34;replicationInBIamServiceAccount&#34;, IamServiceAccountArgs.builder()        
 *             .targetUser(replicationInBIamUser.name())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(minio.deployment_b())
 *                 .dependsOn(replicationInBIamUserPolicyAttachment)
 *                 .build());
 * 
 *         var replicationInBS3BucketReplication = new S3BucketReplication(&#34;replicationInBS3BucketReplication&#34;, S3BucketReplicationArgs.builder()        
 *             .bucket(myBucketInAS3Bucket.bucket())
 *             .rules(S3BucketReplicationRuleArgs.builder()
 *                 .deleteReplication(true)
 *                 .deleteMarkerReplication(true)
 *                 .existingObjectReplication(true)
 *                 .metadataSync(true)
 *                 .target(S3BucketReplicationRuleTargetArgs.builder()
 *                     .bucket(myBucketInBS3Bucket.bucket())
 *                     .secure(false)
 *                     .host(var_.minio_server_b())
 *                     .bandwidthLimt(&#34;100M&#34;)
 *                     .accessKey(replicationInBIamServiceAccount.accessKey())
 *                     .secretKey(replicationInBIamServiceAccount.secretKey())
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     myBucketInAS3BucketVersioning,
 *                     myBucketInBS3BucketVersioning)
 *                 .build());
 * 
 *         var replicationInAIamPolicy = new IamPolicy(&#34;replicationInAIamPolicy&#34;, IamPolicyArgs.builder()        
 *             .policy(replicationPolicy.applyValue(getIamPolicyDocumentResult -&gt; getIamPolicyDocumentResult.json()))
 *             .build());
 * 
 *         var replicationInAIamUser = new IamUser(&#34;replicationInAIamUser&#34;, IamUserArgs.builder()        
 *             .forceDestroy(true)
 *             .build());
 * 
 *         var replicationInAIamUserPolicyAttachment = new IamUserPolicyAttachment(&#34;replicationInAIamUserPolicyAttachment&#34;, IamUserPolicyAttachmentArgs.builder()        
 *             .userName(replicationInAIamUser.name())
 *             .policyName(replicationInAIamPolicy.id())
 *             .build());
 * 
 *         var replicationInAIamServiceAccount = new IamServiceAccount(&#34;replicationInAIamServiceAccount&#34;, IamServiceAccountArgs.builder()        
 *             .targetUser(replicationInAIamUser.name())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(replicationInBIamUserPolicyAttachment)
 *                 .build());
 * 
 *         var replicationInAS3BucketReplication = new S3BucketReplication(&#34;replicationInAS3BucketReplication&#34;, S3BucketReplicationArgs.builder()        
 *             .bucket(myBucketInBS3Bucket.bucket())
 *             .rules(S3BucketReplicationRuleArgs.builder()
 *                 .deleteReplication(true)
 *                 .deleteMarkerReplication(true)
 *                 .existingObjectReplication(true)
 *                 .metadataSync(true)
 *                 .target(S3BucketReplicationRuleTargetArgs.builder()
 *                     .bucket(myBucketInAS3Bucket.bucket())
 *                     .host(var_.minio_server_a())
 *                     .secure(false)
 *                     .bandwidthLimt(&#34;100M&#34;)
 *                     .accessKey(replicationInAIamServiceAccount.accessKey())
 *                     .secretKey(replicationInAIamServiceAccount.secretKey())
 *                     .build())
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .provider(minio.deployment_b())
 *                 .dependsOn(                
 *                     myBucketInAS3BucketVersioning,
 *                     myBucketInBS3BucketVersioning)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="minio:index/s3BucketReplication:S3BucketReplication")
public class S3BucketReplication extends com.pulumi.resources.CustomResource {
    /**
     * The name of the existing target bucket to replicate into
     * 
     */
    @Export(name="bucket", refs={String.class}, tree="[0]")
    private Output<String> bucket;

    /**
     * @return The name of the existing target bucket to replicate into
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }
    /**
     * Rule definitions
     * 
     */
    @Export(name="rules", refs={List.class,S3BucketReplicationRule.class}, tree="[0,1]")
    private Output</* @Nullable */ List<S3BucketReplicationRule>> rules;

    /**
     * @return Rule definitions
     * 
     */
    public Output<Optional<List<S3BucketReplicationRule>>> rules() {
        return Codegen.optional(this.rules);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public S3BucketReplication(String name) {
        this(name, S3BucketReplicationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public S3BucketReplication(String name, S3BucketReplicationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public S3BucketReplication(String name, S3BucketReplicationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("minio:index/s3BucketReplication:S3BucketReplication", name, args == null ? S3BucketReplicationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private S3BucketReplication(String name, Output<String> id, @Nullable S3BucketReplicationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("minio:index/s3BucketReplication:S3BucketReplication", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static S3BucketReplication get(String name, Output<String> id, @Nullable S3BucketReplicationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new S3BucketReplication(name, id, state, options);
    }
}
