// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.minio.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IlmPolicyRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final IlmPolicyRuleArgs Empty = new IlmPolicyRuleArgs();

    @Import(name="expiration")
    private @Nullable Output<String> expiration;

    public Optional<Output<String>> expiration() {
        return Optional.ofNullable(this.expiration);
    }

    @Import(name="filter")
    private @Nullable Output<String> filter;

    public Optional<Output<String>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * The ID of this resource.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return The ID of this resource.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    @Import(name="noncurrentVersionExpirationDays")
    private @Nullable Output<Integer> noncurrentVersionExpirationDays;

    public Optional<Output<Integer>> noncurrentVersionExpirationDays() {
        return Optional.ofNullable(this.noncurrentVersionExpirationDays);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private IlmPolicyRuleArgs() {}

    private IlmPolicyRuleArgs(IlmPolicyRuleArgs $) {
        this.expiration = $.expiration;
        this.filter = $.filter;
        this.id = $.id;
        this.noncurrentVersionExpirationDays = $.noncurrentVersionExpirationDays;
        this.status = $.status;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IlmPolicyRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IlmPolicyRuleArgs $;

        public Builder() {
            $ = new IlmPolicyRuleArgs();
        }

        public Builder(IlmPolicyRuleArgs defaults) {
            $ = new IlmPolicyRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder expiration(@Nullable Output<String> expiration) {
            $.expiration = expiration;
            return this;
        }

        public Builder expiration(String expiration) {
            return expiration(Output.of(expiration));
        }

        public Builder filter(@Nullable Output<String> filter) {
            $.filter = filter;
            return this;
        }

        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param id The ID of this resource.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of this resource.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder noncurrentVersionExpirationDays(@Nullable Output<Integer> noncurrentVersionExpirationDays) {
            $.noncurrentVersionExpirationDays = noncurrentVersionExpirationDays;
            return this;
        }

        public Builder noncurrentVersionExpirationDays(Integer noncurrentVersionExpirationDays) {
            return noncurrentVersionExpirationDays(Output.of(noncurrentVersionExpirationDays));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        public IlmPolicyRuleArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("IlmPolicyRuleArgs", "id");
            }
            return $;
        }
    }

}
