// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.minio.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.minio.inputs.S3BucketReplicationRuleTargetArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class S3BucketReplicationRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final S3BucketReplicationRuleArgs Empty = new S3BucketReplicationRuleArgs();

    /**
     * Rule ARN genrated by MinIO
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return Rule ARN genrated by MinIO
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Whether or not to synchronise marker deletion
     * 
     */
    @Import(name="deleteMarkerReplication")
    private @Nullable Output<Boolean> deleteMarkerReplication;

    /**
     * @return Whether or not to synchronise marker deletion
     * 
     */
    public Optional<Output<Boolean>> deleteMarkerReplication() {
        return Optional.ofNullable(this.deleteMarkerReplication);
    }

    /**
     * Whether or not to propagate deletion
     * 
     */
    @Import(name="deleteReplication")
    private @Nullable Output<Boolean> deleteReplication;

    /**
     * @return Whether or not to propagate deletion
     * 
     */
    public Optional<Output<Boolean>> deleteReplication() {
        return Optional.ofNullable(this.deleteReplication);
    }

    /**
     * Whether or not this rule is enabled
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether or not this rule is enabled
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Whether or not to synchronise object created prior the replication configuration
     * 
     */
    @Import(name="existingObjectReplication")
    private @Nullable Output<Boolean> existingObjectReplication;

    /**
     * @return Whether or not to synchronise object created prior the replication configuration
     * 
     */
    public Optional<Output<Boolean>> existingObjectReplication() {
        return Optional.ofNullable(this.existingObjectReplication);
    }

    /**
     * Rule ID generated by MinIO
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Rule ID generated by MinIO
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Whether or not to synchonise buckets and objects metadata (such as locks). This must be enabled to achieve a two-way replication
     * 
     */
    @Import(name="metadataSync")
    private @Nullable Output<Boolean> metadataSync;

    /**
     * @return Whether or not to synchonise buckets and objects metadata (such as locks). This must be enabled to achieve a two-way replication
     * 
     */
    public Optional<Output<Boolean>> metadataSync() {
        return Optional.ofNullable(this.metadataSync);
    }

    /**
     * Bucket prefix object must be in to be syncronised
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @return Bucket prefix object must be in to be syncronised
     * 
     */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    /**
     * Rule priority. If omitted, the inverted index will be used as priority. This means that the first rule definition will have the higher priority
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return Rule priority. If omitted, the inverted index will be used as priority. This means that the first rule definition will have the higher priority
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Tags which objects must have to be syncronised
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,Object>> tags;

    /**
     * @return Tags which objects must have to be syncronised
     * 
     */
    public Optional<Output<Map<String,Object>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Bucket prefix
     * 
     */
    @Import(name="target", required=true)
    private Output<S3BucketReplicationRuleTargetArgs> target;

    /**
     * @return Bucket prefix
     * 
     */
    public Output<S3BucketReplicationRuleTargetArgs> target() {
        return this.target;
    }

    private S3BucketReplicationRuleArgs() {}

    private S3BucketReplicationRuleArgs(S3BucketReplicationRuleArgs $) {
        this.arn = $.arn;
        this.deleteMarkerReplication = $.deleteMarkerReplication;
        this.deleteReplication = $.deleteReplication;
        this.enabled = $.enabled;
        this.existingObjectReplication = $.existingObjectReplication;
        this.id = $.id;
        this.metadataSync = $.metadataSync;
        this.prefix = $.prefix;
        this.priority = $.priority;
        this.tags = $.tags;
        this.target = $.target;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(S3BucketReplicationRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private S3BucketReplicationRuleArgs $;

        public Builder() {
            $ = new S3BucketReplicationRuleArgs();
        }

        public Builder(S3BucketReplicationRuleArgs defaults) {
            $ = new S3BucketReplicationRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn Rule ARN genrated by MinIO
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn Rule ARN genrated by MinIO
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param deleteMarkerReplication Whether or not to synchronise marker deletion
         * 
         * @return builder
         * 
         */
        public Builder deleteMarkerReplication(@Nullable Output<Boolean> deleteMarkerReplication) {
            $.deleteMarkerReplication = deleteMarkerReplication;
            return this;
        }

        /**
         * @param deleteMarkerReplication Whether or not to synchronise marker deletion
         * 
         * @return builder
         * 
         */
        public Builder deleteMarkerReplication(Boolean deleteMarkerReplication) {
            return deleteMarkerReplication(Output.of(deleteMarkerReplication));
        }

        /**
         * @param deleteReplication Whether or not to propagate deletion
         * 
         * @return builder
         * 
         */
        public Builder deleteReplication(@Nullable Output<Boolean> deleteReplication) {
            $.deleteReplication = deleteReplication;
            return this;
        }

        /**
         * @param deleteReplication Whether or not to propagate deletion
         * 
         * @return builder
         * 
         */
        public Builder deleteReplication(Boolean deleteReplication) {
            return deleteReplication(Output.of(deleteReplication));
        }

        /**
         * @param enabled Whether or not this rule is enabled
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether or not this rule is enabled
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param existingObjectReplication Whether or not to synchronise object created prior the replication configuration
         * 
         * @return builder
         * 
         */
        public Builder existingObjectReplication(@Nullable Output<Boolean> existingObjectReplication) {
            $.existingObjectReplication = existingObjectReplication;
            return this;
        }

        /**
         * @param existingObjectReplication Whether or not to synchronise object created prior the replication configuration
         * 
         * @return builder
         * 
         */
        public Builder existingObjectReplication(Boolean existingObjectReplication) {
            return existingObjectReplication(Output.of(existingObjectReplication));
        }

        /**
         * @param id Rule ID generated by MinIO
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Rule ID generated by MinIO
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param metadataSync Whether or not to synchonise buckets and objects metadata (such as locks). This must be enabled to achieve a two-way replication
         * 
         * @return builder
         * 
         */
        public Builder metadataSync(@Nullable Output<Boolean> metadataSync) {
            $.metadataSync = metadataSync;
            return this;
        }

        /**
         * @param metadataSync Whether or not to synchonise buckets and objects metadata (such as locks). This must be enabled to achieve a two-way replication
         * 
         * @return builder
         * 
         */
        public Builder metadataSync(Boolean metadataSync) {
            return metadataSync(Output.of(metadataSync));
        }

        /**
         * @param prefix Bucket prefix object must be in to be syncronised
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix Bucket prefix object must be in to be syncronised
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param priority Rule priority. If omitted, the inverted index will be used as priority. This means that the first rule definition will have the higher priority
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Rule priority. If omitted, the inverted index will be used as priority. This means that the first rule definition will have the higher priority
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param tags Tags which objects must have to be syncronised
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,Object>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags which objects must have to be syncronised
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,Object> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param target Bucket prefix
         * 
         * @return builder
         * 
         */
        public Builder target(Output<S3BucketReplicationRuleTargetArgs> target) {
            $.target = target;
            return this;
        }

        /**
         * @param target Bucket prefix
         * 
         * @return builder
         * 
         */
        public Builder target(S3BucketReplicationRuleTargetArgs target) {
            return target(Output.of(target));
        }

        public S3BucketReplicationRuleArgs build() {
            if ($.target == null) {
                throw new MissingRequiredPropertyException("S3BucketReplicationRuleArgs", "target");
            }
            return $;
        }
    }

}
