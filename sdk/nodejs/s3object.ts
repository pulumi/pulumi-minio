// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class S3Object extends pulumi.CustomResource {
    /**
     * Get an existing S3Object resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: S3ObjectState, opts?: pulumi.CustomResourceOptions): S3Object {
        return new S3Object(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'minio:index/s3Object:S3Object';

    /**
     * Returns true if the given object is an instance of S3Object.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is S3Object {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === S3Object.__pulumiType;
    }

    public readonly bucketName!: pulumi.Output<string>;
    public readonly content!: pulumi.Output<string | undefined>;
    public readonly contentBase64!: pulumi.Output<string | undefined>;
    public readonly contentType!: pulumi.Output<string>;
    public readonly etag!: pulumi.Output<string>;
    public readonly objectName!: pulumi.Output<string>;
    public readonly source!: pulumi.Output<string | undefined>;
    public readonly versionId!: pulumi.Output<string>;

    /**
     * Create a S3Object resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: S3ObjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: S3ObjectArgs | S3ObjectState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as S3ObjectState | undefined;
            inputs["bucketName"] = state ? state.bucketName : undefined;
            inputs["content"] = state ? state.content : undefined;
            inputs["contentBase64"] = state ? state.contentBase64 : undefined;
            inputs["contentType"] = state ? state.contentType : undefined;
            inputs["etag"] = state ? state.etag : undefined;
            inputs["objectName"] = state ? state.objectName : undefined;
            inputs["source"] = state ? state.source : undefined;
            inputs["versionId"] = state ? state.versionId : undefined;
        } else {
            const args = argsOrState as S3ObjectArgs | undefined;
            if ((!args || args.bucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            if ((!args || args.objectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'objectName'");
            }
            inputs["bucketName"] = args ? args.bucketName : undefined;
            inputs["content"] = args ? args.content : undefined;
            inputs["contentBase64"] = args ? args.contentBase64 : undefined;
            inputs["contentType"] = args ? args.contentType : undefined;
            inputs["etag"] = args ? args.etag : undefined;
            inputs["objectName"] = args ? args.objectName : undefined;
            inputs["source"] = args ? args.source : undefined;
            inputs["versionId"] = args ? args.versionId : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(S3Object.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering S3Object resources.
 */
export interface S3ObjectState {
    bucketName?: pulumi.Input<string>;
    content?: pulumi.Input<string>;
    contentBase64?: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    etag?: pulumi.Input<string>;
    objectName?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    versionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a S3Object resource.
 */
export interface S3ObjectArgs {
    bucketName: pulumi.Input<string>;
    content?: pulumi.Input<string>;
    contentBase64?: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    etag?: pulumi.Input<string>;
    objectName: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    versionId?: pulumi.Input<string>;
}
