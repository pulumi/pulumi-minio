// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * `minio.IlmPolicy` handles lifecycle settings for a given `minio.S3Bucket`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as minio from "@pulumi/minio";
 *
 * const bucket = new minio.S3Bucket("bucket", {bucket: "bucket"});
 * const bucket_lifecycle_rules = new minio.IlmPolicy("bucket-lifecycle-rules", {
 *     bucket: bucket.bucket,
 *     rules: [{
 *         id: "expire-7d",
 *         expiration: 7,
 *     }],
 * });
 * ```
 */
export class IlmPolicy extends pulumi.CustomResource {
    /**
     * Get an existing IlmPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IlmPolicyState, opts?: pulumi.CustomResourceOptions): IlmPolicy {
        return new IlmPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'minio:index/ilmPolicy:IlmPolicy';

    /**
     * Returns true if the given object is an instance of IlmPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IlmPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IlmPolicy.__pulumiType;
    }

    public readonly bucket!: pulumi.Output<string>;
    public readonly rules!: pulumi.Output<outputs.IlmPolicyRule[]>;

    /**
     * Create a IlmPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IlmPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IlmPolicyArgs | IlmPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IlmPolicyState | undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
        } else {
            const args = argsOrState as IlmPolicyArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IlmPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IlmPolicy resources.
 */
export interface IlmPolicyState {
    bucket?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.IlmPolicyRule>[]>;
}

/**
 * The set of arguments for constructing a IlmPolicy resource.
 */
export interface IlmPolicyArgs {
    bucket: pulumi.Input<string>;
    rules: pulumi.Input<pulumi.Input<inputs.IlmPolicyRule>[]>;
}
