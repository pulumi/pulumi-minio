// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as minio from "@pulumi/minio";
 *
 * const developer = new minio.IamGroup("developer", {name: "developer"});
 * const testPolicy = new minio.IamGroupPolicy("test_policy", {
 *     name: "state-terraform-s3",
 *     group: developer.id,
 *     policy: `{
 *   "Version":"2012-10-17",
 *   "Statement": [
 *     {
 *       "Sid":"ListAllBucket",
 *       "Effect": "Allow",
 *       "Action": ["s3:PutObject"],
 *       "Principal":"*",
 *       "Resource": "arn:aws:s3:::state-terraform-s3/*"
 *     }
 *   ]
 * }
 * `,
 * });
 * export const minioName = developerMinioIamGroupMembership.id;
 * export const minioPolicy = developerMinioIamGroupMembership.policy;
 * export const minioGroup = developerMinioIamGroupMembership.group;
 * ```
 */
export class IamGroupPolicy extends pulumi.CustomResource {
    /**
     * Get an existing IamGroupPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamGroupPolicyState, opts?: pulumi.CustomResourceOptions): IamGroupPolicy {
        return new IamGroupPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'minio:index/iamGroupPolicy:IamGroupPolicy';

    /**
     * Returns true if the given object is an instance of IamGroupPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamGroupPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamGroupPolicy.__pulumiType;
    }

    declare public readonly group: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly namePrefix: pulumi.Output<string | undefined>;
    declare public readonly policy: pulumi.Output<string>;

    /**
     * Create a IamGroupPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IamGroupPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamGroupPolicyArgs | IamGroupPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamGroupPolicyState | undefined;
            resourceInputs["group"] = state?.group;
            resourceInputs["name"] = state?.name;
            resourceInputs["namePrefix"] = state?.namePrefix;
            resourceInputs["policy"] = state?.policy;
        } else {
            const args = argsOrState as IamGroupPolicyArgs | undefined;
            if (args?.group === undefined && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            if (args?.policy === undefined && !opts.urn) {
                throw new Error("Missing required property 'policy'");
            }
            resourceInputs["group"] = args?.group;
            resourceInputs["name"] = args?.name;
            resourceInputs["namePrefix"] = args?.namePrefix;
            resourceInputs["policy"] = args?.policy;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IamGroupPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IamGroupPolicy resources.
 */
export interface IamGroupPolicyState {
    group?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    policy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IamGroupPolicy resource.
 */
export interface IamGroupPolicyArgs {
    group: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    policy: pulumi.Input<string>;
}
