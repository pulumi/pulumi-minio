// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as minio from "@pulumi/minio";
 *
 * const testIamUser = new minio.IamUser("test", {
 *     forceDestroy: true,
 *     tags: {
 *         "tag-key": "tag-value",
 *     },
 * });
 *
 * export const test = testIamUser.id;
 * export const status = testIamUser.status;
 * export const secret = testIamUser.secret;
 * ```
 */
export class IamUser extends pulumi.CustomResource {
    /**
     * Get an existing IamUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamUserState, opts?: pulumi.CustomResourceOptions): IamUser {
        return new IamUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'minio:index/iamUser:IamUser';

    /**
     * Returns true if the given object is an instance of IamUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamUser.__pulumiType;
    }

    /**
     * Disable user
     */
    public readonly disableUser!: pulumi.Output<boolean | undefined>;
    /**
     * Delete user even if it has non-Terraform-managed IAM access keys
     */
    public readonly forceDestroy!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly secret!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Rotate Minio User Secret Key
     */
    public readonly updateSecret!: pulumi.Output<boolean | undefined>;

    /**
     * Create a IamUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IamUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamUserArgs | IamUserState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamUserState | undefined;
            inputs["disableUser"] = state ? state.disableUser : undefined;
            inputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["secret"] = state ? state.secret : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["updateSecret"] = state ? state.updateSecret : undefined;
        } else {
            const args = argsOrState as IamUserArgs | undefined;
            inputs["disableUser"] = args ? args.disableUser : undefined;
            inputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["updateSecret"] = args ? args.updateSecret : undefined;
            inputs["secret"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(IamUser.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IamUser resources.
 */
export interface IamUserState {
    /**
     * Disable user
     */
    disableUser?: pulumi.Input<boolean>;
    /**
     * Delete user even if it has non-Terraform-managed IAM access keys
     */
    forceDestroy?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    secret?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Rotate Minio User Secret Key
     */
    updateSecret?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a IamUser resource.
 */
export interface IamUserArgs {
    /**
     * Disable user
     */
    disableUser?: pulumi.Input<boolean>;
    /**
     * Delete user even if it has non-Terraform-managed IAM access keys
     */
    forceDestroy?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Rotate Minio User Secret Key
     */
    updateSecret?: pulumi.Input<boolean>;
}
