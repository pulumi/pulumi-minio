// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as minio from "@pulumi/minio";
 *
 * const test = new minio.IamUser("test", {
 *     forceDestroy: true,
 *     tags: {
 *         "tag-key": "tag-value",
 *     },
 * });
 * const testServiceAccount = new minio.IamServiceAccount("testServiceAccount", {targetUser: test.name});
 * export const minioUser = testServiceAccount.accessKey;
 * export const minioPassword = testServiceAccount.secretKey;
 * ```
 */
export class IamServiceAccount extends pulumi.CustomResource {
    /**
     * Get an existing IamServiceAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamServiceAccountState, opts?: pulumi.CustomResourceOptions): IamServiceAccount {
        return new IamServiceAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'minio:index/iamServiceAccount:IamServiceAccount';

    /**
     * Returns true if the given object is an instance of IamServiceAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamServiceAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamServiceAccount.__pulumiType;
    }

    public /*out*/ readonly accessKey!: pulumi.Output<string>;
    /**
     * Disable service account
     */
    public readonly disableUser!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly secretKey!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly targetUser!: pulumi.Output<string>;
    /**
     * rotate secret key
     */
    public readonly updateSecret!: pulumi.Output<boolean | undefined>;

    /**
     * Create a IamServiceAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IamServiceAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamServiceAccountArgs | IamServiceAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamServiceAccountState | undefined;
            resourceInputs["accessKey"] = state ? state.accessKey : undefined;
            resourceInputs["disableUser"] = state ? state.disableUser : undefined;
            resourceInputs["secretKey"] = state ? state.secretKey : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["targetUser"] = state ? state.targetUser : undefined;
            resourceInputs["updateSecret"] = state ? state.updateSecret : undefined;
        } else {
            const args = argsOrState as IamServiceAccountArgs | undefined;
            if ((!args || args.targetUser === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetUser'");
            }
            resourceInputs["disableUser"] = args ? args.disableUser : undefined;
            resourceInputs["targetUser"] = args ? args.targetUser : undefined;
            resourceInputs["updateSecret"] = args ? args.updateSecret : undefined;
            resourceInputs["accessKey"] = undefined /*out*/;
            resourceInputs["secretKey"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IamServiceAccount.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IamServiceAccount resources.
 */
export interface IamServiceAccountState {
    accessKey?: pulumi.Input<string>;
    /**
     * Disable service account
     */
    disableUser?: pulumi.Input<boolean>;
    secretKey?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    targetUser?: pulumi.Input<string>;
    /**
     * rotate secret key
     */
    updateSecret?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a IamServiceAccount resource.
 */
export interface IamServiceAccountArgs {
    /**
     * Disable service account
     */
    disableUser?: pulumi.Input<boolean>;
    targetUser: pulumi.Input<string>;
    /**
     * rotate secret key
     */
    updateSecret?: pulumi.Input<boolean>;
}
