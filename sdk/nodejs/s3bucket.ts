// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as minio from "@pulumi/minio";
 *
 * const stateTerraformS3 = new minio.S3Bucket("stateTerraformS3", {
 *     acl: "public",
 *     bucket: "state-terraform-s3",
 * });
 * export const minioId = stateTerraformS3.id;
 * export const minioUrl = stateTerraformS3.bucketDomainName;
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class S3Bucket extends pulumi.CustomResource {
    /**
     * Get an existing S3Bucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: S3BucketState, opts?: pulumi.CustomResourceOptions): S3Bucket {
        return new S3Bucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'minio:index/s3Bucket:S3Bucket';

    /**
     * Returns true if the given object is an instance of S3Bucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is S3Bucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === S3Bucket.__pulumiType;
    }

    public readonly acl!: pulumi.Output<string | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly bucket!: pulumi.Output<string>;
    public /*out*/ readonly bucketDomainName!: pulumi.Output<string>;
    public readonly bucketPrefix!: pulumi.Output<string | undefined>;
    public readonly forceDestroy!: pulumi.Output<boolean | undefined>;
    public readonly objectLocking!: pulumi.Output<boolean | undefined>;
    public readonly quota!: pulumi.Output<number | undefined>;

    /**
     * Create a S3Bucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: S3BucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: S3BucketArgs | S3BucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as S3BucketState | undefined;
            resourceInputs["acl"] = state ? state.acl : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["bucketDomainName"] = state ? state.bucketDomainName : undefined;
            resourceInputs["bucketPrefix"] = state ? state.bucketPrefix : undefined;
            resourceInputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            resourceInputs["objectLocking"] = state ? state.objectLocking : undefined;
            resourceInputs["quota"] = state ? state.quota : undefined;
        } else {
            const args = argsOrState as S3BucketArgs | undefined;
            resourceInputs["acl"] = args ? args.acl : undefined;
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["bucketPrefix"] = args ? args.bucketPrefix : undefined;
            resourceInputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            resourceInputs["objectLocking"] = args ? args.objectLocking : undefined;
            resourceInputs["quota"] = args ? args.quota : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["bucketDomainName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(S3Bucket.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering S3Bucket resources.
 */
export interface S3BucketState {
    acl?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    bucket?: pulumi.Input<string>;
    bucketDomainName?: pulumi.Input<string>;
    bucketPrefix?: pulumi.Input<string>;
    forceDestroy?: pulumi.Input<boolean>;
    objectLocking?: pulumi.Input<boolean>;
    quota?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a S3Bucket resource.
 */
export interface S3BucketArgs {
    acl?: pulumi.Input<string>;
    bucket?: pulumi.Input<string>;
    bucketPrefix?: pulumi.Input<string>;
    forceDestroy?: pulumi.Input<boolean>;
    objectLocking?: pulumi.Input<boolean>;
    quota?: pulumi.Input<number>;
}
