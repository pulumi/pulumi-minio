{
    "name": "minio",
    "description": "A Pulumi package for creating and managing minio cloud resources.",
    "keywords": [
        "pulumi",
        "minio"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`minio` Terraform Provider](https://github.com/aminueza/terraform-provider-minio).",
    "repository": "https://github.com/pulumi/pulumi-minio",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-minio/sdk/go/minio",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing minio cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/aminueza/terraform-provider-minio)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-minio` repo](https://github.com/pulumi/pulumi-minio/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-minio` repo](https://github.com/aminueza/terraform-provider-minio/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/aminueza/terraform-provider-minio)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-minio` repo](https://github.com/pulumi/pulumi-minio/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-minio` repo](https://github.com/aminueza/terraform-provider-minio/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "minioAccessKey": {
                "type": "string",
                "description": "Minio Access Key\n",
                "deprecationMessage": "use minio_user instead"
            },
            "minioApiVersion": {
                "type": "string",
                "description": "Minio API Version (type: string, options: v2 or v4, default: v4)\n"
            },
            "minioCacertFile": {
                "type": "string"
            },
            "minioCertFile": {
                "type": "string"
            },
            "minioInsecure": {
                "type": "boolean",
                "description": "Disable SSL certificate verification (default: false)\n"
            },
            "minioKeyFile": {
                "type": "string"
            },
            "minioPassword": {
                "type": "string",
                "description": "Minio Password\n"
            },
            "minioRegion": {
                "type": "string",
                "description": "Minio Region (default: us-east-1)\n"
            },
            "minioSecretKey": {
                "type": "string",
                "description": "Minio Secret Key\n",
                "deprecationMessage": "use minio_password instead"
            },
            "minioServer": {
                "type": "string",
                "description": "Minio Host and Port\n"
            },
            "minioSessionToken": {
                "type": "string",
                "description": "Minio Session Token\n"
            },
            "minioSsl": {
                "type": "boolean",
                "description": "Minio SSL enabled (default: false)\n"
            },
            "minioUser": {
                "type": "string",
                "description": "Minio User\n"
            }
        },
        "defaults": [
            "minioServer"
        ]
    },
    "types": {
        "minio:index/IlmPolicyRule:IlmPolicyRule": {
            "properties": {
                "expiration": {
                    "type": "string"
                },
                "filter": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "status"
                    ]
                }
            }
        },
        "minio:index/S3BucketNotificationQueue:S3BucketNotificationQueue": {
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filterPrefix": {
                    "type": "string"
                },
                "filterSuffix": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "queueArn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "events",
                "queueArn"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "events",
                        "id",
                        "queueArn"
                    ]
                }
            }
        },
        "minio:index/S3BucketVersioningVersioningConfiguration:S3BucketVersioningVersioningConfiguration": {
            "properties": {
                "excludeFolders": {
                    "type": "boolean"
                },
                "excludedPrefixes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "status"
            ]
        },
        "minio:index/getIamPolicyDocumentStatement:getIamPolicyDocumentStatement": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/minio:index/getIamPolicyDocumentStatementCondition:getIamPolicyDocumentStatementCondition"
                    }
                },
                "effect": {
                    "type": "string"
                },
                "principal": {
                    "type": "string"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sid": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "minio:index/getIamPolicyDocumentStatementCondition:getIamPolicyDocumentStatementCondition": {
            "properties": {
                "test": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "variable": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "test",
                "values",
                "variable"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the minio package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "minioAccessKey": {
                "type": "string",
                "description": "Minio Access Key\n",
                "deprecationMessage": "use minio_user instead"
            },
            "minioApiVersion": {
                "type": "string",
                "description": "Minio API Version (type: string, options: v2 or v4, default: v4)\n"
            },
            "minioCacertFile": {
                "type": "string"
            },
            "minioCertFile": {
                "type": "string"
            },
            "minioInsecure": {
                "type": "boolean",
                "description": "Disable SSL certificate verification (default: false)\n"
            },
            "minioKeyFile": {
                "type": "string"
            },
            "minioPassword": {
                "type": "string",
                "description": "Minio Password\n"
            },
            "minioRegion": {
                "type": "string",
                "description": "Minio Region (default: us-east-1)\n"
            },
            "minioSecretKey": {
                "type": "string",
                "description": "Minio Secret Key\n",
                "deprecationMessage": "use minio_password instead"
            },
            "minioServer": {
                "type": "string",
                "description": "Minio Host and Port\n"
            },
            "minioSessionToken": {
                "type": "string",
                "description": "Minio Session Token\n"
            },
            "minioSsl": {
                "type": "boolean",
                "description": "Minio SSL enabled (default: false)\n"
            },
            "minioUser": {
                "type": "string",
                "description": "Minio User\n"
            }
        },
        "required": [
            "minioServer"
        ],
        "inputProperties": {
            "minioAccessKey": {
                "type": "string",
                "description": "Minio Access Key\n",
                "deprecationMessage": "use minio_user instead"
            },
            "minioApiVersion": {
                "type": "string",
                "description": "Minio API Version (type: string, options: v2 or v4, default: v4)\n"
            },
            "minioCacertFile": {
                "type": "string"
            },
            "minioCertFile": {
                "type": "string"
            },
            "minioInsecure": {
                "type": "boolean",
                "description": "Disable SSL certificate verification (default: false)\n"
            },
            "minioKeyFile": {
                "type": "string"
            },
            "minioPassword": {
                "type": "string",
                "description": "Minio Password\n"
            },
            "minioRegion": {
                "type": "string",
                "description": "Minio Region (default: us-east-1)\n"
            },
            "minioSecretKey": {
                "type": "string",
                "description": "Minio Secret Key\n",
                "deprecationMessage": "use minio_password instead"
            },
            "minioServer": {
                "type": "string",
                "description": "Minio Host and Port\n"
            },
            "minioSessionToken": {
                "type": "string",
                "description": "Minio Session Token\n"
            },
            "minioSsl": {
                "type": "boolean",
                "description": "Minio SSL enabled (default: false)\n"
            },
            "minioUser": {
                "type": "string",
                "description": "Minio User\n"
            }
        },
        "requiredInputs": [
            "minioServer"
        ]
    },
    "resources": {
        "minio:index/iamGroup:IamGroup": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as minio from \"@pulumi/minio\";\n\nconst developer = new minio.IamGroup(\"developer\", {});\nexport const minioUserGroup = developer.groupName;\n```\n```python\nimport pulumi\nimport pulumi_minio as minio\n\ndeveloper = minio.IamGroup(\"developer\")\npulumi.export(\"minioUserGroup\", developer.group_name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Minio = Pulumi.Minio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var developer = new Minio.IamGroup(\"developer\");\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"minioUserGroup\"] = developer.GroupName,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-minio/sdk/go/minio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdeveloper, err := minio.NewIamGroup(ctx, \"developer\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"minioUserGroup\", developer.GroupName)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.minio.IamGroup;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var developer = new IamGroup(\"developer\");\n\n        ctx.export(\"minioUserGroup\", developer.groupName());\n    }\n}\n```\n```yaml\nresources:\n  developer:\n    type: minio:IamGroup\noutputs:\n  minioUserGroup: ${developer.groupName}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "disableGroup": {
                    "type": "boolean",
                    "description": "Disable group\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Delete group even if it has non-Terraform-managed members\n"
                },
                "groupName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "required": [
                "groupName",
                "name"
            ],
            "inputProperties": {
                "disableGroup": {
                    "type": "boolean",
                    "description": "Disable group\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Delete group even if it has non-Terraform-managed members\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamGroup resources.\n",
                "properties": {
                    "disableGroup": {
                        "type": "boolean",
                        "description": "Disable group\n"
                    },
                    "forceDestroy": {
                        "type": "boolean",
                        "description": "Delete group even if it has non-Terraform-managed members\n"
                    },
                    "groupName": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "minio:index/iamGroupMembership:IamGroupMembership": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "Group name to add users\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of group membership\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Add user or list of users such as a group membership\n"
                }
            },
            "required": [
                "group",
                "name",
                "users"
            ],
            "inputProperties": {
                "group": {
                    "type": "string",
                    "description": "Group name to add users\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of group membership\n",
                    "willReplaceOnChanges": true
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Add user or list of users such as a group membership\n"
                }
            },
            "requiredInputs": [
                "group",
                "users"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamGroupMembership resources.\n",
                "properties": {
                    "group": {
                        "type": "string",
                        "description": "Group name to add users\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of group membership\n",
                        "willReplaceOnChanges": true
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Add user or list of users such as a group membership\n"
                    }
                },
                "type": "object"
            }
        },
        "minio:index/iamGroupPolicy:IamGroupPolicy": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as minio from \"@pulumi/minio\";\n\nconst developer = new minio.IamGroup(\"developer\", {});\nconst testPolicy = new minio.IamGroupPolicy(\"testPolicy\", {\n    group: developer.id,\n    policy: `{\n  \"Version\":\"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\":\"ListAllBucket\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:PutObject\"],\n      \"Principal\":\"*\",\n      \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n    }\n  ]\n}\n\n`,\n});\nexport const minioName = minio_iam_group_membership.developer.id;\nexport const minioPolicy = minio_iam_group_membership.developer.policy;\nexport const minioGroup = minio_iam_group_membership.developer.group;\n```\n```python\nimport pulumi\nimport pulumi_minio as minio\n\ndeveloper = minio.IamGroup(\"developer\")\ntest_policy = minio.IamGroupPolicy(\"testPolicy\",\n    group=developer.id,\n    policy=\"\"\"{\n  \"Version\":\"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\":\"ListAllBucket\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:PutObject\"],\n      \"Principal\":\"*\",\n      \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n    }\n  ]\n}\n\n\"\"\")\npulumi.export(\"minioName\", minio_iam_group_membership[\"developer\"][\"id\"])\npulumi.export(\"minioPolicy\", minio_iam_group_membership[\"developer\"][\"policy\"])\npulumi.export(\"minioGroup\", minio_iam_group_membership[\"developer\"][\"group\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Minio = Pulumi.Minio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var developer = new Minio.IamGroup(\"developer\");\n\n    var testPolicy = new Minio.IamGroupPolicy(\"testPolicy\", new()\n    {\n        Group = developer.Id,\n        Policy = @\"{\n  \"\"Version\"\":\"\"2012-10-17\"\",\n  \"\"Statement\"\": [\n    {\n      \"\"Sid\"\":\"\"ListAllBucket\"\",\n      \"\"Effect\"\": \"\"Allow\"\",\n      \"\"Action\"\": [\"\"s3:PutObject\"\"],\n      \"\"Principal\"\":\"\"*\"\",\n      \"\"Resource\"\": \"\"arn:aws:s3:::state-terraform-s3/*\"\"\n    }\n  ]\n}\n\n\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"minioName\"] = minio_iam_group_membership.Developer.Id,\n        [\"minioPolicy\"] = minio_iam_group_membership.Developer.Policy,\n        [\"minioGroup\"] = minio_iam_group_membership.Developer.Group,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-minio/sdk/go/minio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdeveloper, err := minio.NewIamGroup(ctx, \"developer\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = minio.NewIamGroupPolicy(ctx, \"testPolicy\", \u0026minio.IamGroupPolicyArgs{\n\t\t\tGroup: developer.ID(),\n\t\t\tPolicy: pulumi.String(`{\n  \"Version\":\"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\":\"ListAllBucket\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:PutObject\"],\n      \"Principal\":\"*\",\n      \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n    }\n  ]\n}\n\n`),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"minioName\", minio_iam_group_membership.Developer.Id)\n\t\tctx.Export(\"minioPolicy\", minio_iam_group_membership.Developer.Policy)\n\t\tctx.Export(\"minioGroup\", minio_iam_group_membership.Developer.Group)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.minio.IamGroup;\nimport com.pulumi.minio.IamGroupPolicy;\nimport com.pulumi.minio.IamGroupPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var developer = new IamGroup(\"developer\");\n\n        var testPolicy = new IamGroupPolicy(\"testPolicy\", IamGroupPolicyArgs.builder()        \n            .group(developer.id())\n            .policy(\"\"\"\n{\n  \"Version\":\"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\":\"ListAllBucket\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:PutObject\"],\n      \"Principal\":\"*\",\n      \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n    }\n  ]\n}\n\n            \"\"\")\n            .build());\n\n        ctx.export(\"minioName\", minio_iam_group_membership.developer().id());\n        ctx.export(\"minioPolicy\", minio_iam_group_membership.developer().policy());\n        ctx.export(\"minioGroup\", minio_iam_group_membership.developer().group());\n    }\n}\n```\n```yaml\nresources:\n  developer:\n    type: minio:IamGroup\n  testPolicy:\n    type: minio:IamGroupPolicy\n    properties:\n      group: ${developer.id}\n      policy: |+\n        {\n          \"Version\":\"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Sid\":\"ListAllBucket\",\n              \"Effect\": \"Allow\",\n              \"Action\": [\"s3:PutObject\"],\n              \"Principal\":\"*\",\n              \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n            }\n          ]\n        }\n\noutputs:\n  minioName: ${minio_iam_group_membership.developer.id}\n  minioPolicy: ${minio_iam_group_membership.developer.policy}\n  minioGroup: ${minio_iam_group_membership.developer.group}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "group": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namePrefix": {
                    "type": "string"
                },
                "policy": {
                    "type": "string"
                }
            },
            "required": [
                "group",
                "name",
                "policy"
            ],
            "inputProperties": {
                "group": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "namePrefix": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "policy": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "group",
                "policy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamGroupPolicy resources.\n",
                "properties": {
                    "group": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "namePrefix": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "policy": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "minio:index/iamGroupPolicyAttachment:IamGroupPolicyAttachment": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.minio.IamGroup;\nimport com.pulumi.minio.IamGroupPolicy;\nimport com.pulumi.minio.IamGroupPolicyArgs;\nimport com.pulumi.minio.IamGroupPolicyAttachment;\nimport com.pulumi.minio.IamGroupPolicyAttachmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var developerIamGroup = new IamGroup(\"developerIamGroup\");\n\n        var testPolicy = new IamGroupPolicy(\"testPolicy\", IamGroupPolicyArgs.builder()        \n            .policy(\"\"\"\n{\n  \"Version\":\"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\":\"ListAllBucket\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:PutObject\"],\n      \"Principal\":\"*\",\n      \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n    }\n  ]\n}\n            \"\"\")\n            .build());\n\n        var developerIamGroupPolicyAttachment = new IamGroupPolicyAttachment(\"developerIamGroupPolicyAttachment\", IamGroupPolicyAttachmentArgs.builder()        \n            .groupName(minio_iam_group.group().name())\n            .policyName(minio_iam_policy.test_policy().id())\n            .build());\n\n        ctx.export(\"minioName\", developerIamGroupPolicyAttachment.id());\n        ctx.export(\"minioUsers\", developerIamGroupPolicyAttachment.groupName());\n        ctx.export(\"minioGroup\", developerIamGroupPolicyAttachment.policyName());\n        var developerIndex_iamGroupPolicyAttachmentIamGroupPolicyAttachment = new IamGroupPolicyAttachment(\"developerIndex/iamGroupPolicyAttachmentIamGroupPolicyAttachment\", IamGroupPolicyAttachmentArgs.builder()        \n            .userName(\"OU=Unit,DC=example,DC=com\")\n            .policyName(minio_iam_policy.test_policy().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  developerIamGroup:\n    type: minio:IamGroup\n  testPolicy:\n    type: minio:IamGroupPolicy\n    properties:\n      policy: |\n        {\n          \"Version\":\"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Sid\":\"ListAllBucket\",\n              \"Effect\": \"Allow\",\n              \"Action\": [\"s3:PutObject\"],\n              \"Principal\":\"*\",\n              \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n            }\n          ]\n        }\n  developerIamGroupPolicyAttachment:\n    type: minio:IamGroupPolicyAttachment\n    properties:\n      groupName: ${minio_iam_group.group.name}\n      policyName: ${minio_iam_policy.test_policy.id}\n  developerIndex/iamGroupPolicyAttachmentIamGroupPolicyAttachment:\n    type: minio:IamGroupPolicyAttachment\n    properties:\n      userName: OU=Unit,DC=example,DC=com\n      policyName: ${minio_iam_policy.test_policy.id}\noutputs:\n  minioName: ${developerIamGroupPolicyAttachment.id}\n  minioUsers: ${developerIamGroupPolicyAttachment.groupName}\n  minioGroup: ${developerIamGroupPolicyAttachment.policyName} # Example using an LDAP Group instead of a static MinIO group\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "groupName": {
                    "type": "string"
                },
                "policyName": {
                    "type": "string"
                }
            },
            "required": [
                "groupName",
                "policyName"
            ],
            "inputProperties": {
                "groupName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "policyName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "groupName",
                "policyName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamGroupPolicyAttachment resources.\n",
                "properties": {
                    "groupName": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "policyName": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "minio:index/iamGroupUserAttachment:IamGroupUserAttachment": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as minio from \"@pulumi/minio\";\n\nconst developerIamGroup = new minio.IamGroup(\"developerIamGroup\", {});\nconst userOne = new minio.IamUser(\"userOne\", {});\nconst developerIamGroupUserAttachment = new minio.IamGroupUserAttachment(\"developerIamGroupUserAttachment\", {\n    groupName: minio_iam_group.group.name,\n    userName: userOne.name,\n});\nexport const minioName = developerIamGroupUserAttachment.id;\nexport const minioUsers = developerIamGroupUserAttachment.groupName;\nexport const minioGroup = developerIamGroupUserAttachment.userName;\n```\n```python\nimport pulumi\nimport pulumi_minio as minio\n\ndeveloper_iam_group = minio.IamGroup(\"developerIamGroup\")\nuser_one = minio.IamUser(\"userOne\")\ndeveloper_iam_group_user_attachment = minio.IamGroupUserAttachment(\"developerIamGroupUserAttachment\",\n    group_name=minio_iam_group[\"group\"][\"name\"],\n    user_name=user_one.name)\npulumi.export(\"minioName\", developer_iam_group_user_attachment.id)\npulumi.export(\"minioUsers\", developer_iam_group_user_attachment.group_name)\npulumi.export(\"minioGroup\", developer_iam_group_user_attachment.user_name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Minio = Pulumi.Minio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var developerIamGroup = new Minio.IamGroup(\"developerIamGroup\");\n\n    var userOne = new Minio.IamUser(\"userOne\");\n\n    var developerIamGroupUserAttachment = new Minio.IamGroupUserAttachment(\"developerIamGroupUserAttachment\", new()\n    {\n        GroupName = minio_iam_group.Group.Name,\n        UserName = userOne.Name,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"minioName\"] = developerIamGroupUserAttachment.Id,\n        [\"minioUsers\"] = developerIamGroupUserAttachment.GroupName,\n        [\"minioGroup\"] = developerIamGroupUserAttachment.UserName,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-minio/sdk/go/minio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := minio.NewIamGroup(ctx, \"developerIamGroup\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuserOne, err := minio.NewIamUser(ctx, \"userOne\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdeveloperIamGroupUserAttachment, err := minio.NewIamGroupUserAttachment(ctx, \"developerIamGroupUserAttachment\", \u0026minio.IamGroupUserAttachmentArgs{\n\t\t\tGroupName: pulumi.Any(minio_iam_group.Group.Name),\n\t\t\tUserName:  userOne.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"minioName\", developerIamGroupUserAttachment.ID())\n\t\tctx.Export(\"minioUsers\", developerIamGroupUserAttachment.GroupName)\n\t\tctx.Export(\"minioGroup\", developerIamGroupUserAttachment.UserName)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.minio.IamGroup;\nimport com.pulumi.minio.IamUser;\nimport com.pulumi.minio.IamGroupUserAttachment;\nimport com.pulumi.minio.IamGroupUserAttachmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var developerIamGroup = new IamGroup(\"developerIamGroup\");\n\n        var userOne = new IamUser(\"userOne\");\n\n        var developerIamGroupUserAttachment = new IamGroupUserAttachment(\"developerIamGroupUserAttachment\", IamGroupUserAttachmentArgs.builder()        \n            .groupName(minio_iam_group.group().name())\n            .userName(userOne.name())\n            .build());\n\n        ctx.export(\"minioName\", developerIamGroupUserAttachment.id());\n        ctx.export(\"minioUsers\", developerIamGroupUserAttachment.groupName());\n        ctx.export(\"minioGroup\", developerIamGroupUserAttachment.userName());\n    }\n}\n```\n```yaml\nresources:\n  developerIamGroup:\n    type: minio:IamGroup\n  userOne:\n    type: minio:IamUser\n  developerIamGroupUserAttachment:\n    type: minio:IamGroupUserAttachment\n    properties:\n      groupName: ${minio_iam_group.group.name}\n      userName: ${userOne.name}\noutputs:\n  minioName: ${developerIamGroupUserAttachment.id}\n  minioUsers: ${developerIamGroupUserAttachment.groupName}\n  minioGroup: ${developerIamGroupUserAttachment.userName}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "groupName": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            },
            "required": [
                "groupName",
                "userName"
            ],
            "inputProperties": {
                "groupName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "userName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "groupName",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamGroupUserAttachment resources.\n",
                "properties": {
                    "groupName": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "userName": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "minio:index/iamPolicy:IamPolicy": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as minio from \"@pulumi/minio\";\n\nconst testPolicy = new minio.IamPolicy(\"testPolicy\", {policy: `{\n  \"Version\":\"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\":\"ListAllBucket\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:PutObject\"],\n      \"Principal\":\"*\",\n      \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n    }\n  ]\n}\n`});\nexport const minioId = testPolicy.id;\nexport const minioPolicy = testPolicy.policy;\n```\n```python\nimport pulumi\nimport pulumi_minio as minio\n\ntest_policy = minio.IamPolicy(\"testPolicy\", policy=\"\"\"{\n  \"Version\":\"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\":\"ListAllBucket\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:PutObject\"],\n      \"Principal\":\"*\",\n      \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n    }\n  ]\n}\n\"\"\")\npulumi.export(\"minioId\", test_policy.id)\npulumi.export(\"minioPolicy\", test_policy.policy)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Minio = Pulumi.Minio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testPolicy = new Minio.IamPolicy(\"testPolicy\", new()\n    {\n        Policy = @\"{\n  \"\"Version\"\":\"\"2012-10-17\"\",\n  \"\"Statement\"\": [\n    {\n      \"\"Sid\"\":\"\"ListAllBucket\"\",\n      \"\"Effect\"\": \"\"Allow\"\",\n      \"\"Action\"\": [\"\"s3:PutObject\"\"],\n      \"\"Principal\"\":\"\"*\"\",\n      \"\"Resource\"\": \"\"arn:aws:s3:::state-terraform-s3/*\"\"\n    }\n  ]\n}\n\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"minioId\"] = testPolicy.Id,\n        [\"minioPolicy\"] = testPolicy.Policy,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-minio/sdk/go/minio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestPolicy, err := minio.NewIamPolicy(ctx, \"testPolicy\", \u0026minio.IamPolicyArgs{\n\t\t\tPolicy: pulumi.String(`{\n  \"Version\":\"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\":\"ListAllBucket\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:PutObject\"],\n      \"Principal\":\"*\",\n      \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n    }\n  ]\n}\n`),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"minioId\", testPolicy.ID())\n\t\tctx.Export(\"minioPolicy\", testPolicy.Policy)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.minio.IamPolicy;\nimport com.pulumi.minio.IamPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testPolicy = new IamPolicy(\"testPolicy\", IamPolicyArgs.builder()        \n            .policy(\"\"\"\n{\n  \"Version\":\"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\":\"ListAllBucket\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:PutObject\"],\n      \"Principal\":\"*\",\n      \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n    }\n  ]\n}\n            \"\"\")\n            .build());\n\n        ctx.export(\"minioId\", testPolicy.id());\n        ctx.export(\"minioPolicy\", testPolicy.policy());\n    }\n}\n```\n```yaml\nresources:\n  testPolicy:\n    type: minio:IamPolicy\n    properties:\n      policy: |\n        {\n          \"Version\":\"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Sid\":\"ListAllBucket\",\n              \"Effect\": \"Allow\",\n              \"Action\": [\"s3:PutObject\"],\n              \"Principal\":\"*\",\n              \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n            }\n          ]\n        }\noutputs:\n  minioId: ${testPolicy.id}\n  minioPolicy: ${testPolicy.policy}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "name": {
                    "type": "string"
                },
                "namePrefix": {
                    "type": "string"
                },
                "policy": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "policy"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "namePrefix": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "policy": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "policy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamPolicy resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "namePrefix": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "policy": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "minio:index/iamServiceAccount:IamServiceAccount": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as minio from \"@pulumi/minio\";\n\nconst test = new minio.IamUser(\"test\", {\n    forceDestroy: true,\n    tags: {\n        \"tag-key\": \"tag-value\",\n    },\n});\nconst testServiceAccount = new minio.IamServiceAccount(\"testServiceAccount\", {targetUser: test.name});\nexport const minioUser = testServiceAccount.accessKey;\nexport const minioPassword = testServiceAccount.secretKey;\n```\n```python\nimport pulumi\nimport pulumi_minio as minio\n\ntest = minio.IamUser(\"test\",\n    force_destroy=True,\n    tags={\n        \"tag-key\": \"tag-value\",\n    })\ntest_service_account = minio.IamServiceAccount(\"testServiceAccount\", target_user=test.name)\npulumi.export(\"minioUser\", test_service_account.access_key)\npulumi.export(\"minioPassword\", test_service_account.secret_key)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Minio = Pulumi.Minio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Minio.IamUser(\"test\", new()\n    {\n        ForceDestroy = true,\n        Tags = \n        {\n            { \"tag-key\", \"tag-value\" },\n        },\n    });\n\n    var testServiceAccount = new Minio.IamServiceAccount(\"testServiceAccount\", new()\n    {\n        TargetUser = test.Name,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"minioUser\"] = testServiceAccount.AccessKey,\n        [\"minioPassword\"] = testServiceAccount.SecretKey,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-minio/sdk/go/minio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := minio.NewIamUser(ctx, \"test\", \u0026minio.IamUserArgs{\n\t\t\tForceDestroy: pulumi.Bool(true),\n\t\t\tTags: pulumi.Map{\n\t\t\t\t\"tag-key\": pulumi.Any(\"tag-value\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestServiceAccount, err := minio.NewIamServiceAccount(ctx, \"testServiceAccount\", \u0026minio.IamServiceAccountArgs{\n\t\t\tTargetUser: test.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"minioUser\", testServiceAccount.AccessKey)\n\t\tctx.Export(\"minioPassword\", testServiceAccount.SecretKey)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.minio.IamUser;\nimport com.pulumi.minio.IamUserArgs;\nimport com.pulumi.minio.IamServiceAccount;\nimport com.pulumi.minio.IamServiceAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new IamUser(\"test\", IamUserArgs.builder()        \n            .forceDestroy(true)\n            .tags(Map.of(\"tag-key\", \"tag-value\"))\n            .build());\n\n        var testServiceAccount = new IamServiceAccount(\"testServiceAccount\", IamServiceAccountArgs.builder()        \n            .targetUser(test.name())\n            .build());\n\n        ctx.export(\"minioUser\", testServiceAccount.accessKey());\n        ctx.export(\"minioPassword\", testServiceAccount.secretKey());\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: minio:IamUser\n    properties:\n      forceDestroy: true\n      tags:\n        tag-key: tag-value\n  testServiceAccount:\n    type: minio:IamServiceAccount\n    properties:\n      targetUser: ${test.name}\noutputs:\n  minioUser: ${testServiceAccount.accessKey}\n  minioPassword: ${testServiceAccount.secretKey}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accessKey": {
                    "type": "string"
                },
                "disableUser": {
                    "type": "boolean",
                    "description": "Disable service account\n"
                },
                "policy": {
                    "type": "string",
                    "description": "policy of service account\n"
                },
                "secretKey": {
                    "type": "string",
                    "secret": true
                },
                "status": {
                    "type": "string"
                },
                "targetUser": {
                    "type": "string"
                },
                "updateSecret": {
                    "type": "boolean",
                    "description": "rotate secret key\n"
                }
            },
            "required": [
                "accessKey",
                "secretKey",
                "status",
                "targetUser"
            ],
            "inputProperties": {
                "disableUser": {
                    "type": "boolean",
                    "description": "Disable service account\n"
                },
                "policy": {
                    "type": "string",
                    "description": "policy of service account\n"
                },
                "targetUser": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "updateSecret": {
                    "type": "boolean",
                    "description": "rotate secret key\n"
                }
            },
            "requiredInputs": [
                "targetUser"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamServiceAccount resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string"
                    },
                    "disableUser": {
                        "type": "boolean",
                        "description": "Disable service account\n"
                    },
                    "policy": {
                        "type": "string",
                        "description": "policy of service account\n"
                    },
                    "secretKey": {
                        "type": "string",
                        "secret": true
                    },
                    "status": {
                        "type": "string"
                    },
                    "targetUser": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "updateSecret": {
                        "type": "boolean",
                        "description": "rotate secret key\n"
                    }
                },
                "type": "object"
            }
        },
        "minio:index/iamUser:IamUser": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as minio from \"@pulumi/minio\";\n\nconst testIamUser = new minio.IamUser(\"testIamUser\", {\n    forceDestroy: true,\n    tags: {\n        \"tag-key\": \"tag-value\",\n    },\n});\nexport const test = testIamUser.id;\nexport const status = testIamUser.status;\nexport const secret = testIamUser.secret;\n```\n```python\nimport pulumi\nimport pulumi_minio as minio\n\ntest_iam_user = minio.IamUser(\"testIamUser\",\n    force_destroy=True,\n    tags={\n        \"tag-key\": \"tag-value\",\n    })\npulumi.export(\"test\", test_iam_user.id)\npulumi.export(\"status\", test_iam_user.status)\npulumi.export(\"secret\", test_iam_user.secret)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Minio = Pulumi.Minio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testIamUser = new Minio.IamUser(\"testIamUser\", new()\n    {\n        ForceDestroy = true,\n        Tags = \n        {\n            { \"tag-key\", \"tag-value\" },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"test\"] = testIamUser.Id,\n        [\"status\"] = testIamUser.Status,\n        [\"secret\"] = testIamUser.Secret,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-minio/sdk/go/minio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestIamUser, err := minio.NewIamUser(ctx, \"testIamUser\", \u0026minio.IamUserArgs{\n\t\t\tForceDestroy: pulumi.Bool(true),\n\t\t\tTags: pulumi.Map{\n\t\t\t\t\"tag-key\": pulumi.Any(\"tag-value\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"test\", testIamUser.ID())\n\t\tctx.Export(\"status\", testIamUser.Status)\n\t\tctx.Export(\"secret\", testIamUser.Secret)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.minio.IamUser;\nimport com.pulumi.minio.IamUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testIamUser = new IamUser(\"testIamUser\", IamUserArgs.builder()        \n            .forceDestroy(true)\n            .tags(Map.of(\"tag-key\", \"tag-value\"))\n            .build());\n\n        ctx.export(\"test\", testIamUser.id());\n        ctx.export(\"status\", testIamUser.status());\n        ctx.export(\"secret\", testIamUser.secret());\n    }\n}\n```\n```yaml\nresources:\n  testIamUser:\n    type: minio:IamUser\n    properties:\n      forceDestroy: true\n      tags:\n        tag-key: tag-value\noutputs:\n  test: ${testIamUser.id}\n  status: ${testIamUser.status}\n  secret: ${testIamUser.secret}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "disableUser": {
                    "type": "boolean",
                    "description": "Disable user\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Delete user even if it has non-Terraform-managed IAM access keys\n"
                },
                "name": {
                    "type": "string"
                },
                "secret": {
                    "type": "string",
                    "secret": true
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "updateSecret": {
                    "type": "boolean",
                    "description": "Rotate Minio User Secret Key\n"
                }
            },
            "required": [
                "name",
                "secret",
                "status"
            ],
            "inputProperties": {
                "disableUser": {
                    "type": "boolean",
                    "description": "Disable user\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Delete user even if it has non-Terraform-managed IAM access keys\n"
                },
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "secret": {
                    "type": "string",
                    "secret": true
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "updateSecret": {
                    "type": "boolean",
                    "description": "Rotate Minio User Secret Key\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamUser resources.\n",
                "properties": {
                    "disableUser": {
                        "type": "boolean",
                        "description": "Disable user\n"
                    },
                    "forceDestroy": {
                        "type": "boolean",
                        "description": "Delete user even if it has non-Terraform-managed IAM access keys\n"
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "secret": {
                        "type": "string",
                        "secret": true
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "updateSecret": {
                        "type": "boolean",
                        "description": "Rotate Minio User Secret Key\n"
                    }
                },
                "type": "object"
            }
        },
        "minio:index/iamUserPolicyAttachment:IamUserPolicyAttachment": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as minio from \"@pulumi/minio\";\n\nconst testUser = new minio.IamUser(\"testUser\", {});\nconst testPolicy = new minio.IamPolicy(\"testPolicy\", {policy: `{\n  \"Version\":\"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\":\"ListAllBucket\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:PutObject\"],\n      \"Principal\":\"*\",\n      \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n    }\n  ]\n}\n`});\nconst developerIamUserPolicyAttachment = new minio.IamUserPolicyAttachment(\"developerIamUserPolicyAttachment\", {\n    userName: testUser.id,\n    policyName: testPolicy.id,\n});\nexport const minioName = developerIamUserPolicyAttachment.id;\nexport const minioUsers = developerIamUserPolicyAttachment.userName;\nexport const minioGroup = developerIamUserPolicyAttachment.policyName;\nconst developerIndex_iamUserPolicyAttachmentIamUserPolicyAttachment = new minio.IamUserPolicyAttachment(\"developerIndex/iamUserPolicyAttachmentIamUserPolicyAttachment\", {\n    userName: \"CN=My User,OU=Unit,DC=example,DC=com\",\n    policyName: testPolicy.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_minio as minio\n\ntest_user = minio.IamUser(\"testUser\")\ntest_policy = minio.IamPolicy(\"testPolicy\", policy=\"\"\"{\n  \"Version\":\"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\":\"ListAllBucket\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:PutObject\"],\n      \"Principal\":\"*\",\n      \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n    }\n  ]\n}\n\"\"\")\ndeveloper_iam_user_policy_attachment = minio.IamUserPolicyAttachment(\"developerIamUserPolicyAttachment\",\n    user_name=test_user.id,\n    policy_name=test_policy.id)\npulumi.export(\"minioName\", developer_iam_user_policy_attachment.id)\npulumi.export(\"minioUsers\", developer_iam_user_policy_attachment.user_name)\npulumi.export(\"minioGroup\", developer_iam_user_policy_attachment.policy_name)\ndeveloper_index_iam_user_policy_attachment_iam_user_policy_attachment = minio.IamUserPolicyAttachment(\"developerIndex/iamUserPolicyAttachmentIamUserPolicyAttachment\",\n    user_name=\"CN=My User,OU=Unit,DC=example,DC=com\",\n    policy_name=test_policy.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Minio = Pulumi.Minio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testUser = new Minio.IamUser(\"testUser\");\n\n    var testPolicy = new Minio.IamPolicy(\"testPolicy\", new()\n    {\n        Policy = @\"{\n  \"\"Version\"\":\"\"2012-10-17\"\",\n  \"\"Statement\"\": [\n    {\n      \"\"Sid\"\":\"\"ListAllBucket\"\",\n      \"\"Effect\"\": \"\"Allow\"\",\n      \"\"Action\"\": [\"\"s3:PutObject\"\"],\n      \"\"Principal\"\":\"\"*\"\",\n      \"\"Resource\"\": \"\"arn:aws:s3:::state-terraform-s3/*\"\"\n    }\n  ]\n}\n\",\n    });\n\n    var developerIamUserPolicyAttachment = new Minio.IamUserPolicyAttachment(\"developerIamUserPolicyAttachment\", new()\n    {\n        UserName = testUser.Id,\n        PolicyName = testPolicy.Id,\n    });\n\n    var developerIndex_iamUserPolicyAttachmentIamUserPolicyAttachment = new Minio.IamUserPolicyAttachment(\"developerIndex/iamUserPolicyAttachmentIamUserPolicyAttachment\", new()\n    {\n        UserName = \"CN=My User,OU=Unit,DC=example,DC=com\",\n        PolicyName = testPolicy.Id,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"minioName\"] = developerIamUserPolicyAttachment.Id,\n        [\"minioUsers\"] = developerIamUserPolicyAttachment.UserName,\n        [\"minioGroup\"] = developerIamUserPolicyAttachment.PolicyName,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-minio/sdk/go/minio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestUser, err := minio.NewIamUser(ctx, \"testUser\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestPolicy, err := minio.NewIamPolicy(ctx, \"testPolicy\", \u0026minio.IamPolicyArgs{\n\t\t\tPolicy: pulumi.String(`{\n  \"Version\":\"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\":\"ListAllBucket\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:PutObject\"],\n      \"Principal\":\"*\",\n      \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n    }\n  ]\n}\n`),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdeveloperIamUserPolicyAttachment, err := minio.NewIamUserPolicyAttachment(ctx, \"developerIamUserPolicyAttachment\", \u0026minio.IamUserPolicyAttachmentArgs{\n\t\t\tUserName:   testUser.ID(),\n\t\t\tPolicyName: testPolicy.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"minioName\", developerIamUserPolicyAttachment.ID())\n\t\tctx.Export(\"minioUsers\", developerIamUserPolicyAttachment.UserName)\n\t\tctx.Export(\"minioGroup\", developerIamUserPolicyAttachment.PolicyName)\n\t\t_, err = minio.NewIamUserPolicyAttachment(ctx, \"developerIndex/iamUserPolicyAttachmentIamUserPolicyAttachment\", \u0026minio.IamUserPolicyAttachmentArgs{\n\t\t\tUserName:   pulumi.String(\"CN=My User,OU=Unit,DC=example,DC=com\"),\n\t\t\tPolicyName: testPolicy.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.minio.IamUser;\nimport com.pulumi.minio.IamPolicy;\nimport com.pulumi.minio.IamPolicyArgs;\nimport com.pulumi.minio.IamUserPolicyAttachment;\nimport com.pulumi.minio.IamUserPolicyAttachmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testUser = new IamUser(\"testUser\");\n\n        var testPolicy = new IamPolicy(\"testPolicy\", IamPolicyArgs.builder()        \n            .policy(\"\"\"\n{\n  \"Version\":\"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\":\"ListAllBucket\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:PutObject\"],\n      \"Principal\":\"*\",\n      \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n    }\n  ]\n}\n            \"\"\")\n            .build());\n\n        var developerIamUserPolicyAttachment = new IamUserPolicyAttachment(\"developerIamUserPolicyAttachment\", IamUserPolicyAttachmentArgs.builder()        \n            .userName(testUser.id())\n            .policyName(testPolicy.id())\n            .build());\n\n        ctx.export(\"minioName\", developerIamUserPolicyAttachment.id());\n        ctx.export(\"minioUsers\", developerIamUserPolicyAttachment.userName());\n        ctx.export(\"minioGroup\", developerIamUserPolicyAttachment.policyName());\n        var developerIndex_iamUserPolicyAttachmentIamUserPolicyAttachment = new IamUserPolicyAttachment(\"developerIndex/iamUserPolicyAttachmentIamUserPolicyAttachment\", IamUserPolicyAttachmentArgs.builder()        \n            .userName(\"CN=My User,OU=Unit,DC=example,DC=com\")\n            .policyName(testPolicy.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testUser:\n    type: minio:IamUser\n  testPolicy:\n    type: minio:IamPolicy\n    properties:\n      policy: |\n        {\n          \"Version\":\"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Sid\":\"ListAllBucket\",\n              \"Effect\": \"Allow\",\n              \"Action\": [\"s3:PutObject\"],\n              \"Principal\":\"*\",\n              \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n            }\n          ]\n        }\n  developerIamUserPolicyAttachment:\n    type: minio:IamUserPolicyAttachment\n    properties:\n      userName: ${testUser.id}\n      policyName: ${testPolicy.id}\n  developerIndex/iamUserPolicyAttachmentIamUserPolicyAttachment:\n    type: minio:IamUserPolicyAttachment\n    properties:\n      userName: CN=My User,OU=Unit,DC=example,DC=com\n      policyName: ${testPolicy.id}\noutputs:\n  minioName: ${developerIamUserPolicyAttachment.id}\n  minioUsers: ${developerIamUserPolicyAttachment.userName}\n  minioGroup: ${developerIamUserPolicyAttachment.policyName} # Example using an LDAP User instead of a static MinIO group\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "policyName": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            },
            "required": [
                "policyName",
                "userName"
            ],
            "inputProperties": {
                "policyName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "userName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "policyName",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamUserPolicyAttachment resources.\n",
                "properties": {
                    "policyName": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "userName": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "minio:index/ilmPolicy:IlmPolicy": {
            "description": "`minio.IlmPolicy` handles lifecycle settings for a given `minio.S3Bucket`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as minio from \"@pulumi/minio\";\n\nconst bucket = new minio.S3Bucket(\"bucket\", {bucket: \"bucket\"});\nconst bucket_lifecycle_rules = new minio.IlmPolicy(\"bucket-lifecycle-rules\", {\n    bucket: bucket.bucket,\n    rules: [{\n        id: \"expire-7d\",\n        expiration: \"7d\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_minio as minio\n\nbucket = minio.S3Bucket(\"bucket\", bucket=\"bucket\")\nbucket_lifecycle_rules = minio.IlmPolicy(\"bucket-lifecycle-rules\",\n    bucket=bucket.bucket,\n    rules=[minio.IlmPolicyRuleArgs(\n        id=\"expire-7d\",\n        expiration=\"7d\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Minio = Pulumi.Minio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var bucket = new Minio.S3Bucket(\"bucket\", new()\n    {\n        Bucket = \"bucket\",\n    });\n\n    var bucket_lifecycle_rules = new Minio.IlmPolicy(\"bucket-lifecycle-rules\", new()\n    {\n        Bucket = bucket.Bucket,\n        Rules = new[]\n        {\n            new Minio.Inputs.IlmPolicyRuleArgs\n            {\n                Id = \"expire-7d\",\n                Expiration = \"7d\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-minio/sdk/go/minio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tbucket, err := minio.NewS3Bucket(ctx, \"bucket\", \u0026minio.S3BucketArgs{\n\t\t\tBucket: pulumi.String(\"bucket\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = minio.NewIlmPolicy(ctx, \"bucket-lifecycle-rules\", \u0026minio.IlmPolicyArgs{\n\t\t\tBucket: bucket.Bucket,\n\t\t\tRules: minio.IlmPolicyRuleArray{\n\t\t\t\t\u0026minio.IlmPolicyRuleArgs{\n\t\t\t\t\tId:         pulumi.String(\"expire-7d\"),\n\t\t\t\t\tExpiration: pulumi.String(\"7d\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.minio.S3Bucket;\nimport com.pulumi.minio.S3BucketArgs;\nimport com.pulumi.minio.IlmPolicy;\nimport com.pulumi.minio.IlmPolicyArgs;\nimport com.pulumi.minio.inputs.IlmPolicyRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var bucket = new S3Bucket(\"bucket\", S3BucketArgs.builder()        \n            .bucket(\"bucket\")\n            .build());\n\n        var bucket_lifecycle_rules = new IlmPolicy(\"bucket-lifecycle-rules\", IlmPolicyArgs.builder()        \n            .bucket(bucket.bucket())\n            .rules(IlmPolicyRuleArgs.builder()\n                .id(\"expire-7d\")\n                .expiration(\"7d\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  bucket:\n    type: minio:S3Bucket\n    properties:\n      bucket: bucket\n  bucket-lifecycle-rules:\n    type: minio:IlmPolicy\n    properties:\n      bucket: ${bucket.bucket}\n      rules:\n        - id: expire-7d\n          expiration: 7d\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "bucket": {
                    "type": "string"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/minio:index/IlmPolicyRule:IlmPolicyRule"
                    }
                }
            },
            "required": [
                "bucket",
                "rules"
            ],
            "inputProperties": {
                "bucket": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/minio:index/IlmPolicyRule:IlmPolicyRule"
                    }
                }
            },
            "requiredInputs": [
                "bucket",
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IlmPolicy resources.\n",
                "properties": {
                    "bucket": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/minio:index/IlmPolicyRule:IlmPolicyRule"
                        }
                    }
                },
                "type": "object"
            }
        },
        "minio:index/kmsKey:KmsKey": {
            "properties": {
                "keyId": {
                    "type": "string"
                }
            },
            "required": [
                "keyId"
            ],
            "inputProperties": {
                "keyId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "keyId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KmsKey resources.\n",
                "properties": {
                    "keyId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "minio:index/s3Bucket:S3Bucket": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as minio from \"@pulumi/minio\";\n\nconst stateTerraformS3 = new minio.S3Bucket(\"stateTerraformS3\", {\n    acl: \"public\",\n    bucket: \"state-terraform-s3\",\n});\nexport const minioId = stateTerraformS3.id;\nexport const minioUrl = stateTerraformS3.bucketDomainName;\n```\n```python\nimport pulumi\nimport pulumi_minio as minio\n\nstate_terraform_s3 = minio.S3Bucket(\"stateTerraformS3\",\n    acl=\"public\",\n    bucket=\"state-terraform-s3\")\npulumi.export(\"minioId\", state_terraform_s3.id)\npulumi.export(\"minioUrl\", state_terraform_s3.bucket_domain_name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Minio = Pulumi.Minio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var stateTerraformS3 = new Minio.S3Bucket(\"stateTerraformS3\", new()\n    {\n        Acl = \"public\",\n        Bucket = \"state-terraform-s3\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"minioId\"] = stateTerraformS3.Id,\n        [\"minioUrl\"] = stateTerraformS3.BucketDomainName,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-minio/sdk/go/minio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tstateTerraformS3, err := minio.NewS3Bucket(ctx, \"stateTerraformS3\", \u0026minio.S3BucketArgs{\n\t\t\tAcl:    pulumi.String(\"public\"),\n\t\t\tBucket: pulumi.String(\"state-terraform-s3\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"minioId\", stateTerraformS3.ID())\n\t\tctx.Export(\"minioUrl\", stateTerraformS3.BucketDomainName)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.minio.S3Bucket;\nimport com.pulumi.minio.S3BucketArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var stateTerraformS3 = new S3Bucket(\"stateTerraformS3\", S3BucketArgs.builder()        \n            .acl(\"public\")\n            .bucket(\"state-terraform-s3\")\n            .build());\n\n        ctx.export(\"minioId\", stateTerraformS3.id());\n        ctx.export(\"minioUrl\", stateTerraformS3.bucketDomainName());\n    }\n}\n```\n```yaml\nresources:\n  stateTerraformS3:\n    type: minio:S3Bucket\n    properties:\n      acl: public\n      bucket: state-terraform-s3\noutputs:\n  minioId: ${stateTerraformS3.id}\n  minioUrl: ${stateTerraformS3.bucketDomainName}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "acl": {
                    "type": "string"
                },
                "arn": {
                    "type": "string"
                },
                "bucket": {
                    "type": "string"
                },
                "bucketDomainName": {
                    "type": "string"
                },
                "bucketPrefix": {
                    "type": "string"
                },
                "forceDestroy": {
                    "type": "boolean"
                },
                "objectLocking": {
                    "type": "boolean"
                },
                "quota": {
                    "type": "integer"
                }
            },
            "required": [
                "arn",
                "bucket",
                "bucketDomainName"
            ],
            "inputProperties": {
                "acl": {
                    "type": "string"
                },
                "bucket": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "bucketPrefix": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "forceDestroy": {
                    "type": "boolean"
                },
                "objectLocking": {
                    "type": "boolean"
                },
                "quota": {
                    "type": "integer"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering S3Bucket resources.\n",
                "properties": {
                    "acl": {
                        "type": "string"
                    },
                    "arn": {
                        "type": "string"
                    },
                    "bucket": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "bucketDomainName": {
                        "type": "string"
                    },
                    "bucketPrefix": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "forceDestroy": {
                        "type": "boolean"
                    },
                    "objectLocking": {
                        "type": "boolean"
                    },
                    "quota": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "minio:index/s3BucketNotification:S3BucketNotification": {
            "properties": {
                "bucket": {
                    "type": "string"
                },
                "queues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/minio:index/S3BucketNotificationQueue:S3BucketNotificationQueue"
                    }
                }
            },
            "required": [
                "bucket"
            ],
            "inputProperties": {
                "bucket": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "queues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/minio:index/S3BucketNotificationQueue:S3BucketNotificationQueue"
                    }
                }
            },
            "requiredInputs": [
                "bucket"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering S3BucketNotification resources.\n",
                "properties": {
                    "bucket": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "queues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/minio:index/S3BucketNotificationQueue:S3BucketNotificationQueue"
                        }
                    }
                },
                "type": "object"
            }
        },
        "minio:index/s3BucketPolicy:S3BucketPolicy": {
            "properties": {
                "bucket": {
                    "type": "string"
                },
                "policy": {
                    "type": "string"
                }
            },
            "required": [
                "bucket",
                "policy"
            ],
            "inputProperties": {
                "bucket": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "policy": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "bucket",
                "policy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering S3BucketPolicy resources.\n",
                "properties": {
                    "bucket": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "policy": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "minio:index/s3BucketServerSideEncryption:S3BucketServerSideEncryption": {
            "properties": {
                "bucket": {
                    "type": "string"
                },
                "encryptionType": {
                    "type": "string"
                },
                "kmsKeyId": {
                    "type": "string"
                }
            },
            "required": [
                "bucket",
                "encryptionType",
                "kmsKeyId"
            ],
            "inputProperties": {
                "bucket": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "encryptionType": {
                    "type": "string"
                },
                "kmsKeyId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "bucket",
                "encryptionType",
                "kmsKeyId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering S3BucketServerSideEncryption resources.\n",
                "properties": {
                    "bucket": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "encryptionType": {
                        "type": "string"
                    },
                    "kmsKeyId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "minio:index/s3BucketVersioning:S3BucketVersioning": {
            "properties": {
                "bucket": {
                    "type": "string"
                },
                "versioningConfiguration": {
                    "$ref": "#/types/minio:index/S3BucketVersioningVersioningConfiguration:S3BucketVersioningVersioningConfiguration"
                }
            },
            "required": [
                "bucket",
                "versioningConfiguration"
            ],
            "inputProperties": {
                "bucket": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "versioningConfiguration": {
                    "$ref": "#/types/minio:index/S3BucketVersioningVersioningConfiguration:S3BucketVersioningVersioningConfiguration"
                }
            },
            "requiredInputs": [
                "bucket",
                "versioningConfiguration"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering S3BucketVersioning resources.\n",
                "properties": {
                    "bucket": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "versioningConfiguration": {
                        "$ref": "#/types/minio:index/S3BucketVersioningVersioningConfiguration:S3BucketVersioningVersioningConfiguration"
                    }
                },
                "type": "object"
            }
        },
        "minio:index/s3Object:S3Object": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as minio from \"@pulumi/minio\";\n\nconst stateTerraformS3 = new minio.S3Bucket(\"stateTerraformS3\", {\n    bucket: \"state-terraform-s3\",\n    acl: \"public\",\n});\nconst txtFile = new minio.S3Object(\"txtFile\", {\n    bucketName: stateTerraformS3.bucket,\n    objectName: \"text.txt\",\n    content: \"Lorem ipsum dolor sit amet.\",\n    contentType: \"text/plain\",\n}, {\n    dependsOn: [stateTerraformS3],\n});\nexport const minioId = txtFile.id;\n```\n```python\nimport pulumi\nimport pulumi_minio as minio\n\nstate_terraform_s3 = minio.S3Bucket(\"stateTerraformS3\",\n    bucket=\"state-terraform-s3\",\n    acl=\"public\")\ntxt_file = minio.S3Object(\"txtFile\",\n    bucket_name=state_terraform_s3.bucket,\n    object_name=\"text.txt\",\n    content=\"Lorem ipsum dolor sit amet.\",\n    content_type=\"text/plain\",\n    opts=pulumi.ResourceOptions(depends_on=[state_terraform_s3]))\npulumi.export(\"minioId\", txt_file.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Minio = Pulumi.Minio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var stateTerraformS3 = new Minio.S3Bucket(\"stateTerraformS3\", new()\n    {\n        Bucket = \"state-terraform-s3\",\n        Acl = \"public\",\n    });\n\n    var txtFile = new Minio.S3Object(\"txtFile\", new()\n    {\n        BucketName = stateTerraformS3.Bucket,\n        ObjectName = \"text.txt\",\n        Content = \"Lorem ipsum dolor sit amet.\",\n        ContentType = \"text/plain\",\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            stateTerraformS3,\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"minioId\"] = txtFile.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-minio/sdk/go/minio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tstateTerraformS3, err := minio.NewS3Bucket(ctx, \"stateTerraformS3\", \u0026minio.S3BucketArgs{\n\t\t\tBucket: pulumi.String(\"state-terraform-s3\"),\n\t\t\tAcl:    pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttxtFile, err := minio.NewS3Object(ctx, \"txtFile\", \u0026minio.S3ObjectArgs{\n\t\t\tBucketName:  stateTerraformS3.Bucket,\n\t\t\tObjectName:  pulumi.String(\"text.txt\"),\n\t\t\tContent:     pulumi.String(\"Lorem ipsum dolor sit amet.\"),\n\t\t\tContentType: pulumi.String(\"text/plain\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tstateTerraformS3,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"minioId\", txtFile.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.minio.S3Bucket;\nimport com.pulumi.minio.S3BucketArgs;\nimport com.pulumi.minio.S3Object;\nimport com.pulumi.minio.S3ObjectArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var stateTerraformS3 = new S3Bucket(\"stateTerraformS3\", S3BucketArgs.builder()        \n            .bucket(\"state-terraform-s3\")\n            .acl(\"public\")\n            .build());\n\n        var txtFile = new S3Object(\"txtFile\", S3ObjectArgs.builder()        \n            .bucketName(stateTerraformS3.bucket())\n            .objectName(\"text.txt\")\n            .content(\"Lorem ipsum dolor sit amet.\")\n            .contentType(\"text/plain\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(stateTerraformS3)\n                .build());\n\n        ctx.export(\"minioId\", txtFile.id());\n    }\n}\n```\n```yaml\nresources:\n  stateTerraformS3:\n    type: minio:S3Bucket\n    properties:\n      bucket: state-terraform-s3\n      acl: public\n  txtFile:\n    type: minio:S3Object\n    properties:\n      bucketName: ${stateTerraformS3.bucket}\n      objectName: text.txt\n      content: Lorem ipsum dolor sit amet.\n      contentType: text/plain\n    options:\n      dependson:\n        - ${stateTerraformS3}\noutputs:\n  minioId: ${txtFile.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "bucketName": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "contentBase64": {
                    "type": "string"
                },
                "contentType": {
                    "type": "string"
                },
                "etag": {
                    "type": "string"
                },
                "objectName": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "versionId": {
                    "type": "string"
                }
            },
            "required": [
                "bucketName",
                "contentType",
                "etag",
                "objectName",
                "versionId"
            ],
            "inputProperties": {
                "bucketName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "content": {
                    "type": "string"
                },
                "contentBase64": {
                    "type": "string"
                },
                "contentType": {
                    "type": "string"
                },
                "etag": {
                    "type": "string"
                },
                "objectName": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "source": {
                    "type": "string"
                },
                "versionId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "bucketName",
                "objectName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering S3Object resources.\n",
                "properties": {
                    "bucketName": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "content": {
                        "type": "string"
                    },
                    "contentBase64": {
                        "type": "string"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "objectName": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "source": {
                        "type": "string"
                    },
                    "versionId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "minio:index/getIamPolicyDocument:getIamPolicyDocument": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as minio from \"@pulumi/minio\";\n\nconst example = minio.getIamPolicyDocument({\n    statements: [\n        {\n            sid: \"1\",\n            actions: [\n                \"s3:ListAllMyBuckets\",\n                \"s3:GetBucketLocation\",\n            ],\n            resources: [\"arn:aws:s3:::*\"],\n        },\n        {\n            actions: [\"s3:ListBucket\"],\n            resources: [\"arn:aws:s3:::state-terraform-s3\"],\n            conditions: [{\n                test: \"StringLike\",\n                variable: \"s3:prefix\",\n                values: [\n                    \"\",\n                    \"home/\",\n                ],\n            }],\n        },\n        {\n            actions: [\"s3:PutObject\"],\n            resources: [\n                \"arn:aws:s3:::state-terraform-s3\",\n                \"arn:aws:s3:::state-terraform-s3/*\",\n            ],\n        },\n    ],\n});\nconst testPolicy = new minio.IamPolicy(\"testPolicy\", {policy: example.then(example =\u003e example.json)});\n```\n```python\nimport pulumi\nimport pulumi_minio as minio\n\nexample = minio.get_iam_policy_document(statements=[\n    minio.GetIamPolicyDocumentStatementArgs(\n        sid=\"1\",\n        actions=[\n            \"s3:ListAllMyBuckets\",\n            \"s3:GetBucketLocation\",\n        ],\n        resources=[\"arn:aws:s3:::*\"],\n    ),\n    minio.GetIamPolicyDocumentStatementArgs(\n        actions=[\"s3:ListBucket\"],\n        resources=[\"arn:aws:s3:::state-terraform-s3\"],\n        conditions=[minio.GetIamPolicyDocumentStatementConditionArgs(\n            test=\"StringLike\",\n            variable=\"s3:prefix\",\n            values=[\n                \"\",\n                \"home/\",\n            ],\n        )],\n    ),\n    minio.GetIamPolicyDocumentStatementArgs(\n        actions=[\"s3:PutObject\"],\n        resources=[\n            \"arn:aws:s3:::state-terraform-s3\",\n            \"arn:aws:s3:::state-terraform-s3/*\",\n        ],\n    ),\n])\ntest_policy = minio.IamPolicy(\"testPolicy\", policy=example.json)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Minio = Pulumi.Minio;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Minio.GetIamPolicyDocument.Invoke(new()\n    {\n        Statements = new[]\n        {\n            new Minio.Inputs.GetIamPolicyDocumentStatementInputArgs\n            {\n                Sid = \"1\",\n                Actions = new[]\n                {\n                    \"s3:ListAllMyBuckets\",\n                    \"s3:GetBucketLocation\",\n                },\n                Resources = new[]\n                {\n                    \"arn:aws:s3:::*\",\n                },\n            },\n            new Minio.Inputs.GetIamPolicyDocumentStatementInputArgs\n            {\n                Actions = new[]\n                {\n                    \"s3:ListBucket\",\n                },\n                Resources = new[]\n                {\n                    \"arn:aws:s3:::state-terraform-s3\",\n                },\n                Conditions = new[]\n                {\n                    new Minio.Inputs.GetIamPolicyDocumentStatementConditionInputArgs\n                    {\n                        Test = \"StringLike\",\n                        Variable = \"s3:prefix\",\n                        Values = new[]\n                        {\n                            \"\",\n                            \"home/\",\n                        },\n                    },\n                },\n            },\n            new Minio.Inputs.GetIamPolicyDocumentStatementInputArgs\n            {\n                Actions = new[]\n                {\n                    \"s3:PutObject\",\n                },\n                Resources = new[]\n                {\n                    \"arn:aws:s3:::state-terraform-s3\",\n                    \"arn:aws:s3:::state-terraform-s3/*\",\n                },\n            },\n        },\n    });\n\n    var testPolicy = new Minio.IamPolicy(\"testPolicy\", new()\n    {\n        Policy = example.Apply(getIamPolicyDocumentResult =\u003e getIamPolicyDocumentResult.Json),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-minio/sdk/go/minio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := minio.GetIamPolicyDocument(ctx, \u0026minio.GetIamPolicyDocumentArgs{\n\t\t\tStatements: pulumi.Array{\n\t\t\t\tminio.GetIamPolicyDocumentStatement{\n\t\t\t\t\tSid: pulumi.StringRef(\"1\"),\n\t\t\t\t\tActions: []string{\n\t\t\t\t\t\t\"s3:ListAllMyBuckets\",\n\t\t\t\t\t\t\"s3:GetBucketLocation\",\n\t\t\t\t\t},\n\t\t\t\t\tResources: []string{\n\t\t\t\t\t\t\"arn:aws:s3:::*\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tminio.GetIamPolicyDocumentStatement{\n\t\t\t\t\tActions: []string{\n\t\t\t\t\t\t\"s3:ListBucket\",\n\t\t\t\t\t},\n\t\t\t\t\tResources: []string{\n\t\t\t\t\t\t\"arn:aws:s3:::state-terraform-s3\",\n\t\t\t\t\t},\n\t\t\t\t\tConditions: []minio.GetIamPolicyDocumentStatementCondition{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tTest:     \"StringLike\",\n\t\t\t\t\t\t\tVariable: \"s3:prefix\",\n\t\t\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t\"home/\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tminio.GetIamPolicyDocumentStatement{\n\t\t\t\t\tActions: []string{\n\t\t\t\t\t\t\"s3:PutObject\",\n\t\t\t\t\t},\n\t\t\t\t\tResources: []string{\n\t\t\t\t\t\t\"arn:aws:s3:::state-terraform-s3\",\n\t\t\t\t\t\t\"arn:aws:s3:::state-terraform-s3/*\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = minio.NewIamPolicy(ctx, \"testPolicy\", \u0026minio.IamPolicyArgs{\n\t\t\tPolicy: *pulumi.String(example.Json),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.minio.MinioFunctions;\nimport com.pulumi.minio.inputs.GetIamPolicyDocumentArgs;\nimport com.pulumi.minio.IamPolicy;\nimport com.pulumi.minio.IamPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MinioFunctions.getIamPolicyDocument(GetIamPolicyDocumentArgs.builder()\n            .statements(            \n                GetIamPolicyDocumentStatementArgs.builder()\n                    .sid(\"1\")\n                    .actions(                    \n                        \"s3:ListAllMyBuckets\",\n                        \"s3:GetBucketLocation\")\n                    .resources(\"arn:aws:s3:::*\")\n                    .build(),\n                GetIamPolicyDocumentStatementArgs.builder()\n                    .actions(\"s3:ListBucket\")\n                    .resources(\"arn:aws:s3:::state-terraform-s3\")\n                    .conditions(GetIamPolicyDocumentStatementConditionArgs.builder()\n                        .test(\"StringLike\")\n                        .variable(\"s3:prefix\")\n                        .values(                        \n                            \"\",\n                            \"home/\")\n                        .build())\n                    .build(),\n                GetIamPolicyDocumentStatementArgs.builder()\n                    .actions(\"s3:PutObject\")\n                    .resources(                    \n                        \"arn:aws:s3:::state-terraform-s3\",\n                        \"arn:aws:s3:::state-terraform-s3/*\")\n                    .build())\n            .build());\n\n        var testPolicy = new IamPolicy(\"testPolicy\", IamPolicyArgs.builder()        \n            .policy(example.applyValue(getIamPolicyDocumentResult -\u003e getIamPolicyDocumentResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testPolicy:\n    type: minio:IamPolicy\n    properties:\n      policy: ${example.json}\nvariables:\n  example:\n    fn::invoke:\n      Function: minio:getIamPolicyDocument\n      Arguments:\n        statements:\n          - sid: '1'\n            actions:\n              - s3:ListAllMyBuckets\n              - s3:GetBucketLocation\n            resources:\n              - arn:aws:s3:::*\n          - actions:\n              - s3:ListBucket\n            resources:\n              - arn:aws:s3:::state-terraform-s3\n            conditions:\n              - test: StringLike\n                variable: s3:prefix\n                values:\n                  -\n                  - home/\n          - actions:\n              - s3:PutObject\n            resources:\n              - arn:aws:s3:::state-terraform-s3\n              - arn:aws:s3:::state-terraform-s3/*\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIamPolicyDocument.\n",
                "properties": {
                    "overrideJson": {
                        "type": "string"
                    },
                    "policyId": {
                        "type": "string"
                    },
                    "sourceJson": {
                        "type": "string"
                    },
                    "statements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/minio:index/getIamPolicyDocumentStatement:getIamPolicyDocumentStatement"
                        }
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIamPolicyDocument.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "json": {
                        "type": "string"
                    },
                    "overrideJson": {
                        "type": "string"
                    },
                    "policyId": {
                        "type": "string"
                    },
                    "sourceJson": {
                        "type": "string"
                    },
                    "statements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/minio:index/getIamPolicyDocumentStatement:getIamPolicyDocumentStatement"
                        }
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "json",
                    "id"
                ]
            }
        }
    }
}