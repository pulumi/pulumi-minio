{
    "name": "minio",
    "description": "A Pulumi package for creating and managing minio cloud resources.",
    "keywords": [
        "pulumi",
        "minio"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`minio` Terraform Provider](https://github.com/aminueza/terraform-provider-minio).",
    "repository": "https://github.com/pulumi/pulumi-minio",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "minioAccessKey": {
                "type": "string",
                "description": "Minio Access Key\n"
            },
            "minioApiVersion": {
                "type": "string",
                "description": "Minio API Version (type: string, options: v2 or v4, default: v4)\n"
            },
            "minioCacertFile": {
                "type": "string"
            },
            "minioCertFile": {
                "type": "string"
            },
            "minioInsecure": {
                "type": "boolean"
            },
            "minioKeyFile": {
                "type": "string"
            },
            "minioRegion": {
                "type": "string",
                "description": "Minio Region (default: us-east-1)\n"
            },
            "minioSecretKey": {
                "type": "string",
                "description": "Minio Secret Key\n"
            },
            "minioServer": {
                "type": "string",
                "description": "Minio Host and Port\n"
            },
            "minioSsl": {
                "type": "boolean",
                "description": "Minio SSL enabled (default: false)\n"
            }
        },
        "defaults": [
            "minioAccessKey",
            "minioSecretKey",
            "minioServer"
        ]
    },
    "types": {
        "minio:index/IlmPolicyRule:IlmPolicyRule": {
            "properties": {
                "expiration": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "status"
                    ]
                }
            }
        },
        "minio:index/getIamPolicyDocumentStatement:getIamPolicyDocumentStatement": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/minio:index/getIamPolicyDocumentStatementCondition:getIamPolicyDocumentStatementCondition"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "effect": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "principal": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "minio:index/getIamPolicyDocumentStatementCondition:getIamPolicyDocumentStatementCondition": {
            "properties": {
                "test": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "variable": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "test",
                "values",
                "variable"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the minio package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "minioAccessKey": {
                "type": "string",
                "description": "Minio Access Key\n"
            },
            "minioApiVersion": {
                "type": "string",
                "description": "Minio API Version (type: string, options: v2 or v4, default: v4)\n"
            },
            "minioCacertFile": {
                "type": "string"
            },
            "minioCertFile": {
                "type": "string"
            },
            "minioInsecure": {
                "type": "boolean"
            },
            "minioKeyFile": {
                "type": "string"
            },
            "minioRegion": {
                "type": "string",
                "description": "Minio Region (default: us-east-1)\n"
            },
            "minioSecretKey": {
                "type": "string",
                "description": "Minio Secret Key\n"
            },
            "minioServer": {
                "type": "string",
                "description": "Minio Host and Port\n"
            },
            "minioSsl": {
                "type": "boolean",
                "description": "Minio SSL enabled (default: false)\n"
            }
        },
        "required": [
            "minioAccessKey",
            "minioSecretKey",
            "minioServer"
        ],
        "inputProperties": {
            "minioAccessKey": {
                "type": "string",
                "description": "Minio Access Key\n"
            },
            "minioApiVersion": {
                "type": "string",
                "description": "Minio API Version (type: string, options: v2 or v4, default: v4)\n"
            },
            "minioCacertFile": {
                "type": "string"
            },
            "minioCertFile": {
                "type": "string"
            },
            "minioInsecure": {
                "type": "boolean"
            },
            "minioKeyFile": {
                "type": "string"
            },
            "minioRegion": {
                "type": "string",
                "description": "Minio Region (default: us-east-1)\n"
            },
            "minioSecretKey": {
                "type": "string",
                "description": "Minio Secret Key\n"
            },
            "minioServer": {
                "type": "string",
                "description": "Minio Host and Port\n"
            },
            "minioSsl": {
                "type": "boolean",
                "description": "Minio SSL enabled (default: false)\n"
            }
        },
        "requiredInputs": [
            "minioAccessKey",
            "minioSecretKey",
            "minioServer"
        ]
    },
    "resources": {
        "minio:index/iamGroup:IamGroup": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as minio from \"@pulumi/minio\";\n\nconst developer = new minio.IamGroup(\"developer\", {});\nexport const minioUserGroup = developer.groupName;\n```\n```python\nimport pulumi\nimport pulumi_minio as minio\n\ndeveloper = minio.IamGroup(\"developer\")\npulumi.export(\"minioUserGroup\", developer.group_name)\n```\n```csharp\nusing Pulumi;\nusing Minio = Pulumi.Minio;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var developer = new Minio.IamGroup(\"developer\", new Minio.IamGroupArgs\n        {\n        });\n        this.MinioUserGroup = developer.GroupName;\n    }\n\n    [Output(\"minioUserGroup\")]\n    public Output\u003cstring\u003e MinioUserGroup { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-minio/sdk/go/minio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdeveloper, err := minio.NewIamGroup(ctx, \"developer\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"minioUserGroup\", developer.GroupName)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "disableGroup": {
                    "type": "boolean",
                    "description": "Disable group\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Delete group even if it has non-Terraform-managed members\n"
                },
                "groupName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "required": [
                "groupName",
                "name"
            ],
            "inputProperties": {
                "disableGroup": {
                    "type": "boolean",
                    "description": "Disable group\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Delete group even if it has non-Terraform-managed members\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamGroup resources.\n",
                "properties": {
                    "disableGroup": {
                        "type": "boolean",
                        "description": "Disable group\n"
                    },
                    "forceDestroy": {
                        "type": "boolean",
                        "description": "Delete group even if it has non-Terraform-managed members\n"
                    },
                    "groupName": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "minio:index/iamGroupMembership:IamGroupMembership": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "Group name to add users\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of group membership\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Add user or list of users such as a group membership\n"
                }
            },
            "required": [
                "group",
                "name",
                "users"
            ],
            "inputProperties": {
                "group": {
                    "type": "string",
                    "description": "Group name to add users\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of group membership\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Add user or list of users such as a group membership\n"
                }
            },
            "requiredInputs": [
                "group",
                "users"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamGroupMembership resources.\n",
                "properties": {
                    "group": {
                        "type": "string",
                        "description": "Group name to add users\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of group membership\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Add user or list of users such as a group membership\n"
                    }
                },
                "type": "object"
            }
        },
        "minio:index/iamGroupPolicy:IamGroupPolicy": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as minio from \"@pulumi/minio\";\n\nconst developer = new minio.IamGroup(\"developer\", {});\nconst testPolicy = new minio.IamGroupPolicy(\"test_policy\", {\n    group: developer.id,\n    policy: `{\n  \"Version\":\"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\":\"ListAllBucket\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:PutObject\"],\n      \"Principal\":\"*\",\n      \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n    }\n  ]\n}\n`,\n});\n\nexport const minioName = minio_iam_group_membership_developer.id;\nexport const minioPolicy = minio_iam_group_membership_developer.policy;\nexport const minioGroup = minio_iam_group_membership_developer.group;\n```\n```python\nimport pulumi\nimport pulumi_minio as minio\n\ndeveloper = minio.IamGroup(\"developer\")\ntest_policy = minio.IamGroupPolicy(\"testPolicy\",\n    group=developer.id,\n    policy=\"\"\"{\n  \"Version\":\"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\":\"ListAllBucket\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:PutObject\"],\n      \"Principal\":\"*\",\n      \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n    }\n  ]\n}\n\n\"\"\")\npulumi.export(\"minioName\", minio_iam_group_membership[\"developer\"][\"id\"])\npulumi.export(\"minioPolicy\", minio_iam_group_membership[\"developer\"][\"policy\"])\npulumi.export(\"minioGroup\", minio_iam_group_membership[\"developer\"][\"group\"])\n```\n```csharp\nusing Pulumi;\nusing Minio = Pulumi.Minio;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var developer = new Minio.IamGroup(\"developer\", new Minio.IamGroupArgs\n        {\n        });\n        var testPolicy = new Minio.IamGroupPolicy(\"testPolicy\", new Minio.IamGroupPolicyArgs\n        {\n            Group = developer.Id,\n            Policy = @\"{\n  \"\"Version\"\":\"\"2012-10-17\"\",\n  \"\"Statement\"\": [\n    {\n      \"\"Sid\"\":\"\"ListAllBucket\"\",\n      \"\"Effect\"\": \"\"Allow\"\",\n      \"\"Action\"\": [\"\"s3:PutObject\"\"],\n      \"\"Principal\"\":\"\"*\"\",\n      \"\"Resource\"\": \"\"arn:aws:s3:::state-terraform-s3/*\"\"\n    }\n  ]\n}\n\n\",\n        });\n        this.MinioName = minio_iam_group_membership.Developer.Id;\n        this.MinioPolicy = minio_iam_group_membership.Developer.Policy;\n        this.MinioGroup = minio_iam_group_membership.Developer.Group;\n    }\n\n    [Output(\"minioName\")]\n    public Output\u003cstring\u003e MinioName { get; set; }\n    [Output(\"minioPolicy\")]\n    public Output\u003cstring\u003e MinioPolicy { get; set; }\n    [Output(\"minioGroup\")]\n    public Output\u003cstring\u003e MinioGroup { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-minio/sdk/go/minio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdeveloper, err := minio.NewIamGroup(ctx, \"developer\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = minio.NewIamGroupPolicy(ctx, \"testPolicy\", \u0026minio.IamGroupPolicyArgs{\n\t\t\tGroup:  developer.ID(),\n\t\t\tPolicy: pulumi.String(fmt.Sprintf(\"%v%v%v%v%v%v%v%v%v%v%v%v%v\", \"{\\n\", \"  \\\"Version\\\":\\\"2012-10-17\\\",\\n\", \"  \\\"Statement\\\": [\\n\", \"    {\\n\", \"      \\\"Sid\\\":\\\"ListAllBucket\\\",\\n\", \"      \\\"Effect\\\": \\\"Allow\\\",\\n\", \"      \\\"Action\\\": [\\\"s3:PutObject\\\"],\\n\", \"      \\\"Principal\\\":\\\"*\\\",\\n\", \"      \\\"Resource\\\": \\\"arn:aws:s3:::state-terraform-s3/*\\\"\\n\", \"    }\\n\", \"  ]\\n\", \"}\\n\", \"\\n\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"minioName\", minio_iam_group_membership.Developer.Id)\n\t\tctx.Export(\"minioPolicy\", minio_iam_group_membership.Developer.Policy)\n\t\tctx.Export(\"minioGroup\", minio_iam_group_membership.Developer.Group)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "group": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namePrefix": {
                    "type": "string"
                },
                "policy": {
                    "type": "string"
                }
            },
            "required": [
                "group",
                "name",
                "policy"
            ],
            "inputProperties": {
                "group": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namePrefix": {
                    "type": "string"
                },
                "policy": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "group",
                "policy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamGroupPolicy resources.\n",
                "properties": {
                    "group": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "namePrefix": {
                        "type": "string"
                    },
                    "policy": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "minio:index/iamGroupPolicyAttachment:IamGroupPolicyAttachment": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as minio from \"@pulumi/minio\";\n\nconst developerIamGroup = new minio.IamGroup(\"developer\", {});\nconst testPolicy = new minio.IamGroupPolicy(\"test_policy\", {\n    policy: `{\n  \"Version\":\"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\":\"ListAllBucket\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:PutObject\"],\n      \"Principal\":\"*\",\n      \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n    }\n  ]\n}\n`,\n});\nconst developerIamGroupPolicyAttachment = new minio.IamGroupPolicyAttachment(\"developer\", {\n    groupName: minio_iam_group_group.name,\n    policyName: minio_iam_policy_test_policy.id,\n});\n\nexport const minioName = developerIamGroupPolicyAttachment.id;\nexport const minioUsers = developerIamGroupPolicyAttachment.groupName;\nexport const minioGroup = developerIamGroupPolicyAttachment.policyName;\n```\n```python\nimport pulumi\nimport pulumi_minio as minio\n\ndeveloper_iam_group = minio.IamGroup(\"developerIamGroup\")\ntest_policy = minio.IamGroupPolicy(\"testPolicy\", policy=\"\"\"{\n  \"Version\":\"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\":\"ListAllBucket\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:PutObject\"],\n      \"Principal\":\"*\",\n      \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n    }\n  ]\n}\n\n\"\"\")\ndeveloper_iam_group_policy_attachment = minio.IamGroupPolicyAttachment(\"developerIamGroupPolicyAttachment\",\n    group_name=minio_iam_group[\"group\"][\"name\"],\n    policy_name=minio_iam_policy[\"test_policy\"][\"id\"])\npulumi.export(\"minioName\", developer_iam_group_policy_attachment.id)\npulumi.export(\"minioUsers\", developer_iam_group_policy_attachment.group_name)\npulumi.export(\"minioGroup\", developer_iam_group_policy_attachment.policy_name)\n```\n```csharp\nusing Pulumi;\nusing Minio = Pulumi.Minio;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var developerIamGroup = new Minio.IamGroup(\"developerIamGroup\", new Minio.IamGroupArgs\n        {\n        });\n        var testPolicy = new Minio.IamGroupPolicy(\"testPolicy\", new Minio.IamGroupPolicyArgs\n        {\n            Policy = @\"{\n  \"\"Version\"\":\"\"2012-10-17\"\",\n  \"\"Statement\"\": [\n    {\n      \"\"Sid\"\":\"\"ListAllBucket\"\",\n      \"\"Effect\"\": \"\"Allow\"\",\n      \"\"Action\"\": [\"\"s3:PutObject\"\"],\n      \"\"Principal\"\":\"\"*\"\",\n      \"\"Resource\"\": \"\"arn:aws:s3:::state-terraform-s3/*\"\"\n    }\n  ]\n}\n\n\",\n        });\n        var developerIamGroupPolicyAttachment = new Minio.IamGroupPolicyAttachment(\"developerIamGroupPolicyAttachment\", new Minio.IamGroupPolicyAttachmentArgs\n        {\n            GroupName = minio_iam_group.Group.Name,\n            PolicyName = minio_iam_policy.Test_policy.Id,\n        });\n        this.MinioName = developerIamGroupPolicyAttachment.Id;\n        this.MinioUsers = developerIamGroupPolicyAttachment.GroupName;\n        this.MinioGroup = developerIamGroupPolicyAttachment.PolicyName;\n    }\n\n    [Output(\"minioName\")]\n    public Output\u003cstring\u003e MinioName { get; set; }\n    [Output(\"minioUsers\")]\n    public Output\u003cstring\u003e MinioUsers { get; set; }\n    [Output(\"minioGroup\")]\n    public Output\u003cstring\u003e MinioGroup { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-minio/sdk/go/minio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := minio.NewIamGroup(ctx, \"developerIamGroup\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = minio.NewIamGroupPolicy(ctx, \"testPolicy\", \u0026minio.IamGroupPolicyArgs{\n\t\t\tPolicy: pulumi.String(fmt.Sprintf(\"%v%v%v%v%v%v%v%v%v%v%v%v%v\", \"{\\n\", \"  \\\"Version\\\":\\\"2012-10-17\\\",\\n\", \"  \\\"Statement\\\": [\\n\", \"    {\\n\", \"      \\\"Sid\\\":\\\"ListAllBucket\\\",\\n\", \"      \\\"Effect\\\": \\\"Allow\\\",\\n\", \"      \\\"Action\\\": [\\\"s3:PutObject\\\"],\\n\", \"      \\\"Principal\\\":\\\"*\\\",\\n\", \"      \\\"Resource\\\": \\\"arn:aws:s3:::state-terraform-s3/*\\\"\\n\", \"    }\\n\", \"  ]\\n\", \"}\\n\", \"\\n\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdeveloperIamGroupPolicyAttachment, err := minio.NewIamGroupPolicyAttachment(ctx, \"developerIamGroupPolicyAttachment\", \u0026minio.IamGroupPolicyAttachmentArgs{\n\t\t\tGroupName:  pulumi.Any(minio_iam_group.Group.Name),\n\t\t\tPolicyName: pulumi.Any(minio_iam_policy.Test_policy.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"minioName\", developerIamGroupPolicyAttachment.ID())\n\t\tctx.Export(\"minioUsers\", developerIamGroupPolicyAttachment.GroupName)\n\t\tctx.Export(\"minioGroup\", developerIamGroupPolicyAttachment.PolicyName)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "groupName": {
                    "type": "string"
                },
                "policyName": {
                    "type": "string"
                }
            },
            "required": [
                "groupName",
                "policyName"
            ],
            "inputProperties": {
                "groupName": {
                    "type": "string"
                },
                "policyName": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "groupName",
                "policyName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamGroupPolicyAttachment resources.\n",
                "properties": {
                    "groupName": {
                        "type": "string"
                    },
                    "policyName": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "minio:index/iamGroupUserAttachment:IamGroupUserAttachment": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as minio from \"@pulumi/minio\";\n\nconst developerIamGroup = new minio.IamGroup(\"developerIamGroup\", {});\nconst userOne = new minio.IamUser(\"userOne\", {});\nconst developerIamGroupUserAttachment = new minio.IamGroupUserAttachment(\"developerIamGroupUserAttachment\", {\n    groupName: minio_iam_group.group.name,\n    userName: userOne.name,\n});\nexport const minioName = developerIamGroupUserAttachment.id;\nexport const minioUsers = developerIamGroupUserAttachment.groupName;\nexport const minioGroup = developerIamGroupUserAttachment.userName;\n```\n```python\nimport pulumi\nimport pulumi_minio as minio\n\ndeveloper_iam_group = minio.IamGroup(\"developerIamGroup\")\nuser_one = minio.IamUser(\"userOne\")\ndeveloper_iam_group_user_attachment = minio.IamGroupUserAttachment(\"developerIamGroupUserAttachment\",\n    group_name=minio_iam_group[\"group\"][\"name\"],\n    user_name=user_one.name)\npulumi.export(\"minioName\", developer_iam_group_user_attachment.id)\npulumi.export(\"minioUsers\", developer_iam_group_user_attachment.group_name)\npulumi.export(\"minioGroup\", developer_iam_group_user_attachment.user_name)\n```\n```csharp\nusing Pulumi;\nusing Minio = Pulumi.Minio;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var developerIamGroup = new Minio.IamGroup(\"developerIamGroup\", new Minio.IamGroupArgs\n        {\n        });\n        var userOne = new Minio.IamUser(\"userOne\", new Minio.IamUserArgs\n        {\n        });\n        var developerIamGroupUserAttachment = new Minio.IamGroupUserAttachment(\"developerIamGroupUserAttachment\", new Minio.IamGroupUserAttachmentArgs\n        {\n            GroupName = minio_iam_group.Group.Name,\n            UserName = userOne.Name,\n        });\n        this.MinioName = developerIamGroupUserAttachment.Id;\n        this.MinioUsers = developerIamGroupUserAttachment.GroupName;\n        this.MinioGroup = developerIamGroupUserAttachment.UserName;\n    }\n\n    [Output(\"minioName\")]\n    public Output\u003cstring\u003e MinioName { get; set; }\n    [Output(\"minioUsers\")]\n    public Output\u003cstring\u003e MinioUsers { get; set; }\n    [Output(\"minioGroup\")]\n    public Output\u003cstring\u003e MinioGroup { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-minio/sdk/go/minio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := minio.NewIamGroup(ctx, \"developerIamGroup\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuserOne, err := minio.NewIamUser(ctx, \"userOne\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdeveloperIamGroupUserAttachment, err := minio.NewIamGroupUserAttachment(ctx, \"developerIamGroupUserAttachment\", \u0026minio.IamGroupUserAttachmentArgs{\n\t\t\tGroupName: pulumi.Any(minio_iam_group.Group.Name),\n\t\t\tUserName:  userOne.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"minioName\", developerIamGroupUserAttachment.ID())\n\t\tctx.Export(\"minioUsers\", developerIamGroupUserAttachment.GroupName)\n\t\tctx.Export(\"minioGroup\", developerIamGroupUserAttachment.UserName)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "groupName": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            },
            "required": [
                "groupName",
                "userName"
            ],
            "inputProperties": {
                "groupName": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "groupName",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamGroupUserAttachment resources.\n",
                "properties": {
                    "groupName": {
                        "type": "string"
                    },
                    "userName": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "minio:index/iamPolicy:IamPolicy": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as minio from \"@pulumi/minio\";\n\nconst testPolicy = new minio.IamPolicy(\"testPolicy\", {policy: `{\n  \"Version\":\"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\":\"ListAllBucket\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:PutObject\"],\n      \"Principal\":\"*\",\n      \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n    }\n  ]\n}\n`});\nexport const minioId = testPolicy.id;\nexport const minioPolicy = testPolicy.policy;\n```\n```python\nimport pulumi\nimport pulumi_minio as minio\n\ntest_policy = minio.IamPolicy(\"testPolicy\", policy=\"\"\"{\n  \"Version\":\"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\":\"ListAllBucket\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:PutObject\"],\n      \"Principal\":\"*\",\n      \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n    }\n  ]\n}\n\"\"\")\npulumi.export(\"minioId\", test_policy.id)\npulumi.export(\"minioPolicy\", test_policy.policy)\n```\n```csharp\nusing Pulumi;\nusing Minio = Pulumi.Minio;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testPolicy = new Minio.IamPolicy(\"testPolicy\", new Minio.IamPolicyArgs\n        {\n            Policy = @\"{\n  \"\"Version\"\":\"\"2012-10-17\"\",\n  \"\"Statement\"\": [\n    {\n      \"\"Sid\"\":\"\"ListAllBucket\"\",\n      \"\"Effect\"\": \"\"Allow\"\",\n      \"\"Action\"\": [\"\"s3:PutObject\"\"],\n      \"\"Principal\"\":\"\"*\"\",\n      \"\"Resource\"\": \"\"arn:aws:s3:::state-terraform-s3/*\"\"\n    }\n  ]\n}\n\",\n        });\n        this.MinioId = testPolicy.Id;\n        this.MinioPolicy = testPolicy.Policy;\n    }\n\n    [Output(\"minioId\")]\n    public Output\u003cstring\u003e MinioId { get; set; }\n    [Output(\"minioPolicy\")]\n    public Output\u003cstring\u003e MinioPolicy { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-minio/sdk/go/minio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestPolicy, err := minio.NewIamPolicy(ctx, \"testPolicy\", \u0026minio.IamPolicyArgs{\n\t\t\tPolicy: pulumi.String(fmt.Sprintf(\"%v%v%v%v%v%v%v%v%v%v%v%v\", \"{\\n\", \"  \\\"Version\\\":\\\"2012-10-17\\\",\\n\", \"  \\\"Statement\\\": [\\n\", \"    {\\n\", \"      \\\"Sid\\\":\\\"ListAllBucket\\\",\\n\", \"      \\\"Effect\\\": \\\"Allow\\\",\\n\", \"      \\\"Action\\\": [\\\"s3:PutObject\\\"],\\n\", \"      \\\"Principal\\\":\\\"*\\\",\\n\", \"      \\\"Resource\\\": \\\"arn:aws:s3:::state-terraform-s3/*\\\"\\n\", \"    }\\n\", \"  ]\\n\", \"}\\n\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"minioId\", testPolicy.ID())\n\t\tctx.Export(\"minioPolicy\", testPolicy.Policy)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "name": {
                    "type": "string"
                },
                "namePrefix": {
                    "type": "string"
                },
                "policy": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "policy"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "namePrefix": {
                    "type": "string"
                },
                "policy": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "policy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamPolicy resources.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "namePrefix": {
                        "type": "string"
                    },
                    "policy": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "minio:index/iamUser:IamUser": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as minio from \"@pulumi/minio\";\n\nconst testIamUser = new minio.IamUser(\"test\", {\n    forceDestroy: true,\n    tags: {\n        \"tag-key\": \"tag-value\",\n    },\n});\n\nexport const test = testIamUser.id;\nexport const status = testIamUser.status;\nexport const secret = testIamUser.secret;\n```\n```python\nimport pulumi\nimport pulumi_minio as minio\n\ntest_iam_user = minio.IamUser(\"testIamUser\",\n    force_destroy=True,\n    tags={\n        \"tag-key\": \"tag-value\",\n    })\npulumi.export(\"test\", test_iam_user.id)\npulumi.export(\"status\", test_iam_user.status)\npulumi.export(\"secret\", test_iam_user.secret)\n```\n```csharp\nusing Pulumi;\nusing Minio = Pulumi.Minio;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testIamUser = new Minio.IamUser(\"testIamUser\", new Minio.IamUserArgs\n        {\n            ForceDestroy = true,\n            Tags = \n            {\n                { \"tag-key\", \"tag-value\" },\n            },\n        });\n        this.Test = testIamUser.Id;\n        this.Status = testIamUser.Status;\n        this.Secret = testIamUser.Secret;\n    }\n\n    [Output(\"test\")]\n    public Output\u003cstring\u003e Test { get; set; }\n    [Output(\"status\")]\n    public Output\u003cstring\u003e Status { get; set; }\n    [Output(\"secret\")]\n    public Output\u003cstring\u003e Secret { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-minio/sdk/go/minio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestIamUser, err := minio.NewIamUser(ctx, \"testIamUser\", \u0026minio.IamUserArgs{\n\t\t\tForceDestroy: pulumi.Bool(true),\n\t\t\tTags: pulumi.AnyMap{\n\t\t\t\t\"tag-key\": pulumi.Any(\"tag-value\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"test\", testIamUser.ID())\n\t\tctx.Export(\"status\", testIamUser.Status)\n\t\tctx.Export(\"secret\", testIamUser.Secret)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "disableUser": {
                    "type": "boolean",
                    "description": "Disable user\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Delete user even if it has non-Terraform-managed IAM access keys\n"
                },
                "name": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "updateSecret": {
                    "type": "boolean",
                    "description": "Rotate Minio User Secret Key\n"
                }
            },
            "required": [
                "name",
                "secret",
                "status"
            ],
            "inputProperties": {
                "disableUser": {
                    "type": "boolean",
                    "description": "Disable user\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Delete user even if it has non-Terraform-managed IAM access keys\n"
                },
                "name": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "updateSecret": {
                    "type": "boolean",
                    "description": "Rotate Minio User Secret Key\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamUser resources.\n",
                "properties": {
                    "disableUser": {
                        "type": "boolean",
                        "description": "Disable user\n"
                    },
                    "forceDestroy": {
                        "type": "boolean",
                        "description": "Delete user even if it has non-Terraform-managed IAM access keys\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "secret": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "updateSecret": {
                        "type": "boolean",
                        "description": "Rotate Minio User Secret Key\n"
                    }
                },
                "type": "object"
            }
        },
        "minio:index/iamUserPolicyAttachment:IamUserPolicyAttachment": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as minio from \"@pulumi/minio\";\n\nconst testUser = new minio.IamUser(\"test_user\", {});\nconst testPolicy = new minio.IamPolicy(\"test_policy\", {\n    policy: `{\n  \"Version\":\"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\":\"ListAllBucket\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:PutObject\"],\n      \"Principal\":\"*\",\n      \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n    }\n  ]\n}\n`,\n});\nconst developer = new minio.IamUserPolicyAttachment(\"developer\", {\n    policyName: testPolicy.id,\n    userName: testUser.id,\n});\n\nexport const minioName = developer.id;\nexport const minioUsers = developer.userName;\nexport const minioGroup = developer.policyName;\n```\n```python\nimport pulumi\nimport pulumi_minio as minio\n\ntest_user = minio.IamUser(\"testUser\")\ntest_policy = minio.IamPolicy(\"testPolicy\", policy=\"\"\"{\n  \"Version\":\"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\":\"ListAllBucket\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:PutObject\"],\n      \"Principal\":\"*\",\n      \"Resource\": \"arn:aws:s3:::state-terraform-s3/*\"\n    }\n  ]\n}\n\n\"\"\")\ndeveloper = minio.IamUserPolicyAttachment(\"developer\",\n    policy_name=test_policy.id,\n    user_name=test_user.id)\npulumi.export(\"minioName\", developer.id)\npulumi.export(\"minioUsers\", developer.user_name)\npulumi.export(\"minioGroup\", developer.policy_name)\n```\n```csharp\nusing Pulumi;\nusing Minio = Pulumi.Minio;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testUser = new Minio.IamUser(\"testUser\", new Minio.IamUserArgs\n        {\n        });\n        var testPolicy = new Minio.IamPolicy(\"testPolicy\", new Minio.IamPolicyArgs\n        {\n            Policy = @\"{\n  \"\"Version\"\":\"\"2012-10-17\"\",\n  \"\"Statement\"\": [\n    {\n      \"\"Sid\"\":\"\"ListAllBucket\"\",\n      \"\"Effect\"\": \"\"Allow\"\",\n      \"\"Action\"\": [\"\"s3:PutObject\"\"],\n      \"\"Principal\"\":\"\"*\"\",\n      \"\"Resource\"\": \"\"arn:aws:s3:::state-terraform-s3/*\"\"\n    }\n  ]\n}\n\n\",\n        });\n        var developer = new Minio.IamUserPolicyAttachment(\"developer\", new Minio.IamUserPolicyAttachmentArgs\n        {\n            PolicyName = testPolicy.Id,\n            UserName = testUser.Id,\n        });\n        this.MinioName = developer.Id;\n        this.MinioUsers = developer.UserName;\n        this.MinioGroup = developer.PolicyName;\n    }\n\n    [Output(\"minioName\")]\n    public Output\u003cstring\u003e MinioName { get; set; }\n    [Output(\"minioUsers\")]\n    public Output\u003cstring\u003e MinioUsers { get; set; }\n    [Output(\"minioGroup\")]\n    public Output\u003cstring\u003e MinioGroup { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-minio/sdk/go/minio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestUser, err := minio.NewIamUser(ctx, \"testUser\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestPolicy, err := minio.NewIamPolicy(ctx, \"testPolicy\", \u0026minio.IamPolicyArgs{\n\t\t\tPolicy: pulumi.String(fmt.Sprintf(\"%v%v%v%v%v%v%v%v%v%v%v%v%v\", \"{\\n\", \"  \\\"Version\\\":\\\"2012-10-17\\\",\\n\", \"  \\\"Statement\\\": [\\n\", \"    {\\n\", \"      \\\"Sid\\\":\\\"ListAllBucket\\\",\\n\", \"      \\\"Effect\\\": \\\"Allow\\\",\\n\", \"      \\\"Action\\\": [\\\"s3:PutObject\\\"],\\n\", \"      \\\"Principal\\\":\\\"*\\\",\\n\", \"      \\\"Resource\\\": \\\"arn:aws:s3:::state-terraform-s3/*\\\"\\n\", \"    }\\n\", \"  ]\\n\", \"}\\n\", \"\\n\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdeveloper, err := minio.NewIamUserPolicyAttachment(ctx, \"developer\", \u0026minio.IamUserPolicyAttachmentArgs{\n\t\t\tPolicyName: testPolicy.ID(),\n\t\t\tUserName:   testUser.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"minioName\", developer.ID())\n\t\tctx.Export(\"minioUsers\", developer.UserName)\n\t\tctx.Export(\"minioGroup\", developer.PolicyName)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "policyName": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            },
            "required": [
                "policyName",
                "userName"
            ],
            "inputProperties": {
                "policyName": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "policyName",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamUserPolicyAttachment resources.\n",
                "properties": {
                    "policyName": {
                        "type": "string"
                    },
                    "userName": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "minio:index/ilmPolicy:IlmPolicy": {
            "description": "`minio.IlmPolicy` handles lifecycle settings for a given `minio.S3Bucket`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as minio from \"@pulumi/minio\";\n\nconst bucket = new minio.S3Bucket(\"bucket\", {bucket: \"bucket\"});\nconst bucket_lifecycle_rules = new minio.IlmPolicy(\"bucket-lifecycle-rules\", {\n    bucket: bucket.bucket,\n    rules: [{\n        id: \"expire-7d\",\n        expiration: 7,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_minio as minio\n\nbucket = minio.S3Bucket(\"bucket\", bucket=\"bucket\")\nbucket_lifecycle_rules = minio.IlmPolicy(\"bucket-lifecycle-rules\",\n    bucket=bucket.bucket,\n    rules=[minio.IlmPolicyRuleArgs(\n        id=\"expire-7d\",\n        expiration=\"7\",\n    )])\n```\n```csharp\nusing Pulumi;\nusing Minio = Pulumi.Minio;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var bucket = new Minio.S3Bucket(\"bucket\", new Minio.S3BucketArgs\n        {\n            Bucket = \"bucket\",\n        });\n        var bucket_lifecycle_rules = new Minio.IlmPolicy(\"bucket-lifecycle-rules\", new Minio.IlmPolicyArgs\n        {\n            Bucket = bucket.Bucket,\n            Rules = \n            {\n                new Minio.Inputs.IlmPolicyRuleArgs\n                {\n                    Id = \"expire-7d\",\n                    Expiration = \"7\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-minio/sdk/go/minio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tbucket, err := minio.NewS3Bucket(ctx, \"bucket\", \u0026minio.S3BucketArgs{\n\t\t\tBucket: pulumi.String(\"bucket\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = minio.NewIlmPolicy(ctx, \"bucket-lifecycle-rules\", \u0026minio.IlmPolicyArgs{\n\t\t\tBucket: bucket.Bucket,\n\t\t\tRules: IlmPolicyRuleArray{\n\t\t\t\t\u0026IlmPolicyRuleArgs{\n\t\t\t\t\tId:         pulumi.String(\"expire-7d\"),\n\t\t\t\t\tExpiration: pulumi.String(\"7\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "bucket": {
                    "type": "string"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/minio:index/IlmPolicyRule:IlmPolicyRule"
                    }
                }
            },
            "required": [
                "bucket",
                "rules"
            ],
            "inputProperties": {
                "bucket": {
                    "type": "string"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/minio:index/IlmPolicyRule:IlmPolicyRule"
                    }
                }
            },
            "requiredInputs": [
                "bucket",
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IlmPolicy resources.\n",
                "properties": {
                    "bucket": {
                        "type": "string"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/minio:index/IlmPolicyRule:IlmPolicyRule"
                        }
                    }
                },
                "type": "object"
            }
        },
        "minio:index/s3Bucket:S3Bucket": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as minio from \"@pulumi/minio\";\n\nconst stateTerraformS3 = new minio.S3Bucket(\"state_terraform_s3\", {\n    acl: \"public\",\n    bucket: \"state-terraform-s3\",\n});\n\nexport const minioId = stateTerraformS3.id;\nexport const minioUrl = stateTerraformS3.bucketDomainName;\n```\n```python\nimport pulumi\nimport pulumi_minio as minio\n\nstate_terraform_s3 = minio.S3Bucket(\"stateTerraformS3\",\n    acl=\"public\",\n    bucket=\"state-terraform-s3\")\npulumi.export(\"minioId\", state_terraform_s3.id)\npulumi.export(\"minioUrl\", state_terraform_s3.bucket_domain_name)\n```\n```csharp\nusing Pulumi;\nusing Minio = Pulumi.Minio;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var stateTerraformS3 = new Minio.S3Bucket(\"stateTerraformS3\", new Minio.S3BucketArgs\n        {\n            Acl = \"public\",\n            Bucket = \"state-terraform-s3\",\n        });\n        this.MinioId = stateTerraformS3.Id;\n        this.MinioUrl = stateTerraformS3.BucketDomainName;\n    }\n\n    [Output(\"minioId\")]\n    public Output\u003cstring\u003e MinioId { get; set; }\n    [Output(\"minioUrl\")]\n    public Output\u003cstring\u003e MinioUrl { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-minio/sdk/go/minio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tstateTerraformS3, err := minio.NewS3Bucket(ctx, \"stateTerraformS3\", \u0026minio.S3BucketArgs{\n\t\t\tAcl:    pulumi.String(\"public\"),\n\t\t\tBucket: pulumi.String(\"state-terraform-s3\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"minioId\", stateTerraformS3.ID())\n\t\tctx.Export(\"minioUrl\", stateTerraformS3.BucketDomainName)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "acl": {
                    "type": "string"
                },
                "bucket": {
                    "type": "string"
                },
                "bucketDomainName": {
                    "type": "string"
                },
                "bucketPrefix": {
                    "type": "string"
                },
                "forceDestroy": {
                    "type": "boolean"
                }
            },
            "required": [
                "bucket",
                "bucketDomainName"
            ],
            "inputProperties": {
                "acl": {
                    "type": "string"
                },
                "bucket": {
                    "type": "string"
                },
                "bucketPrefix": {
                    "type": "string"
                },
                "forceDestroy": {
                    "type": "boolean"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering S3Bucket resources.\n",
                "properties": {
                    "acl": {
                        "type": "string"
                    },
                    "bucket": {
                        "type": "string"
                    },
                    "bucketDomainName": {
                        "type": "string"
                    },
                    "bucketPrefix": {
                        "type": "string"
                    },
                    "forceDestroy": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "minio:index/s3Object:S3Object": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as minio from \"@pulumi/minio\";\n\nconst stateTerraformS3 = new minio.S3Bucket(\"stateTerraformS3\", {\n    bucket: \"state-terraform-s3\",\n    acl: \"public\",\n});\nconst txtFile = new minio.S3Object(\"txtFile\", {\n    bucketName: stateTerraformS3.bucket,\n    objectName: \"text.txt\",\n    content: \"Lorem ipsum dolor sit amet.\",\n}, {\n    dependsOn: [stateTerraformS3],\n});\nexport const minioId = txtFile.id;\n```\n```python\nimport pulumi\nimport pulumi_minio as minio\n\nstate_terraform_s3 = minio.S3Bucket(\"stateTerraformS3\",\n    bucket=\"state-terraform-s3\",\n    acl=\"public\")\ntxt_file = minio.S3Object(\"txtFile\",\n    bucket_name=state_terraform_s3.bucket,\n    object_name=\"text.txt\",\n    content=\"Lorem ipsum dolor sit amet.\",\n    opts=pulumi.ResourceOptions(depends_on=[state_terraform_s3]))\npulumi.export(\"minioId\", txt_file.id)\n```\n```csharp\nusing Pulumi;\nusing Minio = Pulumi.Minio;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var stateTerraformS3 = new Minio.S3Bucket(\"stateTerraformS3\", new Minio.S3BucketArgs\n        {\n            Bucket = \"state-terraform-s3\",\n            Acl = \"public\",\n        });\n        var txtFile = new Minio.S3Object(\"txtFile\", new Minio.S3ObjectArgs\n        {\n            BucketName = stateTerraformS3.Bucket,\n            ObjectName = \"text.txt\",\n            Content = \"Lorem ipsum dolor sit amet.\",\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                stateTerraformS3,\n            },\n        });\n        this.MinioId = txtFile.Id;\n    }\n\n    [Output(\"minioId\")]\n    public Output\u003cstring\u003e MinioId { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-minio/sdk/go/minio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tstateTerraformS3, err := minio.NewS3Bucket(ctx, \"stateTerraformS3\", \u0026minio.S3BucketArgs{\n\t\t\tBucket: pulumi.String(\"state-terraform-s3\"),\n\t\t\tAcl:    pulumi.String(\"public\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttxtFile, err := minio.NewS3Object(ctx, \"txtFile\", \u0026minio.S3ObjectArgs{\n\t\t\tBucketName: stateTerraformS3.Bucket,\n\t\t\tObjectName: pulumi.String(\"text.txt\"),\n\t\t\tContent:    pulumi.String(\"Lorem ipsum dolor sit amet.\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tstateTerraformS3,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"minioId\", txtFile.ID())\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "bucketName": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "contentBase64": {
                    "type": "string"
                },
                "contentType": {
                    "type": "string"
                },
                "etag": {
                    "type": "string"
                },
                "objectName": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "versionId": {
                    "type": "string"
                }
            },
            "required": [
                "bucketName",
                "contentType",
                "etag",
                "objectName",
                "versionId"
            ],
            "inputProperties": {
                "bucketName": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "contentBase64": {
                    "type": "string"
                },
                "contentType": {
                    "type": "string"
                },
                "etag": {
                    "type": "string"
                },
                "objectName": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "versionId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "bucketName",
                "objectName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering S3Object resources.\n",
                "properties": {
                    "bucketName": {
                        "type": "string"
                    },
                    "content": {
                        "type": "string"
                    },
                    "contentBase64": {
                        "type": "string"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "etag": {
                        "type": "string"
                    },
                    "objectName": {
                        "type": "string"
                    },
                    "source": {
                        "type": "string"
                    },
                    "versionId": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "minio:index/getIamPolicyDocument:getIamPolicyDocument": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as minio from \"@pulumi/minio\";\n\nconst example = minio.getIamPolicyDocument({\n    statements: [\n        {\n            sid: \"1\",\n            actions: [\n                \"s3:ListAllMyBuckets\",\n                \"s3:GetBucketLocation\",\n            ],\n            resources: [\"arn:aws:s3:::*\"],\n        },\n        {\n            actions: [\"s3:ListBucket\"],\n            resources: [\"arn:aws:s3:::state-terraform-s3\"],\n            conditions: [{\n                test: \"StringLike\",\n                variable: \"s3:prefix\",\n                values: [\n                    \"\",\n                    \"home/\",\n                ],\n            }],\n        },\n        {\n            actions: [\"s3:PutObject\"],\n            resources: [\n                \"arn:aws:s3:::state-terraform-s3\",\n                \"arn:aws:s3:::state-terraform-s3/*\",\n            ],\n        },\n    ],\n});\nconst testPolicy = new minio.IamPolicy(\"testPolicy\", {policy: example.then(example =\u003e example.json)});\n```\n```python\nimport pulumi\nimport pulumi_minio as minio\n\nexample = minio.get_iam_policy_document(statements=[\n    minio.GetIamPolicyDocumentStatementArgs(\n        sid=\"1\",\n        actions=[\n            \"s3:ListAllMyBuckets\",\n            \"s3:GetBucketLocation\",\n        ],\n        resources=[\"arn:aws:s3:::*\"],\n    ),\n    minio.GetIamPolicyDocumentStatementArgs(\n        actions=[\"s3:ListBucket\"],\n        resources=[\"arn:aws:s3:::state-terraform-s3\"],\n        conditions=[minio.GetIamPolicyDocumentStatementConditionArgs(\n            test=\"StringLike\",\n            variable=\"s3:prefix\",\n            values=[\n                \"\",\n                \"home/\",\n            ],\n        )],\n    ),\n    minio.GetIamPolicyDocumentStatementArgs(\n        actions=[\"s3:PutObject\"],\n        resources=[\n            \"arn:aws:s3:::state-terraform-s3\",\n            \"arn:aws:s3:::state-terraform-s3/*\",\n        ],\n    ),\n])\ntest_policy = minio.IamPolicy(\"testPolicy\", policy=example.json)\n```\n```csharp\nusing Pulumi;\nusing Minio = Pulumi.Minio;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var example = Output.Create(Minio.GetIamPolicyDocument.InvokeAsync(new Minio.GetIamPolicyDocumentArgs\n        {\n            Statements = \n            {\n                new Minio.Inputs.GetIamPolicyDocumentStatementArgs\n                {\n                    Sid = \"1\",\n                    Actions = \n                    {\n                        \"s3:ListAllMyBuckets\",\n                        \"s3:GetBucketLocation\",\n                    },\n                    Resources = \n                    {\n                        \"arn:aws:s3:::*\",\n                    },\n                },\n                new Minio.Inputs.GetIamPolicyDocumentStatementArgs\n                {\n                    Actions = \n                    {\n                        \"s3:ListBucket\",\n                    },\n                    Resources = \n                    {\n                        \"arn:aws:s3:::state-terraform-s3\",\n                    },\n                    Conditions = \n                    {\n                        new Minio.Inputs.GetIamPolicyDocumentStatementConditionArgs\n                        {\n                            Test = \"StringLike\",\n                            Variable = \"s3:prefix\",\n                            Values = \n                            {\n                                \"\",\n                                \"home/\",\n                            },\n                        },\n                    },\n                },\n                new Minio.Inputs.GetIamPolicyDocumentStatementArgs\n                {\n                    Actions = \n                    {\n                        \"s3:PutObject\",\n                    },\n                    Resources = \n                    {\n                        \"arn:aws:s3:::state-terraform-s3\",\n                        \"arn:aws:s3:::state-terraform-s3/*\",\n                    },\n                },\n            },\n        }));\n        var testPolicy = new Minio.IamPolicy(\"testPolicy\", new Minio.IamPolicyArgs\n        {\n            Policy = example.Apply(example =\u003e example.Json),\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-minio/sdk/go/minio\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := minio.GetIamPolicyDocument(ctx, \u0026GetIamPolicyDocumentArgs{\n\t\t\tStatements: []GetIamPolicyDocumentStatement{\n\t\t\t\tGetIamPolicyDocumentStatement{\n\t\t\t\t\tSid: pulumi.StringRef(\"1\"),\n\t\t\t\t\tActions: []string{\n\t\t\t\t\t\t\"s3:ListAllMyBuckets\",\n\t\t\t\t\t\t\"s3:GetBucketLocation\",\n\t\t\t\t\t},\n\t\t\t\t\tResources: []string{\n\t\t\t\t\t\t\"arn:aws:s3:::*\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tGetIamPolicyDocumentStatement{\n\t\t\t\t\tActions: []string{\n\t\t\t\t\t\t\"s3:ListBucket\",\n\t\t\t\t\t},\n\t\t\t\t\tResources: []string{\n\t\t\t\t\t\t\"arn:aws:s3:::state-terraform-s3\",\n\t\t\t\t\t},\n\t\t\t\t\tConditions: []GetIamPolicyDocumentStatementCondition{\n\t\t\t\t\t\tGetIamPolicyDocumentStatementCondition{\n\t\t\t\t\t\t\tTest:     \"StringLike\",\n\t\t\t\t\t\t\tVariable: \"s3:prefix\",\n\t\t\t\t\t\t\tValues: []string{\n\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t\"home/\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tGetIamPolicyDocumentStatement{\n\t\t\t\t\tActions: []string{\n\t\t\t\t\t\t\"s3:PutObject\",\n\t\t\t\t\t},\n\t\t\t\t\tResources: []string{\n\t\t\t\t\t\t\"arn:aws:s3:::state-terraform-s3\",\n\t\t\t\t\t\t\"arn:aws:s3:::state-terraform-s3/*\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = minio.NewIamPolicy(ctx, \"testPolicy\", \u0026minio.IamPolicyArgs{\n\t\t\tPolicy: pulumi.String(example.Json),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIamPolicyDocument.\n",
                "properties": {
                    "overrideJson": {
                        "type": "string"
                    },
                    "policyId": {
                        "type": "string"
                    },
                    "sourceJson": {
                        "type": "string"
                    },
                    "statements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/minio:index/getIamPolicyDocumentStatement:getIamPolicyDocumentStatement"
                        }
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIamPolicyDocument.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "json": {
                        "type": "string"
                    },
                    "overrideJson": {
                        "type": "string"
                    },
                    "policyId": {
                        "type": "string"
                    },
                    "sourceJson": {
                        "type": "string"
                    },
                    "statements": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/minio:index/getIamPolicyDocumentStatement:getIamPolicyDocumentStatement"
                        }
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "json",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-minio/sdk/go/minio"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing minio cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/aminueza/terraform-provider-minio)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-minio` repo](https://github.com/pulumi/pulumi-minio/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`aminueza/terraform-provider-minio` repo](https://github.com/aminueza/terraform-provider-minio/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/aminueza/terraform-provider-minio)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-minio` repo](https://github.com/pulumi/pulumi-minio/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`aminueza/terraform-provider-minio` repo](https://github.com/aminueza/terraform-provider-minio/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}